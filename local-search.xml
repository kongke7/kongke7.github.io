<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java8-新特性</title>
    <link href="/2023/12/10/Java8/"/>
    <url>/2023/12/10/Java8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h1><blockquote><p>Java 8   的新特性</p></blockquote><h2 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><ul><li><code>(参数) -&gt; &#123;方法体&#125;</code></li><li><code>参数 -&gt; &#123;方法体&#125;</code>：当只有一个参数时，可以省略小括号</li><li><code>(参数) -&gt; 方法体</code>：当方法体只有一条语句时，可以省略大括号</li></ul><blockquote><ol><li>无参无返回值</li></ol></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法          </span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">run1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                  System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          <span class="hljs-type">Runnable</span> <span class="hljs-variable">run2</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>一个参数 ， 无返回值</li></ol></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法             </span><br>Consumer&lt;String&gt; con1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                  System.out.println(s);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          Consumer&lt;String&gt; con2 = (String s) -&gt; &#123;<br>              System.out.println(s);<br>          &#125;;<br>          <span class="hljs-comment">// 当方法体只有一条语句时，大括号可以省略，（有无返回值都一样）</span><br>          Consumer&lt;String&gt; con3 = (String s) -&gt; System.out.println(s);<br>          <span class="hljs-comment">// 参数类型可以省略   (类型推断)</span><br>          Consumer&lt;String&gt; con4 = (s) -&gt; System.out.println(s);<br>          <span class="hljs-comment">// 一个参数可以省略括号</span><br>          Consumer&lt;String&gt; con5 = s -&gt; System.out.println(s);<br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>有两个以上接口，并且有返回值，有多条语句</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法        </span><br>Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                  System.out.println(<span class="hljs-string">&quot;两数比较&quot;</span>);<br>                  <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          <span class="hljs-comment">// 单条语句</span><br>          Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; o1.compareTo(o2);<br>          <span class="hljs-comment">// 多条语句</span><br>          Comparator&lt;Integer&gt; com3 = (o1, o2) -&gt; &#123;<br>              System.out.println(<span class="hljs-string">&quot;HHH&quot;</span>);<br>              <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>          &#125;;<br></code></pre></td></tr></table></figure><h3 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h3><ul><li><p><strong>Java四个基本函数式接口</strong></p><table><thead><tr><th>名称</th><th>抽象方法</th></tr></thead><tbody><tr><td>Consumer<T>  消费型</td><td>void accept(T t)</td></tr><tr><td>Predicate<T>    判定型</td><td>boolean test(T t)</td></tr><tr><td>Supplier<T>      供给型</td><td>T get()</td></tr><tr><td>Function&lt;T,R&gt;   函数型</td><td>R apply(T t)</td></tr></tbody></table></li><li><p>示例</p><ul><li><p><code>Consumer&lt;T&gt;</code> 消费型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterCons</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 正常写法</span><br>        cons(<span class="hljs-number">500.0</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Double&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;消费%.2f元\n&quot;</span>, aDouble);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//lambda</span><br>        cons(<span class="hljs-number">500.0</span>, money -&gt; System.out.printf(<span class="hljs-string">&quot;消费%.2f元\n&quot;</span>, money));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cons</span><span class="hljs-params">(Double money, Consumer&lt;Double&gt; con)</span> &#123;<br>        con.accept(money);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt;</code> 判定型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterPre</span><span class="hljs-params">()</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;AB&quot;</span>, <span class="hljs-string">&quot;AC&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>);<br>        <span class="hljs-comment">// 正常写法</span><br>    List&lt;String&gt; res = pres(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;String&gt;() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 判定条件</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> s.contains(<span class="hljs-string">&quot;A&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        System.out.println(pres(list, s -&gt; s.contains(<span class="hljs-string">&quot;A&quot;</span>)));<br><br>        System.out.println(res);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">pres</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-comment">// pre中只有一个方法</span><br>            <span class="hljs-keyword">if</span> (pre.test(s)) &#123;<br>                res.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Supplier&lt;T&gt;</code> 供给型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterSup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 正常写法</span><br>    supp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;str&quot;</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        supp(() -&gt; <span class="hljs-string">&quot;str&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">supp</span><span class="hljs-params">(Supplier&lt;String&gt; sup)</span> &#123;<br>        System.out.println(sup.get());<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Function&lt;T,R&gt;</code> 函数型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterFunc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 正常写法</span><br>    func((<span class="hljs-type">byte</span>) <span class="hljs-number">127</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Byte, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Byte aByte)</span> &#123;<br>                <span class="hljs-keyword">return</span> aByte + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        func((<span class="hljs-type">byte</span>) -<span class="hljs-number">128</span>, b -&gt; b - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(Byte bytes, Function&lt;Byte, Integer&gt; func)</span> &#123;<br>        System.out.println(func.apply(bytes));<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3. 方法引用"></a>3. 方法引用</h3><blockquote><p>实现的方法需要与抽象方法参数类型及返回值类型一致</p></blockquote><ul><li><p>使用格式：<code>类(或对象) :: 方法名</code></p><ul><li><p><code>类 :: 静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Supplier&lt;Long&gt; sup2 = System::currentTimeMillis;<br>      System.out.println(sup2.get());<br>      <span class="hljs-comment">// Comparator&lt;T&gt; int compare(T t1 , T t2)</span><br>      Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; Integer.compare(o1, o2);<br>      Comparator&lt;Integer&gt; com2 = Integer::compare;<br>com1.compare(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>类 :: 非静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// BiPredicate&lt;T,T&gt; boolean test(T t1, T t2)</span><br>      BiPredicate&lt;String, String&gt; bip = (s1, s2) -&gt; s1.equals(s2);<br>      <span class="hljs-comment">// String boolean s1.equals(s2)</span><br>      BiPredicate&lt;String, String&gt; bip2 = String::equals;<br>bip.test(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>对象 :: 非静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Consumer&lt;String&gt; cons = s -&gt; System.out.println(s);<br>      <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>      cons = ps::println;<br>cons.accept(<span class="hljs-string">&quot;str&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-构造器引用"><a href="#4-构造器引用" class="headerlink" title="4. 构造器引用"></a>4. 构造器引用</h3><blockquote><p>需要与抽象方法参数类型及返回值类型一致<br>需要实体类中存在对应的有参构造器</p></blockquote><ul><li><p><strong>无参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Supplier&lt;Book&gt; sup = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>Supplier&lt;Book&gt; sup2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sup.get();<br></code></pre></td></tr></table></figure></li><li><p><strong>有参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">Function&lt;String, Book&gt; func1 = s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(s);<br>Function&lt;String, Book&gt; func2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> func1.apply(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-type">Book</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> func2.apply(<span class="hljs-string">&quot;B&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>多参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">BiFunction&lt;String, Integer, Book&gt; bf1 = (s, i) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(s, i);<br>BiFunction&lt;String, Integer, Book&gt; bf2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> bf1.apply(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">10</span>);<br><span class="hljs-type">Book</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> bf2.apply(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-数组引用"><a href="#5-数组引用" class="headerlink" title="5. 数组引用"></a>5. 数组引用</h3><blockquote><p>将数组看成一个对象 ， 与构造器引用类似</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">Function&lt;Integer, String[]&gt; fun1 = len -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[len];<br>Function&lt;Integer, String[]&gt; fun2 = String[]::<span class="hljs-keyword">new</span>;<br><br>String[] arr = fun1.apply(<span class="hljs-number">5</span>);<br>String[] arr1 = fun2.apply(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h2 id="二、Stream-API"><a href="#二、Stream-API" class="headerlink" title="二、Stream API"></a>二、Stream API</h2><blockquote><p>Stream流获取操作对象，不改变原对象的值</p></blockquote><table><thead><tr><th>类型</th><th>定义</th></tr></thead><tbody><tr><td>顺序流</td><td>Stream<T>  stream()</td></tr><tr><td>并行流</td><td>Stream<T>  parallelStream()</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//        default Stream&lt;T&gt; stream() 顺序流</span><br>        Stream&lt;Book&gt; stream = books.stream();<br><span class="hljs-comment">//        default Stream&lt;T&gt; parallelStream() 并行流</span><br>        Stream&lt;Book&gt; praStream = books.parallelStream();<br></code></pre></td></tr></table></figure><h3 id="1-获取流"><a href="#1-获取流" class="headerlink" title="1. 获取流"></a>1. 获取流</h3><ul><li><p>集合获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">        List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//        default Stream&lt;T&gt; stream() 顺序流</span><br>        Stream&lt;Book&gt; stream = books.stream();<br></code></pre></td></tr></table></figure></li><li><p>数组获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"> <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">intStream</span> <span class="hljs-operator">=</span> Arrays.stream(arr);<br><span class="hljs-comment">//      支持泛型</span><br>        Book[] bookArr = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;a&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;b&quot;</span>)&#125;;<br>        Stream&lt;Book&gt; bookStream = Arrays.stream(bookArr);<br></code></pre></td></tr></table></figure></li><li><p>Stream.of() 创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>Stream&lt;Book&gt; bookStream1 = Stream.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>());<br></code></pre></td></tr></table></figure></li><li><p>无限流</p><ul><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//  public static&lt;T&gt; Stream&lt;T&gt; </span><br><span class="hljs-comment">//iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span><br>Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>)<br>    .limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p>生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; S)     </span><br>Stream.generate(Math::random)<br>    .limit(<span class="hljs-number">5</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-中间操作"><a href="#2-中间操作" class="headerlink" title="2. 中间操作"></a>2. 中间操作</h3><ul><li><p><strong>过滤</strong>   <code>filter&lt;P&gt;</code></p><blockquote><p>根据过滤器中的 Predicate 过滤</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span><br>Stream&lt;Book&gt; bookStream = books.stream();<br><span class="hljs-comment">// filter 过滤价格大于50的书📕</span><br>bookStream.filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><strong>截断</strong>   <code>limit(n)</code></p><blockquote><p>截取流中前 n 个数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().limit(<span class="hljs-number">5</span>).forEach(books1::add);<br></code></pre></td></tr></table></figure></li><li><p><strong>跳过</strong>   <code>skip(n)</code></p><blockquote><p>跳过前 n 个数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().skip(<span class="hljs-number">5</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><strong>筛选</strong>   <code>distinct()</code></p><blockquote><p>通过流产生的 hashCode 和 equals 去除重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().distinct().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul><p><strong>Map映射操作</strong></p><ul><li><p><code>map(Function f)</code></p><blockquote><p>接收一个函数作为参数，这个函数会作用到每一个元素上，并映射成为一个新的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将小写字母映射为大写返回</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br>String[] arr = &#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>&#125;;<br><span class="hljs-comment">// 列表</span><br>list.stream().map(String::toUpperCase).forEach(System.out::println);<br><span class="hljs-comment">// 数组</span><br>Arrays.stream(arr).map(String::toUpperCase).forEach(System.out::println);<br></code></pre></td></tr></table></figure><ul><li><p>获取Books中价格大于30的书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream()<br>    .map(Book::getPrice)<br>    .filter(s -&gt; s &gt; <span class="hljs-number">30</span>)<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>flatMap(Function f)</code></p><blockquote><p>接收一个函数作为参数，将流中的每一个值都转换成一个流，最后将所有的流合成一个流</p></blockquote><ul><li><p>将 <code>[[a,a],[b,b],[c,c]] </code>  变成  <code> [a,a,b,b,c,c]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 本类为 StreamA</span><br><span class="hljs-comment">// list = Arrays.asList(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;);</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串转化为流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title function_">strToStream</span><span class="hljs-params">(String str)</span> &#123;<br>   List&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   <span class="hljs-keyword">for</span> (Character c : str.toCharArray()) &#123;<br>       list.add(c);<br>   &#125;<br>   <span class="hljs-keyword">return</span> list.stream();<br>&#125;<br><br><span class="hljs-comment">// 使用普通map 返回值类型为流的集合</span><br>Stream&lt;Stream&lt;Character&gt;&gt; streamStream = <br>    list.stream().map(StreamA::strToStream);<br>    <span class="hljs-comment">// 遍历每个流中的每一个元素</span><br>streamStream.forEach(s -&gt; &#123;<br>   s.forEach(System.out::println);<br>&#125;);<br><br><span class="hljs-comment">//使用flatMap 返回的类型为一个流</span><br>Stream&lt;Character&gt; characterStream = <br>    list.stream().flatMap(StreamA::strToStream);<br><br>characterStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>Sorted排序操作</strong></p><ul><li><p><code>sorted()</code>  自然排序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">65</span>, <span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">99</span>, <span class="hljs-number">23</span>, <span class="hljs-number">11</span>);<br><span class="hljs-comment">// (默认从小到大)</span><br>list.stream().sorted().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><code>sorted(Comparator com)</code>   自定义排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br>books.stream()<br>    .sorted(Comparator.comparingInt(Book::getPrice))<br>    .forEach(System.out::println);<br><span class="hljs-comment">// 加上 - 号 表示改变顺序</span><br>books.stream()<br>    .sorted((b1,b2) -&gt; - Integer.compare(b1.getPrice(), b2.getPrice()))<br>    .forEach(System.out::println);<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-终止操作"><a href="#3-终止操作" class="headerlink" title="3. 终止操作"></a>3. 终止操作</h3><blockquote><p>操作结束后会关闭流</p></blockquote><p><strong>基本常见操作</strong></p><ul><li><p><code>forEach(Consumer con)</code>  将元素遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><code>allMatch(Predicate p)</code>   检查是否匹配所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().allMatch(b -&gt; b.getPrice() &lt; <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>anyMatch(Predicate p)</code>   检查是否至少匹配一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().anyMatch(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>noneMatch(Predicate p)</code> 检查是否 没有匹配的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().noneMatch(b -&gt; b.getName().startsWith(<span class="hljs-string">&quot;a&quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p><code>findFirst()</code>  取流中的第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Book&gt; first = books.stream().findFirst();<br></code></pre></td></tr></table></figure></li><li><p><code>findAny()</code>   取流中的任意一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Book&gt; any = books.parallelStream().findAny();<br></code></pre></td></tr></table></figure></li></ul><p><strong>计数操作</strong></p><ul><li><p><code>count()</code>    返回流中集合个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> books.stream().filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>).count();<br></code></pre></td></tr></table></figure></li><li><p><code>max(Comparator c)</code>   返回流中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Stream&lt;Integer&gt; priceStream = books.stream().map(Book::getPrice);<br>Optional&lt;Integer&gt; max = priceStream.max(Integer::compare);<br></code></pre></td></tr></table></figure></li><li><p><code>min(Comparator c)</code>   返回流中的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Integer&gt; min = books.stream()<br>    .map(Book::getPrice).min(Integer::compareTo);<br></code></pre></td></tr></table></figure></li></ul><p><strong>归约操作</strong></p><blockquote><p>将流中的集合反复结合起来，得到一个值</p></blockquote><ul><li><p><code>reduce(T identity , BinaryOperator bo)</code>  得到一个值，返回 <code>T</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, (i, j) -&gt; i + j);<br><span class="hljs-comment">// 或</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br></code></pre></td></tr></table></figure></li><li><p><code>reduce(BinaryOperator bo)</code>  得到一个值，返回 <code>Optional&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Integer&gt; sumPrice = books.stream()<br>    .map(Book::getPrice).reduce(Integer::sum);<br></code></pre></td></tr></table></figure></li></ul><p><strong>收集操作</strong></p><blockquote><p>将流中的元素转化为其他形式，接收一个Collector接口的实现，用于对流中的对象进行汇总</p></blockquote><ul><li><p><code>collect(Collector c)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; collect = <br>    books.stream()<br>    .filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br>    .collect(Collectors.toList());<br><span class="hljs-comment">// 或</span><br>List&lt;Book&gt; collect2 = <br>    books.stream()<br>    .filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br>    .collect(Collectors.toCollection(ArrayList&lt;Book&gt;::<span class="hljs-keyword">new</span>));<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 常见：</span><br>Collectors.toList() <br>Collectors.toSet() <br>Collectors.toCollection(Supplier s)<br></code></pre></td></tr></table></figure><h2 id="三、Optional-类"><a href="#三、Optional-类" class="headerlink" title="三、Optional 类"></a>三、Optional 类</h2><blockquote><p>用来预防空指针</p><p>就能不用显示进行空指针检测</p></blockquote><h3 id="1-创建实例"><a href="#1-创建实例" class="headerlink" title="1. 创建实例"></a>1. 创建实例</h3><ul><li><p><code>Optional.of(T t)</code>   创建一个 Optional实例 ， t  必须非空</p></li><li><p><code>Optional.empty()</code>  创建一个空的Optional 实例</p></li><li><p><code>Optional.ofNullable(T t)</code>  创建一个 Optional实例 ， t 可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOptional</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-type">Library</span> <span class="hljs-variable">lib</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Library</span>();<br><span class="hljs-comment">// lib = null;</span><br><span class="hljs-comment">// 如 lib = null 会报错 空指针 因为of中的示例不能为空</span><br>   Optional&lt;Library&gt; olib = Optional.of(lib);<br><br><span class="hljs-comment">// empty() 创建一个空的Optional 实例</span><br>   Optional&lt;Object&gt; empty = Optional.empty();<br>   System.out.println(empty);<br><br><span class="hljs-comment">//  ofNullable(T t) 创建一个 Optional实例 ， t可以为空</span><br>    Optional&lt;Library&gt; olib1 = Optional.ofNullable(lib);<br><br>    System.out.println(olib1);<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-获取容器中的对象"><a href="#2-获取容器中的对象" class="headerlink" title="2. 获取容器中的对象"></a>2. 获取容器中的对象</h3><ul><li><code>T get()</code> 调用的容器中有对象，不能为空</li><li><code>T orElse(T other)</code> 如果容器中有对象则返回 ， 没有则返回指定的 other对象</li><li><code>boolean isPresent()</code> 是否包含对象</li></ul><h3 id="3-预防空指针"><a href="#3-预防空指针" class="headerlink" title="3. 预防空指针"></a>3. 预防空指针</h3><p><strong>例 ：获取书名预防空指针异常</strong></p><ul><li><p>在 <code>Optional </code>以前防止空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取书籍名称</span><br><span class="hljs-comment"> * 在Optional以前防止空指针</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">(Library lib)</span>&#123;<br>    <span class="hljs-keyword">if</span> (lib != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">if</span> (lib.getBook() != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">return</span> lib.getBook().getName();<br>    &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Optional </code>防止空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookNameOp</span><span class="hljs-params">(Library lib)</span>&#123;<br><br>    Optional&lt;Library&gt; libo = Optional.ofNullable(lib);<br>    <span class="hljs-comment">// 这里解决 lib == null</span><br>    <span class="hljs-comment">// 如果 lib == null 则返回书名为 AA</span><br>    <span class="hljs-type">Library</span> <span class="hljs-variable">lib1</span> <span class="hljs-operator">=</span> libo.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Library</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;AA&quot;</span>)));<br><br><span class="hljs-comment">//  此时lib1不为空</span><br><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> lib1.getBook();<br><br>    Optional&lt;Book&gt; booko = Optional.ofNullable(book1);<br>    <span class="hljs-comment">// 这里解决 lib.getBook() == null</span><br>    <span class="hljs-comment">// 如果 lib != null 且 lib.book == null 则返回书名为 BB</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> booko.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;BB&quot;</span>));<br><br><span class="hljs-comment">//  此时book不为空</span><br>    <span class="hljs-keyword">return</span> book.getName();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="一、语法与元字符"><a href="#一、语法与元字符" class="headerlink" title="一、语法与元字符"></a>一、语法与元字符</h2><h3 id="1-基本语法与元字符"><a href="#1-基本语法与元字符" class="headerlink" title="1. 基本语法与元字符"></a>1. 基本语法与元字符</h3><ul><li><p>基本语法与元字符</p><p><img src="https://s2.loli.net/2023/11/02/fopEa5KnHdjAe9D.png" alt="yufa1"></p><p><img src="https://s2.loli.net/2023/11/02/3UCb2DxnqPF4hsN.png" alt="yufa2"></p></li><li><p><code>\\s</code>：匹配空白字符</p></li><li><p><code>\\S</code>：与<code>\\s</code>取反，匹配任意非空白字符</p></li><li><p><code>.</code>：匹配除换行符外的所有字符（Java中换行符为 <code>\n</code>）</p></li><li><p><code>(?i)</code> 忽略大小写</p><ul><li><code>a(?i)bc</code> 对bc忽略大小写</li><li><code>a((?i)b)c</code> 对b忽略大小写</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 在Java中 加上Pattern.CASE_INSENSITIVE 也表示忽略大小写</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex , Pattern.CASE_INSENSITIVE);<br></code></pre></td></tr></table></figure><ul><li><p><code>|</code> ：选择匹配符</p><ul><li><code>ab|cd</code>：匹配 <code>ab</code> 或者 <code>cd</code></li></ul></li></ul><h3 id="2-限定符"><a href="#2-限定符" class="headerlink" title="2. 限定符"></a>2. 限定符</h3><blockquote><p>用于指定其之前的字符或组合连续出现的次数</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/AucSWZJjmPVqUI4.png" alt="yufa3"></p><p><img src="https://s2.loli.net/2023/11/02/Oxi9W41HkvMhwCq.png" alt="yufa4"></p><h3 id="3-定位符"><a href="#3-定位符" class="headerlink" title="3. 定位符"></a>3. 定位符</h3><blockquote><p>规定字符在字符串中的位置</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/oB5vE4R7wOiLhaK.png" alt="dw"></p><ul><li><code>\\b</code>：这里边界指一个单词的结尾 若字符串中有空格，则空格作为分隔符分隔单词</li><li><code>\\B</code>：指每个单词的开头或中间</li></ul><h3 id="4-捕获分组"><a href="#4-捕获分组" class="headerlink" title="4. 捕获分组"></a>4. 捕获分组</h3><p><img src="https://s2.loli.net/2023/11/02/vTNwWRPfGpgxFCd.png" alt="fz"></p><ul><li><p><code>(pattern)</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;([0-9]&#123;2&#125;)(\\d)(\\d)&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>(?&lt;name&gt;pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?&lt;g1&gt;[0-9]&#123;2&#125;)(?&lt;g2&gt;\\d)(?&lt;g3&gt;\\d)&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-非捕获分组"><a href="#5-非捕获分组" class="headerlink" title="5.非捕获分组"></a>5.非捕获分组</h3><p><img src="https://s2.loli.net/2023/11/02/c7vGm5Nj9oOACwM.png" alt="fz2"></p><ul><li><p><code>(?:pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack=10 bob=19 tom=10&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?:10)&quot;</span>;<br><span class="hljs-comment">//得到 jack=10 tom=10</span><br></code></pre></td></tr></table></figure></li><li><p><code>(?=pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?=10)&quot;</span>;<br><span class="hljs-comment">//得到 jack= tom=</span><br></code></pre></td></tr></table></figure></li><li><p><code>(?!pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?!10)&quot;</span>;<br><span class="hljs-comment">//得到 bob=</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-反向引用"><a href="#6-反向引用" class="headerlink" title="6.反向引用"></a>6.反向引用</h3><blockquote><p>内部：在正则表达式中引用</p><p>外部：在其他方法中引用</p></blockquote><ul><li><code>\\n</code> 内部反向引用<ul><li>表示正则式中第n组匹配的值</li><li>**n **  表示一个捕获分组，在group中的组序号</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12312-111222333&quot;</span>;<br><span class="hljs-comment">// 匹配如 15237-333444555 的编号</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>$n</code> 外部反向引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern1</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher1</span> <span class="hljs-operator">=</span> pattern1.matcher(s);<br><span class="hljs-comment">// 使用外部反向引用，$1 表示正则式中的第一个分组捕获的值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> matcher1.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-贪婪匹配与懒惰匹配"><a href="#7-贪婪匹配与懒惰匹配" class="headerlink" title="7. 贪婪匹配与懒惰匹配"></a>7. 贪婪匹配与懒惰匹配</h3><blockquote><p>正则表达式中默认为贪婪匹配</p><p>懒惰匹配  -&gt; 尽可能少的匹配</p><p>默认为贪婪匹配  -&gt; 尽可能多的匹配</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/qkhG4mK7vg1B5oC.png" alt="lazzy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;asd123123ds&quot;</span>;<br><span class="hljs-comment">// 默认贪婪匹配</span><br><span class="hljs-comment">// String regex = &quot;\\d+&quot;;</span><br><span class="hljs-comment">// 得到123123</span><br><br><span class="hljs-comment">// 懒惰匹配</span><br><span class="hljs-comment">// tring regex = &quot;\\d+?&quot;;</span><br><span class="hljs-comment">// 得到 1 2 3 1 2 3</span><br><br><span class="hljs-comment">// String regex = &quot;&lt;\\w.+&gt;&quot;;</span><br><span class="hljs-comment">// 得到 &lt;b name=123/&gt;&lt;b name=321/&gt;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;b name=123/&gt;&lt;b name=321/&gt;&quot;</span>;<br><span class="hljs-comment">// 懒惰匹配</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;\\w.+?&gt;&quot;</span>;<br><span class="hljs-comment">// 得到 &lt;b name=123/&gt;和&lt;b name=321/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、Java中常用的三个类"><a href="#三、Java中常用的三个类" class="headerlink" title="三、Java中常用的三个类"></a>三、Java中常用的三个类</h2><h3 id="1-Pattern"><a href="#1-Pattern" class="headerlink" title="1. Pattern"></a>1. Pattern</h3><ul><li><p><code>matches(regex , url)</code> 整体匹配，只能返回Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(regex, url);<br></code></pre></td></tr></table></figure></li><li><p><code>compile(regex)</code> 返回正则表达式对象 能用于生成匹配器对象 传入匹配器的字符串中只要有符合的就能匹配，能输出结果值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<br><br><span class="hljs-keyword">while</span> (matcher.find())&#123;<br>    System.out.println(matcher.group(<span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-Matcher"><a href="#2-Matcher" class="headerlink" title="2. Matcher"></a>2. Matcher</h3><blockquote><p>matcher 是一个匹配对象</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/7H1lKGa4LRvJIiu.png" alt="matcher"></p><p><img src="https://s2.loli.net/2023/11/02/vxWUclC8OnhNA2D.png" alt="matcher2"></p><h3 id="3-String"><a href="#3-String" class="headerlink" title="3. String"></a>3. String</h3><ul><li><p><code>replaceAll(regex , s)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdk1.3dadasdasdjdk1.4asdas3423dfsjdk1.5&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;jdk\\d+\\.\\d+&quot;</span>, <span class="hljs-string">&quot;JDK&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>matches(regex)</code> 整体匹配</p></li><li><p><code>split(regex)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AAA#CCC&amp;AAA~CCC12GGG&quot;</span>;<br><span class="hljs-comment">//用#~&amp;数字分割字符串</span><br>str2.split(<span class="hljs-string">&quot;[#&amp;~]|\\d+&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、实际应用"><a href="#二、实际应用" class="headerlink" title="二、实际应用"></a>二、实际应用</h2><h3 id="1-判断汉字"><a href="#1-判断汉字" class="headerlink" title="1. 判断汉字"></a>1. 判断汉字</h3><blockquote><p>注意汉字的编码范围在    <strong><code>\u0391-\uffe5</code></strong> ，**<code>\u4e00-\u9fa5</code>**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好你好你好&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\u4e00-\u9fa5]+$&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-判断邮编"><a href="#2-判断邮编" class="headerlink" title="2. 判断邮编"></a>2. 判断邮编</h3><blockquote><p>以1开头的六位数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;110203&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="3-判断URL"><a href="#3-判断URL" class="headerlink" title="3. 判断URL"></a>3. 判断URL</h3><p><code>^((http)s?://)?([\\w-]+\\.)+[a-zA-Z0-9]+((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$</code></p><ul><li><p>&#96;&#96;^((http)s?:&#x2F;&#x2F;)?&#96;</p><ul><li>s 可有可无</li><li>https:&#x2F;&#x2F; 可有可无</li></ul></li><li><p><code>([\\w-]+\\.)+</code> </p><ul><li>可能存在多级域名<ul><li>abc.dc.aaa.com.cn</li></ul></li></ul></li><li><p><code>[a-zA-Z0-9]+</code> </p><ul><li>域名结尾</li></ul></li><li><p><code>((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$</code></p><ul><li><p><code>(/[\\w-#]+)+</code></p><ul><li>可能存在所层路径<ul><li>&#x2F;video&#x2F;aa&#x2F;bb</li></ul></li></ul></li><li><p><code>\\?</code> </p><ul><li>路径结尾带有参数</li></ul></li><li><p><code>([\\w-]+=[\\w-]+&amp;?)*</code></p><ul><li><code>[\\w-]+</code> 参数名由这些字符组成</li><li><code>=</code> 名与值之间用 &#x3D; 相连</li><li><code>[\\w-]+</code> 参数值由这些字符组成</li><li><code>&amp;?</code> 每对参数之间用 &amp; 相连，若只有一对参数则无需&amp;</li><li><code>*</code> 参数可能有一对或多对</li></ul></li><li><p><code>?$</code> 整个域名后的路径或值都可有可无 并都已存在的元素作为整个URL结尾</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断URL是否合法</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isUrl</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.bilibili.com&quot;</span> +<br>            <span class="hljs-string">&quot;/video/BV1Eq4y1E79W?p=17&amp;spm_id_from=pageDriver&quot;</span> +<br>            <span class="hljs-string">&quot;&amp;vd_source=1515d4ece87146a640eebb6175354668&quot;</span>;<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^((http)s?://)?([\\w-]+\\.)+[a-zA-Z0-9]+((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$&quot;</span>;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(regex, url);<br>    <span class="hljs-keyword">if</span> (isMatch) &#123;<br>        System.out.println(<span class="hljs-string">&quot;符合！&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不符合！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-结巴问题"><a href="#4-结巴问题" class="headerlink" title="4. 结巴问题"></a>4. 结巴问题</h3><blockquote><p>将 ‘’我我我….要要….吃吃吃吃..饭‘’ 变成 ”我要吃饭“</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spla</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我我....要要....吃吃吃吃..饭&quot;</span>;<br>    <br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;\\.&quot;</span>);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<br><span class="hljs-comment">//    将所有 . 替换成 空白</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> matcher.replaceAll(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern1</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher1</span> <span class="hljs-operator">=</span> pattern1.matcher(s);<br><span class="hljs-comment">//    使用外部反向引用，$1 表示正则式中的第一个分组捕获的值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> matcher1.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br>    System.out.println(res);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-验证数字规范性"><a href="#5-验证数字规范性" class="headerlink" title="5. 验证数字规范性"></a>5. 验证数字规范性</h3><blockquote><p>识别整数 ， 小数，负数等</p></blockquote><ul><li><code>^[-+]?([1-9]\\d*|0)(\\.\\d+)?$</code><ul><li><code>[-+]?</code><ul><li>数字符号不一定存在</li></ul></li><li><code>([1-9\\d*|0])</code><ul><li>数字以 1 开头 </li><li>或以 0 开头的小数且只能由一个 0</li></ul></li><li><code>(\\.\\d+)?</code><ul><li>数字的小数部分不一定存在</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
