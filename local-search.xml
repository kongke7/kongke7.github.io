<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/2023/12/11/SpringCloud/"/>
    <url>/2023/12/11/SpringCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="一、微服务介绍"><a href="#一、微服务介绍" class="headerlink" title="一、微服务介绍"></a>一、微服务介绍</h2><h3 id="1-什么是微服务"><a href="#1-什么是微服务" class="headerlink" title="1. 什么是微服务"></a>1. <strong>什么是微服务</strong></h3><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治</li></ul><h3 id="2-技术架构"><a href="#2-技术架构" class="headerlink" title="2. 技术架构"></a>2. <strong>技术架构</strong></h3><blockquote><p><strong>SpringCloud&#x3D;分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</strong></p></blockquote><p><img src="/img/springcloud/one" alt="sp"></p><ul><li><strong>服务调用 、服务降级、服务注册与发先、服务熔断、负载均衡、服务消息队列、服务网关</strong></li><li><strong>配置中心管理、自动化构建部署、服务监控、全链路追踪、服务定时任务、调度操作</strong></li></ul><h3 id="3-相关技术栈"><a href="#3-相关技术栈" class="headerlink" title="3. 相关技术栈"></a>3. <strong>相关技术栈</strong></h3><p><img src="https://s2.loli.net/2023/11/02/iTdp3XvHRWlGSgj.png" alt="jsz"></p><p><img src="https://s2.loli.net/2023/11/02/fMnNkGVXWCaxqcD.png" alt="jsz2"></p><h3 id="4-版本选择"><a href="#4-版本选择" class="headerlink" title="4. 版本选择"></a>4. <strong>版本选择</strong></h3><ul><li><strong><a href="https://start.spring.io/actuator/info">官方匹配查询</a></strong></li><li><strong><a href="https://spring.io/projects/spring-cloud">官网</a></strong></li></ul><h2 id="二、服务注册与发现"><a href="#二、服务注册与发现" class="headerlink" title="二、服务注册与发现"></a>二、服务注册与发现</h2><h3 id="1-CAP理论"><a href="#1-CAP理论" class="headerlink" title="1. CAP理论"></a>1. CAP理论</h3><h4 id="1-CAP"><a href="#1-CAP" class="headerlink" title="1) CAP"></a>1) CAP</h4><p><img src="https://s2.loli.net/2023/11/02/hNo95wxpbCmUtrB.png" alt="cap"></p><p><strong>C：Consistency (强一致性)</strong></p><p><strong>A：Availability (可用性)</strong></p><p><strong>P：Partition tolerance （分区容错性)</strong></p><blockquote><p>最多只能同时较好的满足两个</p></blockquote><p><strong>CAP理论的核心</strong></p><blockquote><p>一个分布式系统不可能同时很好的满足<strong>一致性</strong>，<strong>可用性</strong>和<strong>分区容错性</strong>这三个需求。</p></blockquote><blockquote><p>因此，根据CAP原理将其分成了满足CA原则、满足CP原则和满足AP原则三大类</p></blockquote><ul><li><strong>CA</strong> - 单点集群，满足—致性，可用性的系统，通常在可扩展性上不太强大。</li><li><strong>CP</strong> - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li><li><strong>AP</strong> - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><h4 id="2-AP架构"><a href="#2-AP架构" class="headerlink" title="2) AP架构"></a>2) AP架构</h4><p><strong>Eureka</strong></p><p><img src="https://s2.loli.net/2023/11/02/jnbge6NWMxSmG97.png" alt="ap"></p><p>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。</p><p><strong>结论：</strong>违背了一致性C的要求，只满足可用性和分区容错，即AP</p><h4 id="3-CP架构"><a href="#3-CP架构" class="headerlink" title="3) CP架构"></a>3) CP架构</h4><p><strong>ZooKeeper&#x2F;Consul</strong></p><p><img src="https://s2.loli.net/2023/11/02/TVDpvlzOIKXGZ93.png" alt="cp"></p><p>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性。</p><p><strong>结论：</strong>违背了可用性A的要求，只满足一致性和分区容错，即CP。</p><p><strong>CP 与 AP 对立的矛盾关系。</strong></p><h4 id="4-三个注册中心异同点"><a href="#4-三个注册中心异同点" class="headerlink" title="4) 三个注册中心异同点"></a>4) 三个注册中心异同点</h4><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口 &#x2F; Spring Cloud集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP&#x2F;DNS</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>支持客户端</td><td>已集成</td></tr></tbody></table><h3 id="2-Eureka"><a href="#2-Eureka" class="headerlink" title="2. Eureka"></a>2. Eureka</h3><p><strong>Eureka</strong></p><p><img src="https://s2.loli.net/2023/11/02/mg6czilGsZ3BYtr.png" alt="erka"></p><h4 id="1-Eureka的两个组件"><a href="#1-Eureka的两个组件" class="headerlink" title="1) Eureka的两个组件"></a>1) <strong>Eureka的两个组件</strong></h4><p><strong>Eureka Server 和 Eureka Client</strong></p><ul><li><p><strong>Eureka Server</strong>提供服务注册服务</p><p>各个微服务节点通过配置启动后，会在Eureka Server中进行注册，</p><p>这样Eureka Server中的服务注册表中，将会存储所有可用服务节点的信息，</p><p>服务节点的信息可以在界面中直观看到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br><span class="hljs-comment">#    关闭自我保护机制</span><br><span class="hljs-comment">#    enable-self-preservation: false</span><br><span class="hljs-comment">#    设置定期清理过期服务的间隔时间</span><br><span class="hljs-comment">#    eviction-interval-timer-in-ms: 2000</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span><br>  <span class="hljs-attr">client:</span><br><span class="hljs-comment">#    表示不向注册中心注册自己</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#    表示自己就是注册中心，不需要检索自己的服务</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#    设置与eureka交互的地址</span><br>    <span class="hljs-attr">service-url:</span><br><span class="hljs-comment">#      集群</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span><br></code></pre></td></tr></table></figure><p><strong>主类添加注解激活</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaMain7001</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaMain7001.class , args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Eureka Client</strong>通过注册中心进行访问</p><p>它是一个Java客户端，用于简化Eureka Server的交互，</p><p>客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。</p><p>在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。</p><p>如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，</p><p>Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span><br><span class="hljs-comment">#    访问路径显示ip</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#    向服务端发送心跳的时间间隔，单位为秒（默认是30秒）</span><br><span class="hljs-comment">#    lease-renewal-interval-in-seconds: 1</span><br><span class="hljs-comment">#    表示服务的存活时间，单位为秒（默认是90秒）超时未收到心跳则剔除服务</span><br><span class="hljs-comment">#    lease-expiration-duration-in-seconds: 2</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#    表示是否向注册中心查询自己的注册信息，默认为true，单点可以不配，集群必须配置为配合Ribbon实现负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br><span class="hljs-comment">#      集群</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka,http://eureka7001.com:7001/eureka</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-集群与负载均衡"><a href="#2-集群与负载均衡" class="headerlink" title="2) 集群与负载均衡"></a>2) 集群与负载均衡</h4><p><strong>注：集群环境时修改主机ip映射便于区分</strong></p><ul><li>找到   <code>C:\Windows\System32\drivers\etc</code>   路径下的   <code>hosts</code>  文件，修改映射配置添加进hosts文件</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> eureka7001.com<br><span class="hljs-number">127.0.0.1</span> eureka7002.com<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><ul><li><p><strong>server</strong></p><blockquote><p>多台eureka相互注册</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br><span class="hljs-comment">#      集群</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span><br></code></pre></td></tr></table></figure></li><li><p><strong>client</strong></p><blockquote><p>将服务注册到每一台eureka中</p><p>并且相同的服务，同一服务名不同id</p></blockquote><p><strong>cloud-payment-service</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span><br><span class="hljs-comment">#    访问路径显示ip</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#   表示是否向注册中心查询自己的注册信息，默认为true，单点可以不配，集群必须配置为配合Ribbon实现负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br><span class="hljs-comment">#     集群</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka,http://eureka7001.com:7001/eureka</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8002</span><br><span class="hljs-comment">#    访问路径显示ip</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br><span class="hljs-comment">#      集群</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka,http://eureka7001.com:7001/eureka</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>开启负载均衡</strong></p><ul><li><p><strong>RestTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><span class="hljs-comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span><br><span class="hljs-comment">//    修改为服务名，开启集群访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PAYMENT_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-自我保护"><a href="#3-自我保护" class="headerlink" title="3) 自我保护"></a>3) 自我保护</h4><blockquote><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。</p><p>一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，</p><p>不再删除服务注册表中的数据，也就是不会注销任何微服务。</p></blockquote><ol><li><p>某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p></li><li><p>属于CAP里面的AP分支。</p></li><li><p>自我保护机制∶默认情况下Eureka Client定时向Eureka Server端发送心跳包</p></li></ol><p><strong>关闭自我保护</strong></p><ul><li><p><strong>server</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br><span class="hljs-comment">#    关闭自我保护机制</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#    设置定期清理过期服务的间隔时间</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure></li><li><p><strong>client</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br><span class="hljs-comment">#    向服务端发送心跳的时间间隔，单位为秒（默认是30秒）</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">1</span><br><span class="hljs-comment">#    表示服务的存活时间，单位为秒（默认是90秒）超时未收到心跳则剔除服务</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-服务发现"><a href="#4-服务发现" class="headerlink" title="4) 服务发现"></a>4) 服务发现</h4><p><strong>DiscoveryClient</strong></p><blockquote><p>开启服务发现，可获取eureka服务器上的所有的已注册服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 引入spring的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/discovery&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">aboutMe</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        获取注册中心已注册的服务</span><br>        List&lt;String&gt; list = discoveryClient.getServices();<br>        List&lt;List&lt;ServiceInstance&gt;&gt; res =<br>                list.stream().map(serverName -&gt; discoveryClient.getInstances(serverName))<br>                        .collect(Collectors.toList());<br><br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;成功&quot;</span>,res);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-Zookeeper"><a href="#3-Zookeeper" class="headerlink" title="3. Zookeeper"></a>3. Zookeeper</h3><blockquote><p>zookeeper是临时节点，属于CAP中的CP分支</p></blockquote><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1) 配置"></a>1) 配置</h4><p><strong>pom</strong></p><blockquote><p>注意版本问题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><br><br><span class="hljs-comment">#服务别名----注册zookeeper到注册中心名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-payment</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">zookeeper:</span><br>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:2181</span><br><br></code></pre></td></tr></table></figure><p><strong>zookeeper客户端</strong></p><blockquote><p>注册成功则在services中出现服务名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zk: localhost:2181(CONNECTED) 0] <span class="hljs-built_in">ls</span> /<br>[services, zookeeper]<br>[zk: localhost:2181(CONNECTED) 1] <span class="hljs-built_in">ls</span> /services/cloud-provider-payment<br>[a4567f50-6ad9-47a3-9fbb-7391f41a9f3d]<br>[zk: localhost:2181(CONNECTED) 2] get /services/cloud-provider-payment/a4567f50-6ad9-47a3-9fbb-7391f41a9f3d<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;cloud-provider-payment&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;a4567f50-6ad9-47a3-9fbb-7391f41a9f3d&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;192.168.199.218&quot;</span>,<span class="hljs-string">&quot;port&quot;</span>:8004,<span class="hljs-string">&quot;ss</span><br><span class="hljs-string">lPort&quot;</span>:null,<span class="hljs-string">&quot;payload&quot;</span>:&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;application-1&quot;</span>,<span class="hljs-string">&quot;</span><br><span class="hljs-string">name&quot;</span>:<span class="hljs-string">&quot;cloud-provider-payment&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:&#123;&#125;&#125;,<span class="hljs-string">&quot;registrationTimeUTC&quot;</span>:1612811116918,<span class="hljs-string">&quot;serviceType&quot;</span>:<span class="hljs-string">&quot;DYNAMIC&quot;</span>,<span class="hljs-string">&quot;uriSpec&quot;</span>:&#123;<span class="hljs-string">&quot;pa</span><br><span class="hljs-string">rts&quot;</span>:[&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;scheme&quot;</span>,<span class="hljs-string">&quot;variable&quot;</span>:<span class="hljs-literal">true</span>&#125;,&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;://&quot;</span>,<span class="hljs-string">&quot;variable&quot;</span>:<span class="hljs-literal">false</span>&#125;,&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;variable&quot;</span>:<span class="hljs-literal">true</span>&#125;,&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;</span><br><span class="hljs-string">:&quot;</span>,<span class="hljs-string">&quot;variable&quot;</span>:<span class="hljs-literal">false</span>&#125;,&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;variable&quot;</span>:<span class="hljs-literal">true</span>&#125;]&#125;&#125;<br>[zk: localhost:2181(CONNECTED) 3]<br><br></code></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderZkController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INVOKE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://cloud-provider-payment&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-Consul"><a href="#4-Consul" class="headerlink" title="4. Consul"></a>4. Consul</h3><blockquote><p>Consul是一套开源的分布式服务发现和配置管理系统，由HashiCorp 公司用Go语言开发。</p></blockquote><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1) 启动"></a>1) 启动</h4><p><strong>官网下载后启动exe文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 开发者模式启动<br>consul agent -dev<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/xX185E3wjOrQpql.png" alt="consul"></p><p><strong>访问8500端口进入可视化界面</strong></p><p><img src="https://s2.loli.net/2023/11/02/NjVenXyGA1JkzwQ.png" alt="consul2"></p><h4 id="1-配置-1"><a href="#1-配置-1" class="headerlink" title="1) 配置"></a>1) 配置</h4><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">###consul服务端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8006</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consul-provider-payment</span><br><span class="hljs-comment">####consul注册中心地址</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">consul:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConsulController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INVOKE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://consul-provider-payment&quot;</span>;<br><br></code></pre></td></tr></table></figure><p><strong>配置成功则可在可视化面板看到服务信息</strong></p><p><img src="https://s2.loli.net/2023/11/02/kDIzsBbpEldQ157.png" alt="consul3"></p><h2 id="三、服务调用"><a href="#三、服务调用" class="headerlink" title="三、服务调用"></a>三、服务调用</h2><h3 id="1-Ribbon"><a href="#1-Ribbon" class="headerlink" title="1. Ribbon"></a>1. <del>Ribbon</del></h3><blockquote><p>已淘汰</p></blockquote><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong>。</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p><strong>Load Balance</strong></p><blockquote><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用)。</p><p>常见的负载均衡有软件Nginx，LVS，硬件F5等。</p></blockquote><p><strong>集中式LB</strong></p><p>即在服务的消费方和提供方之间<strong>使用独立的LB设施</strong>(可以是硬件，如F5, 也可以是软件，如nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方;</p><p><strong>进程内LB</strong></p><p>将LB逻辑<strong>集成到消费方</strong>，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p><strong>Ribbon就属于进程内LB</strong></p><h4 id="Ribbon默认自带的负载规则"><a href="#Ribbon默认自带的负载规则" class="headerlink" title="Ribbon默认自带的负载规则"></a>Ribbon默认自带的负载规则</h4><p><img src="https://s2.loli.net/2023/11/02/TvzRFHcI9KDjg3t.png" alt="ribbon"></p><h3 id="2-Open-Feign"><a href="#2-Open-Feign" class="headerlink" title="2. Open Feign"></a>2. Open Feign</h3><blockquote><p><strong>Feign</strong>是一个<strong>声明式WebService客户端</strong></p><p><strong>Feign</strong>集成了<strong>Ribbon</strong></p><p><strong>OpenFeign</strong>是Spring Cloud在Feign的基础上<strong>支持了SpringMVC的注解</strong></p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>启动类上激活</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderFeignMain80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderFeignMain80.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@FeignClient(&quot;CLOUD-PAYMENT-SERVICE&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentFeignService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span><br>    Result&lt;Payment&gt; <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span><br>    String <span class="hljs-title function_">paymentFeignTimeout</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="日志增强"><a href="#日志增强" class="headerlink" title="日志增强"></a>日志增强</h4><p><strong>日志级别</strong></p><ul><li><strong>NONE</strong>：默认的，不显示任何日志;</li><li><strong>BASIC</strong>：仅记录请求方法、URL、响应状态码及执行时间;</li><li><strong>HEADERS</strong>：包含BASIC，还有请求和响应的头信息;</li><li><strong>FULL</strong>：包含HEADERS，还有请求和响应的正文及元数据。</li></ul><p><strong>配置日志Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br><span class="hljs-comment">#    配置feign日志的级别以及监控的接口</span><br>    <span class="hljs-attr">com.kongke.springcloud.service.PaymentFeignService:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="四、服务控制"><a href="#四、服务控制" class="headerlink" title="四、服务控制"></a>四、服务控制</h2><h3 id="1-Hystrix"><a href="#1-Hystrix" class="headerlink" title="1. Hystrix"></a>1. <del>Hystrix</del></h3><blockquote><p>已淘汰</p></blockquote><p>Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库，</p><p>在分布式系统里，许多依赖不可避免的会调用失败，</p><p>比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，</p><p><strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p><strong>哪些情况会出发降级</strong></p><ul><li>程序运行导常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池&#x2F;信号量打满也会导致服务降级</li></ul><h4 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h4><blockquote><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p></blockquote><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><blockquote><p><strong>类比保险丝</strong>达到最大服务访问后，直接拒绝访问，然后调用服务降级的方法</p></blockquote><p><strong>熔断机制</strong></p><p>是应对雪崩效应的一种微服务<strong>链路保护机制</strong>。</p><p>当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，</p><p>进而熔断该节点微服务的调用，快速返回错误的响应信息。</p><p><strong>当检测到该节点微服务调用响应正常后，恢复调用链路</strong>。</p><p><img src="https://s2.loli.net/2023/11/02/itsTqpYybPM4Fxv.png" alt="rd"></p><p><strong>熔断类型</strong></p><ul><li><p><strong>熔断打开</strong>：</p><blockquote><p> 请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，</p><p> 当打开时长达到所设时钟则进入半熔断状态。</p></blockquote></li><li><p><strong>熔断关闭</strong>：</p><blockquote><p> 熔断关闭不会对服务进行熔断。</p></blockquote></li><li><p><strong>熔断半开</strong>：</p><blockquote><p> 部分请求根据规则调用当前服务，</p><p> 如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p></blockquote></li></ul><p><strong>涉及到断路器的三个重要参数</strong>：</p><ul><li><p><strong>快照时间窗</strong>：<code>circuitBreaker.sleepWindowInMilliseconds</code></p><p>断路器确定是否打开需要统计一些请求和错误数据，</p><p>而统计的时间范围就是快照时间窗，默认为最近的10秒。</p></li><li><p><strong>请求总数阀值</strong>：<code>circuitBreaker.requestVolumeThreshold</code></p><p>在快照时间窗内，必须满足请求总数阀值才有资格熔断。</p><p>默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次7,</p><p>即使所有的请求都超时或其他原因失败，断路器都不会打开。</p></li><li><p><strong>错误百分比阀值</strong>：<code>circuitBreaker.errorThresholdPercentage</code></p><p>当请求总数在快照时间窗内超过了阀值，</p><p>比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，</p><p>也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p></li></ul><p><strong>流程</strong></p><ul><li><strong>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</strong></li></ul><h2 id="五、服务网关"><a href="#五、服务网关" class="headerlink" title="五、服务网关"></a>五、服务网关</h2><p><img src="https://s2.loli.net/2023/11/02/vcdVyn71JpTi6f4.png" alt="wg"></p><p><img src="https://s2.loli.net/2023/11/02/plM4WnkfLw5qzF8.png" alt="wg2"></p><h3 id="1-Gateway"><a href="#1-Gateway" class="headerlink" title="1. Gateway"></a>1. Gateway</h3><blockquote><p>SpringCloud Gateway是基于<strong>WebFlux</strong>框架实现的，</p><p>WebFlux是一个典型<strong>非阻塞异步</strong>的框架</p><p>WebFlux框架底层则使用了高性能的<strong>Reactor模式通信框架Netty</strong>。</p></blockquote><p><strong>Spring Cloud Gateway的目标</strong></p><p>提供统一的路由方式且基于 <strong>Filter 链</strong>的方式提供了网关基本的功能，</p><p>例如:安全，监控&#x2F;指标，和限流。</p><h4 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a><strong>三大核心概念</strong></h4><ul><li><p><strong>Route(路由)</strong></p><p>路由是构建网关的基本模块</p><p><strong>它由ID,目标URI,一系列的断言和过滤器组成</strong>,如断言为true则匹配该路由</p></li><li><p><strong>Predicate(断言)</strong></p><p>参考的是Java8的java.util.function.Predicate，</p><p>开发人员可以<strong>匹配HTTP请求中的所有内容</strong>(例如请求头或请求参数),</p><p>如果请求与断言相匹配则进行路由</p></li><li><p><strong>Filter(过滤)</strong> </p><p>指的是Spring框架中GatewayFilter的实例,使用过滤器,</p><p><strong>可以在请求被路由前或者之后对请求进行修改</strong></p></li></ul><p><strong>工作流程</strong></p><p><img src="https://s2.loli.net/2023/11/02/fIlB6A8pGYObL3e.png" alt="gzlc"></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--gateway--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- gateway 包与一下包冲突 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yml</strong></p><blockquote><p>其中包含Gateway的路由配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-comment">#############################新增网关配置###########################</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启从注册中心动态注册路由</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    </span><br><span class="hljs-comment">#          uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <br><span class="hljs-comment">#          uri: http://localhost:8001         </span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <br><span class="hljs-comment">#            - After=2023-10-30T20:23:58.940+08:00[Asia/Shanghai]</span><br><span class="hljs-comment">#            - Cookie=username,aabb</span><br><span class="hljs-comment">####################################################################</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka</span><br><br></code></pre></td></tr></table></figure><h4 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h4><p><strong>Bean方式配置路由</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">CustomRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> &#123;<br><br>        RouteLocatorBuilder.<span class="hljs-type">Builder</span> <span class="hljs-variable">routes</span> <span class="hljs-operator">=</span> builder.routes();<br>        routes.route(<span class="hljs-string">&quot;path_route_runoob&quot;</span>,<br>                <span class="hljs-comment">// 当访问网关的改路径时     </span><br>                r -&gt; r.path(<span class="hljs-string">&quot;/runoob&quot;</span>)<br>                         <span class="hljs-comment">// Gateway会将其转发到已下路径 </span><br>                        .uri(<span class="hljs-string">&quot;https://www.runoob.com&quot;</span>)).build();<br><br>        <span class="hljs-keyword">return</span> routes.build();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>配置动态路由</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">routes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    </span><br>         <span class="hljs-comment">#uri: http://localhost:8001          </span><br>         <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#以服务名作为路由地址</span><br></code></pre></td></tr></table></figure><h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h4><p><strong>示例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">after_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">predicates:</span><br>          <span class="hljs-comment"># 这个时间后才能起效</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span><br>          <span class="hljs-comment"># 需带有以下的值</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">Cookie=username,aabb</span><br></code></pre></td></tr></table></figure><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p><strong>自定义过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogGatewayFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br><br>    <span class="hljs-comment">// 自定义条件</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;=========come to MLGF &quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> exchange.getRequest()<br>            .getQueryParams().getFirst(<span class="hljs-string">&quot;uname&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (uname == <span class="hljs-literal">null</span>)&#123;<br>            log.info(<span class="hljs-string">&quot;=========非法用户&quot;</span>);<br>            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);<br>            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">// 优先级</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、配置中心"><a href="#六、配置中心" class="headerlink" title="六、配置中心"></a>六、配置中心</h2><p><strong>分布式系统面临的配置问题</strong></p><blockquote><p>微服务意味着要将单体应用中的业务拆分成一子服务，每个服务的粒度相对较小，</p><p>系统中会出现大量的服务,由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p></blockquote><ul><li>SpringCloud提供了ConfigServer来解决这个问题</li></ul><h3 id="1-SpringCloud-Config"><a href="#1-SpringCloud-Config" class="headerlink" title="1. SpringCloud Config"></a>1. SpringCloud Config</h3><blockquote><p>SpringCloud Config为微服务架构中的微服务提供<strong>集中化</strong>的外部配置支持，</p><p>配置服务器为各个不同微服务应用的所有环境提供了一个中心化的<strong>外部配置</strong>。</p></blockquote><p><img src="https://s2.loli.net/2023/11/03/uxAc4VyNi1wIkQP.png" alt="config"></p><p><strong>分为服务端和客户端</strong></p><ul><li><p>服务端</p><p>也称为分布式配置中心，是一个独立的微服务应用，用来连接配置服务器</p><p>并为客户端<strong>提供获取</strong>配置信息，加密&#x2F;解密信息等访问接口。</p></li><li><p>客户端</p><p>是通过指定的配置中心来<strong>管理</strong>应用资源，以及与业务相关的配置内容，并在启动时从配置中心获取配置信息,</p><p>配置服务器默认采用git来存储配置信息，这样有助于对环境配置进行版本管理，且可以通过git客户端工具来管理和访问配置内容。</p></li></ul><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注&#x3D;&#x3D;：客户端还需要引入以下包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--     2020以上版本，需引入该包，才能正确引导bootstrap配置加载   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong>  （总中心）application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">git@gitee.com:kongke7/springcloud-config.git</span> <span class="hljs-comment"># Gitee上面的git仓库名字</span><br>          <span class="hljs-comment"># 搜索目录</span><br>          <span class="hljs-attr">search-paths:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span><br>          <span class="hljs-comment"># 读取分支</span><br>          <span class="hljs-attr">default-label:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注&#x3D;&#x3D;：</p><ul><li><p>applicaiton.yml是用户级的资源配置项</p></li><li><p>bootstrap.yml是系统级的，<strong>优先级更高</strong></p></li></ul><blockquote><p>Spring Cloud会创建一个Bootstrap Context，作为Spring应用的Application Context的父上下文。</p><p>初始化的时候，BootstrapContext从<strong>外部源</strong>加载配置属性并解析配置。这两个上下文共享一个从<strong>外部获取</strong>的Environment。</p><p>Bootstrap属性有高优先级，默认情况下，<strong>它们不会被本地配置覆盖。</strong></p><p>Bootstrap context和Application Context有着不同的约定，</p><p>所以新增了一个bootstrap.yml文件，保证Bootstrap Context和Application Context配置的分离。</p></blockquote><p>要将Client模块下的application.yml文件改为bootstrap.yml, 这是很关键的，</p><p>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml。</p><p><strong>YML</strong>（客户端）bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称 -&gt; http://config3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">service-id:</span> <span class="hljs-string">cloud-config-center</span><br></code></pre></td></tr></table></figure><p><strong>激活</strong>（总中心）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplicationCenter3344</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplicationCenter3344.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">// 动态刷新</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String configInfo;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/configInfo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>读取规则</strong></p><ul><li><p>&#x2F;{label}&#x2F;{application}-{profile}.yml（推荐）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">localhost:</span><span class="hljs-number">3344</span><span class="hljs-keyword">/master/</span>config-dev.yml<br></code></pre></td></tr></table></figure></li></ul><h4 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h4><blockquote><p>避免每次更新配置都要重启客户端</p></blockquote><p><strong>手动</strong></p><hr><p><strong>POM</strong></p><blockquote><p>引入actuator监控</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong></p><blockquote><p>添加暴露监控端口配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p><strong>业务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RefreshScope</span><span class="hljs-comment">//&lt;----- </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>刷新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST <span class="hljs-string">&quot;http://localhost:3355/actuator/refresh&quot;</span><br></code></pre></td></tr></table></figure><p><strong>自动</strong></p><blockquote><p>SpringCloud Bus配合SpringCloud Config使用可以实现配置的动态刷新。</p></blockquote><h2 id="七、消息控制"><a href="#七、消息控制" class="headerlink" title="七、消息控制"></a>七、消息控制</h2><p><strong>消息总线</strong></p><blockquote><p>在微服务架构的系统中，通常会使用<strong>轻量级的消息代理</strong>来构建一个<strong>共用的</strong>消息主题,</p><p>由于该主题中产生的消息会被所有实例监听和消费，所以称它为<strong>消息总线</strong>。</p><p>在总线上的各个实例，都可以<strong>广播</strong>一些需要让其在该主题上的实例都知道的消息。</p></blockquote><p><strong>基本原理</strong></p><p>ConfigClient实例都监听MQ中同一个topic(默认是Spring Cloud Bus)。</p><p>当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听<strong>同一Topic</strong>的服务就能得到通知，然后去更新自身的配置。</p><h3 id="1-SpringCloud-Bus"><a href="#1-SpringCloud-Bus" class="headerlink" title="1. SpringCloud Bus"></a>1. SpringCloud Bus</h3><blockquote><p>Spring Cloud Bus是用来将分布式系统的<strong>节点</strong>与<strong>轻量级消息系统</strong>链接起来的框架</p><p>它整合了Java的事件处理机制和消息中间件的功能。</p><p>Spring Clud Bus目前支持RabbitMQ和Kafka。</p></blockquote><p><strong>作用</strong></p><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，</p><p>可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><ol><li>通知节点更新全局</li></ol><p><img src="https://s2.loli.net/2023/11/03/nTA3ogz57ivBKjs.png" alt="bus1"></p><ol start="2"><li>通知总中心更新全局</li></ol><p><img src="https://s2.loli.net/2023/11/03/bXx3KC6d1yFmUZR.png" alt="bus"></p><h4 id="Bus配合RabbitMQ"><a href="#Bus配合RabbitMQ" class="headerlink" title="Bus配合RabbitMQ"></a>Bus配合RabbitMQ</h4><p><strong>POM</strong>（客户端 + 总中心）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong>（客户端 + 总中心）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><p><strong>动态全局广播</strong></p><blockquote><p>更新总中心,使全局更新</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST <span class="hljs-string">&quot;http://localhost:3344/actuator/busrefresh&quot;</span><br></code></pre></td></tr></table></figure><p><strong>定点通知</strong></p><blockquote><p>指定具体某一个实例生效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:3344/actuator/busrefresh/&#123;destination&#125;<br><br>curl -X POST <span class="hljs-string">&quot;http://localhost:3344/actuator/busrefresh/config-client:3355</span><br></code></pre></td></tr></table></figure><h3 id="2-SpringCloud-Stream"><a href="#2-SpringCloud-Stream" class="headerlink" title="2. SpringCloud Stream"></a>2. SpringCloud Stream</h3><blockquote><p>Spring Cloud Stream是一个构建消息驱动微服务的框架。</p><p>应用程序通过 inputs 或者 outputs 来与Spring Cloud Stream中binder对象交互。</p><p>通过我们配置来binding(绑定)，而Spring Cloud Stream 的binder对象负责与消息中间件交互。</p><p>通过使用Spring Integration来<strong>连接消息代理中间件</strong>以实现消息事件驱动。</p></blockquote><p>Spring Cloud Stream为一些消息中间件提供了个性化的自动化配置实现</p><ul><li><p>引用发布-订阅、消费组、分区的三个核心概念。</p></li><li><p>目前仅支持RabbitMQ、 Kafka。</p></li></ul><p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>Binder</strong>：</p><ul><li>INPUT对应于消费者</li><li>OUTPUT对应于生产者</li></ul><p><img src="https://s2.loli.net/2023/11/03/RNZiYe7K8Wqj9ha.png" alt="stream"></p><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p><strong>YML</strong>（生产者）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-comment"># 配置要绑定的rabbitmq的服务信息</span><br>      <span class="hljs-attr">binders:</span><br>        <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span><br>        <span class="hljs-attr">defaultRabbit:</span><br>          <span class="hljs-comment"># 消息组件类型</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span><br>          <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span><br>          <span class="hljs-attr">environment:</span><br>            <span class="hljs-attr">spring:</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>      <span class="hljs-comment"># 服务的整合处理</span><br>      <span class="hljs-attr">bindings:</span><br>        <span class="hljs-comment"># 新版本固定格式  channel名字-&#123;out/in&#125;-&#123;index&#125;</span><br>        <span class="hljs-attr">studyExchange-out-0:</span><br>          <span class="hljs-comment"># 表示要使用的Exchange名称定义</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span><br>          <span class="hljs-comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span><br>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong>（消费者）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 服务的整合处理</span><br><span class="hljs-attr">bindings:</span><br>  <span class="hljs-comment"># 新版本固定格式  channel名字-&#123;out/in&#125;-&#123;index&#125;</span><br>  <span class="hljs-attr">studyExchange-in-0:</span><br>    <span class="hljs-comment"># 表示要使用的Exchange名称定义</span><br>    <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span><br>    <span class="hljs-comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span><br>    <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span><br>    <span class="hljs-comment"># 消息组</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">AAA</span><br></code></pre></td></tr></table></figure><p><strong>业务类</strong>（生产者）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageProviderImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessageProvider</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StreamBridge streamBridge;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">UUID</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID();<br>        streamBridge.send(<span class="hljs-string">&quot;studyExchange-out-0&quot;</span>, MessageBuilder.withPayload(uuid).build());<br>        <span class="hljs-keyword">return</span> uuid.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务类</strong>（消费者）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serPort;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Consumer&lt;String&gt; <span class="hljs-title function_">studyExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> msg -&gt; System.out.println(msg + <span class="hljs-string">&quot; | &quot;</span> + serPort );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重复消费和持久化"><a href="#重复消费和持久化" class="headerlink" title="重复消费和持久化"></a>重复消费和持久化</h4><blockquote><p>保证消息只会被消费一次</p><p>保证当客户端挂机重启后，仍能接收到挂机时生产者发送的消息</p></blockquote><p><strong>使用Stream中的消息分组(group)来解决</strong></p><p>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同的组</strong>是可以重复消费的，<strong>同一个组</strong>内会发生竞争关系，只有其中一个可以消费。</p><p>有分组属性配置的客户端可以实现持久化</p><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">bindings:</span><br>   <span class="hljs-comment"># 消息组</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">AAA</span><br></code></pre></td></tr></table></figure><h2 id="八、链路跟踪"><a href="#八、链路跟踪" class="headerlink" title="八、链路跟踪"></a>八、链路跟踪</h2><blockquote><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过<strong>多个不同的的服务节点</strong>调用来协同产生最后的请求结果，每一个请求都会形成一条复杂的分布式服务<strong>调用链路</strong>，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p></blockquote><h3 id="1-SpringCloud-Sleuth"><a href="#1-SpringCloud-Sleuth" class="headerlink" title="1.SpringCloud Sleuth"></a>1.SpringCloud Sleuth</h3><p><img src="https://s2.loli.net/2023/11/03/SkzvxjOTNP6b3nQ.png" alt="sleuth"></p><ul><li>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识</li><li>span：表示调用链路来源，通俗的理解span就是一次请求信息</li></ul><p><strong>Zipkin</strong></p><blockquote><p>SpringCloud已不需要自己构建Zipkin Server，只需调用jar包即可</p></blockquote><p><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">官网下载</a></p><p><strong>运行jar</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar zipkin-server-2.12.9-exec.jar<br></code></pre></td></tr></table></figure><p><strong>运行控制台</strong></p><p>运行控制台</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:9411</span><br></code></pre></td></tr></table></figure><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><blockquote><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>版本<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>Sentine</strong>l：流量控制、熔断降级、系统负载保护等，保护服务的稳定性。</p></li><li><p><strong>Nacos</strong>：动态服务发现、<strong>配置管理</strong>和<strong>服务管理</strong>平台。</p></li><li><p><strong>RocketMQ</strong>：分布式<strong>消息系统</strong>，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p></li><li><p><strong>Dubbo</strong>：一款高性能 Java <strong>RPC 框架</strong>。</p></li><li><p><strong>Seata</strong>：微服务分布式<strong>事务解决方案</strong>。</p></li><li><p><strong>Alibaba Cloud OSS</strong>: <strong>对象存储</strong>服务（简称 OSS），云存储服务。</p></li><li><p><strong>Alibaba Cloud SchedulerX</strong>: 分布式<strong>任务调度</strong>，提供任务调度服务。</p></li><li><p><strong>Alibaba Cloud SMS</strong>: <strong>短信服务</strong></p></li></ul><h2 id="一、Nacos"><a href="#一、Nacos" class="headerlink" title="一、Nacos"></a>一、Nacos</h2><blockquote><p>Nacos就是注册中心＋配置中心的组合 -&gt; <strong>Nacos &#x3D; Eureka+Config+Bus</strong></p></blockquote><p><strong>[官网下载](<a href="https://nacos.io/zh-cn/index.html">home (nacos.io)</a>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 访问</span><br>localhost:8848/nacos<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--负载均衡--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-注册中心"><a href="#1-注册中心" class="headerlink" title="1. 注册中心"></a>1. 注册中心</h3><p><strong>YML</strong>（生产者）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置Nacos地址</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong>（消费者）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">83</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>  <span class="hljs-comment"># 开启负载均衡</span><br>    <span class="hljs-attr">loadbalancer:</span><br>      <span class="hljs-attr">nacos:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure><p><strong>启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain9001</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            SpringApplication.run(PaymentMain9001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者Rest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-配置中心"><a href="#2-配置中心" class="headerlink" title="2. 配置中心"></a>2. 配置中心</h3><p><img src="https://s2.loli.net/2023/11/05/CsmeJUZ7VY5gNfi.png" alt="nacos"></p><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--     2020以上版本，需引入改包，才能正确引导bootstrap配置加载   --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong></p><ul><li><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nacos配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos作为配置中心地址</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span><br><span class="hljs-comment">#        group: DEV_GROUP #分组</span><br><span class="hljs-comment">#        namespace: a56da4e5-dd4c-4e92-92d3-d050386a0d2d #命名空间</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">profiles:</span><br>  <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 表示开发环境</span><br><span class="hljs-comment">#  active: test # 表示测试环境</span><br><span class="hljs-comment">#  active: info</span><br></code></pre></td></tr></table></figure></li><li><p>在nacos上的配置文件命名规则为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;spring<span class="hljs-selector-class">.application</span>.name&#125;-$&#123;spring<span class="hljs-selector-class">.profile</span>.active&#125;.$&#123;spring<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.config</span>.file-extension&#125;<br></code></pre></td></tr></table></figure><p>例如上述配置，在注册中心读取的，配置文件命名为</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">nacos-config-client-dev.yaml<br></code></pre></td></tr></table></figure></li></ul><p><strong>业务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">// nacos 动态刷新</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String configInfo;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/config/info&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-集群部署"><a href="#3-集群部署" class="headerlink" title="3. 集群部署"></a>3. 集群部署</h3><blockquote><p>Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。</p></blockquote><p><img src="https://s2.loli.net/2023/11/05/5gsHoZLdTNDXPv4.png" alt="nacosJq"></p><p><strong>数据库持久化</strong></p><ol><li>安装数据库，版本要求:5.6.5+</li><li>初始化mysq数据库，数据库初始化文件: nacos-mysql.sql</li><li>修改conf&#x2F;application.properties文件，增加支持mysql数据源配置（目前只支持mysql)，添加mysql数据源的url、用户名和密码。</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://IP:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="hljs-attr">db.user</span>=<span class="hljs-string">nacos_devtest</span><br><span class="hljs-attr">db.password</span>=<span class="hljs-string">youdontknow</span><br></code></pre></td></tr></table></figure><p><strong>Linux集群</strong></p><p><strong>配置Nacos</strong></p><ul><li><p>下载安装</p></li><li><p>配置数据库</p><p><img src="https://s2.loli.net/2023/11/05/UTCY1q8PMVWrZzx.png" alt="NacosLinux"></p></li><li><p>配置端口</p><p><img src="https://s2.loli.net/2023/11/05/GDliIX7UdwBptvT.png" alt="JqPz"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.111.144:3333</span><br><span class="hljs-number">192.168.111.144:4444</span><br><span class="hljs-number">192.168.111.144:5555</span><br></code></pre></td></tr></table></figure></li><li><p>配置启动文件</p><p><img src="https://s2.loli.net/2023/11/05/kb85gUBRqDr4jIx.png" alt="QdPz"></p></li></ul><p>​<img src="https://s2.loli.net/2023/11/05/iORBoVQZnDqtJYm.png" alt="QdPz2"></p><ul><li><code>startup.sh - p 端口号</code>：带端口启动</li></ul><p><strong>配置Nginx</strong></p><ul><li><p>修改配置文件</p><p><img src="https://s2.loli.net/2023/11/05/69sm8Vd4zraJohe.png" alt="nginx"></p></li></ul><p>​<img src="https://s2.loli.net/2023/11/05/1g4XCJfEkj9sdFR.png" alt="nginx2"></p><ul><li><p>启动nginx</p><p><img src="https://s2.loli.net/2023/11/05/MagsTSGRtrWIV7D.png" alt="nginx3"></p></li></ul><h2 id="二、Sentinel"><a href="#二、Sentinel" class="headerlink" title="二、Sentinel"></a>二、Sentinel</h2><blockquote><p>以流量为切入点，流量控制、熔断降级、系统负载保护等</p></blockquote><p><strong>主要特征</strong></p><p><img src="https://s2.loli.net/2023/11/08/5vlmSJxHwPuoed3.png" alt="sentinel"></p><p><strong>下载安装</strong></p><ul><li><p><strong><a href="https://github.com/alibaba/Sentinel/releases">GitHub下载</a></strong><br>下载到本地的jar包</p></li><li><p>运行命令</p><p>8080端口不能被占用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -jar sentinel-dashboard-1.7.0.jar<br></code></pre></td></tr></table></figure></li><li><p>访问Sentinel管理界面</p><ul><li>localhost:8080</li><li>登录账号密码均为sentinel</li></ul></li></ul><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloud Alibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba sentinel --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--openfeign--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8401</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span> <span class="hljs-comment">#配置Sentinel dashboard地址</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br></code></pre></td></tr></table></figure><h3 id="1-流量控制"><a href="#1-流量控制" class="headerlink" title="1. 流量控制"></a>1. 流量控制</h3><p><strong>界面</strong></p><p><img src="https://s2.loli.net/2023/11/08/46FhmTwe5NAzLrI.png" alt="senLk"></p><ul><li><p>资源名：唯一名称，默认请求路径。</p></li><li><p>针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）。</p></li><li><p>阈值类型&#x2F;单机阈值：</p><ul><li>QPS(每秒钟的请求数量)︰当调用该API的QPS达到阈值的时候，进行限流。</li><li>线程数：当调用该API的线程数达到阈值的时候，进行限流。</li></ul></li><li><p>是否集群：不需要集群。</p></li><li><p>流控模式：</p><ul><li>直接：API达到限流条件时，直接限流。</li><li>关联：当关联的资源达到阈值时，就限流自己。</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【API级别的针对来源】。</li></ul></li><li><p>流控效果：</p><ul><li>快速失败：直接失败，抛异常。</li><li>Warm up：根据Code Factor（冷加载因子，默认3）的值，从阈值&#x2F;codeFactor，经过预热时长，才达到设置的QPS阈值。</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效。</li></ul></li></ul><p><strong>预热</strong></p><blockquote><p>即预热&#x2F;冷启动方式。当系统长期处于低访问量的情况下，当流量突然增加时，可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</p></blockquote><p><img src="https://s2.loli.net/2023/11/08/BSGjdD7zMlLYAX1.png" alt="warmUp"></p><p><strong>排队等待</strong></p><blockquote><p>会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p></blockquote><p>注：阀值类型必须设成QPS，否则无效。</p><p><img src="https://s2.loli.net/2023/11/08/LoHJF4KP2xCO5eQ.png" alt="pd"></p><h3 id="2-服务降级"><a href="#2-服务降级" class="headerlink" title="2. 服务降级"></a>2. 服务降级</h3><blockquote><p>对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p></blockquote><p><strong>慢调用比例 (SLOW_REQUEST_RATIO)</strong></p><ul><li>选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</li><li>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</li></ul><p><strong>异常比例 (ERROR_RATIO)</strong></p><ul><li>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</li><li>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li></ul><p><strong>热点Key</strong></p><p><img src="https://s2.loli.net/2023/11/08/9Fhdc3UevnVDNWP.png" alt="rdKey"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLimitController</span><br>&#123;<br><br>    ...<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testHotKey&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler/*兜底方法*/ = &quot;deal_testHotKey&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHotKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span><br><span class="hljs-params">                             <span class="hljs-meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testHotKey&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*兜底方法*/</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deal_testHotKey</span> <span class="hljs-params">(String p1, String p2, BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;  <span class="hljs-comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p><code>@SentinelResource(value = &quot;testHotKey&quot;)</code>：前台报出异常界面</p></li><li><p><code>@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;dealHandler_testHotKey&quot;)</code><br>方法testHotKey里面第一个参数只要超过限流规则，马上降级处理<br>异常用了我们自己定义的兜底方法</p></li></ul><p><strong>参数例外项</strong></p><ul><li>普通 - 超过1秒钟一个后，达到阈值1后马上被限流</li><li><strong>我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样</strong></li><li>特例 - 假如当p1的值等于5时，它的阈值可以达到200</li></ul><p><img src="https://s2.loli.net/2023/11/08/tfkvCcnuqFlHrdJ.png" alt="rdKey2"></p><p><strong>自定义限流处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Payment;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerBlockHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException</span><span class="hljs-params">(BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">&quot;按客戶自定义,global handlerException----1&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException2</span><span class="hljs-params">(BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">&quot;按客戶自定义,global handlerException----2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitController</span> &#123;<br>...<br><br>    <span class="hljs-meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span><br><span class="hljs-meta">            blockHandlerClass = CustomerBlockHandler.class,//&lt;-------- 自定义限流处理类</span><br><span class="hljs-meta">            blockHandler = &quot;handlerException2&quot;)</span><span class="hljs-comment">//&lt;-----------</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">customerBlockHandler</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;按客戶自定义&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2020L</span>,<span class="hljs-string">&quot;serial003&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-服务熔断"><a href="#3-服务熔断" class="headerlink" title="3. 服务熔断"></a>3. 服务熔断</h3><blockquote><p>sentinel整合ribbon+openFeign+fallback</p></blockquote><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--负载均衡--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba sentinel --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--openfeign--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>无配置</strong></p><blockquote><p>给用户error页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://nacos-payment-provider&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;)</span><span class="hljs-comment">//没有配置</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        CommonResult&lt;Payment&gt; result = <br>            restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>只配置fallback</strong></p><blockquote><p>fallback只负责业务异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://nacos-payment-provider&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;)</span> <span class="hljs-comment">//fallback只负责业务异常</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        CommonResult&lt;Payment&gt; result = <br>            restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-comment">//本例是fallback</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handlerFallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span>  Long id,Throwable e)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id,<span class="hljs-string">&quot;null&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>,<span class="hljs-string">&quot;兜底异常handlerFallback,exception内容  &quot;</span>+e.getMessage(),payment);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>只配置blockHandler</strong></p><blockquote><p>blockHandler只负责<strong>sentinel控制台配置违规</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://nacos-payment-provider&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span><br>    <span class="hljs-comment">//blockHandler只负责sentinel控制台配置违规</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;)</span> <br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        CommonResult&lt;Payment&gt; result = <br>            restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//本例是blockHandler</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">blockHandler</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span>  Long id,BlockException blockException)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id,<span class="hljs-string">&quot;null&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">445</span>,<br>                                  <span class="hljs-string">&quot;blockHandler-sentinel限流,无此流水: blockException &quot;</span><br>                                  +blockException.getMessage(),payment);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>fallback和blockHandler都配置</strong></p><blockquote><p>被限流降级而抛出BlockException时只会进入blockHandler处理逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://nacos-payment-provider&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        CommonResult&lt;Payment&gt; result = <br>            restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">//本例是fallback</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handlerFallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span>  Long id,Throwable e)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id,<span class="hljs-string">&quot;null&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>,<span class="hljs-string">&quot;兜底异常handlerFallback,exception内容  &quot;</span>+e.getMessage(),payment);<br>    &#125;<br>    <span class="hljs-comment">//本例是blockHandler</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">blockHandler</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span>  Long id,BlockException blockException)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id,<span class="hljs-string">&quot;null&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">445</span>,<br>                                  <span class="hljs-string">&quot;blockHandler-sentinel限流,无此流水: blockException &quot;</span><br>                                  +blockException.getMessage(),payment);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>exceptionsToIgnore</strong></p><blockquote><p>忽略指定异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span>    <br><br>    ...<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;,</span><br><span class="hljs-meta">            exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span> <span class="hljs-comment">//&lt;-------------</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        CommonResult&lt;Payment&gt; result = <br>            restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-comment">//exceptionsToIgnore属性有IllegalArgumentException.class，</span><br>            <span class="hljs-comment">//所以IllegalArgumentException不会跳入指定的兜底程序。</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>...<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4. 持久化"></a>4. 持久化</h3><blockquote><p>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化</p></blockquote><p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，</p><p>只要Nacos里面的配置不删除，针对8401上sentinel上的流控规则持续有效。</p><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--持久化用到--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">datasource:</span> <span class="hljs-comment">#&lt;---------------------------关注点，添加Nacos数据源配置</span><br>        <span class="hljs-attr">ds1:</span><br>          <span class="hljs-attr">nacos:</span><br>            <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>            <span class="hljs-attr">dataId:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>            <span class="hljs-attr">groupId:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>            <span class="hljs-attr">data-type:</span> <span class="hljs-string">json</span><br>            <span class="hljs-attr">rule-type:</span> <span class="hljs-string">flow</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/08/s4j3Hc6SEXRdrbZ.png" alt="cjh"></p><p><strong>配置限流规则</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;resource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/rateLimit/byUrl&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;limitApp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;controlBehavior&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clusterMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ul><li>resource：资源名称</li><li>limitApp：来源应用</li><li>grade：阈值类型，0表示线程数, 1表示QPS</li><li>count：单机阈值</li><li>strategy：流控模式，0表示直接，1表示关联，2表示链路</li><li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待</li><li>clusterMode：是否集群</li></ul><h2 id="三、Seata"><a href="#三、Seata" class="headerlink" title="三、Seata"></a>三、Seata</h2><blockquote><p>分布式事务解决方案</p></blockquote><p><strong>分布式事务</strong></p><p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用,分别使用三个独立的数据源，</p><p>业务操作需要调用三个服务来完成。此时<strong>每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证</strong>。</p><p><img src="https://s2.loli.net/2023/11/08/N9rZmgVq1TOCPwK.png" alt="sw"></p><p><strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong>。</p><p><strong>seata解决方案</strong></p><blockquote><p>我们只需要使用一个 <code>@GlobalTransactional</code> 注解在业务方法上</p></blockquote><p><img src="https://s2.loli.net/2023/11/08/OoqyYLtQlb7PwxB.png" alt="seata"></p><p><strong>Seata的工作流程</strong></p><p>分布式事务处理过程的一ID+三组件模型：</p><ul><li><p>Transaction ID XID 全局唯一的事务ID</p></li><li><p>三组件概念</p><ul><li><strong>TC</strong> (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li><strong>TM</strong> (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li><strong>RM</strong> (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li><li><p>处理过程：</p><ul><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID</li><li>XID在微服务调用链路的上下文中传播；</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；</li><li>TM向TC发起针对XID的全局提交或回滚决议；</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li></ul></li></ul><p><img src="https://s2.loli.net/2023/11/08/nT7giZOw1SDsCYA.png" alt="seata"></p><h3 id="1-配置-2"><a href="#1-配置-2" class="headerlink" title="1. 配置"></a>1. 配置</h3><ul><li><p><strong>file.conf</strong></p><ul><li><p>service模块</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">service &#123;<br>    <span class="hljs-comment">##fsp_tx_group是自定义的</span><br>    vgroup_mapping.<span class="hljs-keyword">my</span>.test.tx_group=<span class="hljs-string">&quot;fsp_tx_group&quot;</span> <br>    default.grouplist = <span class="hljs-string">&quot;127.0.0.1:8091&quot;</span><br>    enableDegrade = <span class="hljs-literal">false</span><br>    disable = <span class="hljs-literal">false</span><br>    max.commitretry.<span class="hljs-keyword">timeout</span>= <span class="hljs-string">&quot;-1&quot;</span><br>    max.ollbackretry.<span class="hljs-keyword">timeout</span>= <span class="hljs-string">&quot;-1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>store模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## transaction log store</span><br>store &#123;<br><span class="hljs-comment">## store mode: file, db</span><br><span class="hljs-comment">## 改成db</span><br>mode = <span class="hljs-string">&quot;db&quot;</span><br><br><span class="hljs-comment">## file store</span><br>file &#123;<br><span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;sessionStore&quot;</span><br><br><span class="hljs-comment"># branch session size, if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="hljs-built_in">max</span>-branch-session-size = <span class="hljs-number">16384</span><br><span class="hljs-comment"># globe session size, if exceeded throws exceptions</span><br><span class="hljs-built_in">max</span>-<span class="hljs-keyword">global</span>-session-size = <span class="hljs-number">512</span><br><span class="hljs-comment"># file buffer size, if exceeded allocate new buffer</span><br>file-write-buffer-cache-size = <span class="hljs-number">16384</span><br><span class="hljs-comment"># when recover batch read size</span><br>session.reload.read_size= <span class="hljs-number">100</span><br><span class="hljs-comment"># async, sync</span><br>flush-disk-mode = <span class="hljs-keyword">async</span><br>&#125;<br><br><span class="hljs-comment"># database store</span><br>db &#123;<br><span class="hljs-comment">## the implement of javax.sql.DataSource, </span><br><span class="hljs-comment">## such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br>datasource = <span class="hljs-string">&quot;dbcp&quot;</span><br><span class="hljs-comment">## mysql/oracle/h2/oceanbase etc.</span><br><span class="hljs-comment">## 配置数据源</span><br>db-<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;mysql&quot;</span><br>driver-<span class="hljs-keyword">class</span>-name = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span><br>user = <span class="hljs-string">&quot;root&quot;</span><br>password = <span class="hljs-string">&quot;你自己密码&quot;</span><br><span class="hljs-built_in">min</span>-conn= <span class="hljs-number">1</span><br><span class="hljs-built_in">max</span>-conn = <span class="hljs-number">3</span><br><span class="hljs-keyword">global</span>.table = <span class="hljs-string">&quot;global_table&quot;</span><br>branch.table = <span class="hljs-string">&quot;branch_table&quot;</span><br>lock-table = <span class="hljs-string">&quot;lock_table&quot;</span><br>query-limit = <span class="hljs-number">100</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>mysql5.7数据库新建库seata，在seata库里建表</p><ul><li>建表db_store.sql在\seata-server-0.9.0\seata\conf目录里面</li></ul></li><li><p><strong>registry.conf</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">registry</span> &#123;<br>  <span class="hljs-comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br>  <span class="hljs-comment"># 改用为nacos</span><br>  <span class="hljs-attribute">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br><br>  nacos &#123;<br>  <span class="hljs-comment">## 加端口号</span><br>    <span class="hljs-attribute">serverAddr</span> = <span class="hljs-string">&quot;localhost:8848&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    cluster = <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">alibaba:</span><br>      <span class="hljs-attr">seata:</span><br>        <span class="hljs-comment">#自定义事务组名称需要与seata-server中的对应</span><br>        <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">fsp_tx_group</span><br></code></pre></td></tr></table></figure><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p><strong>整体机制</strong></p><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><p><strong>一阶段加载</strong></p><blockquote><p>在一阶段，Seata会拦截“业务SQL” </p></blockquote><ul><li><p>解析SQL语义，找到“业务SQL” 要更新的业务数据，在业务数据被更新前，将其保存成”before image”</p></li><li><p>执行“业务SQL” 更新业务数据，在业务数据更新之后,</p></li><li><p>其保存成”after image”，最后生成行锁。</p></li></ul><p>以上操作全部在一个数据库事务内完成, 这样保证了一阶段操作的原子性。</p><p><img src="https://s2.loli.net/2023/11/08/CYMJWHKskquOF7l.png" alt="styl"></p><p><strong>二阶段提交</strong></p><p>二阶段如果顺利提交的话，因为”业务SQL”在一阶段已经提交至数据库，</p><p>所以Seata框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p><p><img src="https://s2.loli.net/2023/11/08/4EexJYUvTZKtcm6.png" alt="styl2"></p><p><strong>二阶段回滚</strong></p><p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的 “业务SQL”，还原业务数据。</p><p>回滚方式便是用”before image”还原业务数据；<strong>但在还原前要首先要校验脏写</strong>，对比“数据库当前业务数据”和”after image”。</p><p>如果两份数据完全一致就说明没有脏写， 可以还原业务数据，如果不一致就说明有脏写, 出现脏写就需要<strong>转人工处理。</strong></p><p><img src="https://s2.loli.net/2023/11/08/Q2TZaFCOSjWnp7N.png" alt="styl3"></p><p><strong>总结</strong></p><p><img src="https://s2.loli.net/2023/11/08/XIRVnQpPaksGeYO.png" alt="styl4"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2023/12/11/RabbitMQ/"/>
    <url>/2023/12/11/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><blockquote><p>MQ(message queue)，本质是个队列，FIFO 先入先出。是一种跨进程的通信机制，用于上下游传递消息<br>“逻辑解耦+物理解耦” 的消息通信服务</p></blockquote><h2 id="一、MQ的介绍"><a href="#一、MQ的介绍" class="headerlink" title="一、MQ的介绍"></a>一、MQ的介绍</h2><h3 id="1-简单作用"><a href="#1-简单作用" class="headerlink" title="1. 简单作用"></a>1. 简单作用</h3><ul><li><p><strong>流量消峰</strong></p><p>电商系统在高峰期，短时间<strong>大量访问无法处理</strong>，只能限制订单超过规定值后，不允许用户下单。<br>但用消息队列做缓冲，可以<strong>把订单分散</strong>成一段时间来处理， 这时用户可能在下单十几秒后才能收到下单成功通知。</p></li><li><p><strong>应用解耦</strong></p><p>在电商应用中，多系统功能结构如果耦合 ，则任何一个子系统出了故障，都会造成下单操作异常。<br>当转变成基于 消息队列的方式后，如物流系统因为发生故障，需要几分钟来修复。<br>在这时，物流系统要处理的数据<strong>被缓存在消息队列</strong>中，下单操作可以正常完成。<br>当系统恢复后，会继续处理订单信息，提升系统的可用性。</p><p><img src="https://s2.loli.net/2023/12/08/Ise9NAaGWzTpyEP.png" alt="jieo"></p></li><li><p><strong>异步处理</strong></p><p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完。</p><p>以前一般有两种方式：</p><ul><li><p>A 过一段时间去调用 B 的查询 api 查询。</p></li><li><p>A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。</p></li></ul><p>如使用消息总线，可以很方便解决这个问题</p><p>​A 调用 B 服务后，<strong>只需要监听</strong> B 处理完成的消息，<br>​当 B 处理完成后，会发送一 条消息给 MQ，MQ 会将此消息转发给 A 服务。<br>​这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。<br>​同样B 服务也不用 做这些操作。A 服务还能及时的得到异步处理成功的消息。</p></li></ul><p><img src="https://s2.loli.net/2023/12/08/I2XUcVuQ8EOyiAf.png" alt="async"></p><h3 id="2-RabbitMQ的特性"><a href="#2-RabbitMQ的特性" class="headerlink" title="2. RabbitMQ的特性"></a>2. RabbitMQ的特性</h3><blockquote><p>是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统</p></blockquote><ul><li><p>由 <strong>erlang</strong> 语言开发，具有高并发特性，性能较好</p></li><li><p>万级吞吐量，MQ 功能比较完备,健壮、稳定、易用、跨平台</p></li><li><p>支持多种语言 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等</p></li><li><p>如果<strong>数据量没有那么大</strong>，优先选择功能比较完备的 RabbitMQ</p></li></ul><p>注：运行RabbitMQ需要有erlang语言环境</p><p><strong><a href="https://www.rabbitmq.com/news.html">RabbitMQ | 官网</a></strong></p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><blockquote><p>在 Linux Centos7 环境下进行</p></blockquote><ul><li><p>版本选择</p><ul><li>erlang-21.3.8.21-1.el7.x86_64.rpm</li><li>rabbitmq-server-3.8.8-1.el7.noarch.rpm</li></ul></li><li><p><strong><a href="https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/7/rabbitmq-server-3.8.8-1.el7.noarch.rpm">下载地址</a></strong></p></li></ul><h3 id="1-部署与启动"><a href="#1-部署与启动" class="headerlink" title="1. 部署与启动"></a>1. 部署与启动</h3><p><strong>安装Erlang</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># -ivh 显示进度安装</span><br>rpm -ivh erlang-21.3.8.21-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><p><strong>安装RabbitMQ</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装依赖包</span><br>yum install socat -y<br>rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><p><strong>安装Web端管理插件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><p><strong>启动MQ服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动服务</span><br>systemctl start rabbitmq-server<br><span class="hljs-comment"># 查看服务状态</span><br>systemctl status rabbitmq-server<br><span class="hljs-comment"># 开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> rabbitmq-server<br><span class="hljs-comment"># 停止服务</span><br>systemctl stop rabbitmq-server<br><span class="hljs-comment"># 重启服务</span><br>systemctl restart rabbitmq-server<br></code></pre></td></tr></table></figure><h3 id="2-使用Web界面"><a href="#2-使用Web界面" class="headerlink" title="2. 使用Web界面"></a>2. 使用Web界面</h3><p><strong>开启防火墙端口</strong></p><ul><li><p>RabbitMQ默认端口</p><ul><li><p><code>5672</code>：</p><p>用于 RabbitMQ 服务器的主要通信。客户端可以使用该端口连接到 RabbitMQ 服务器，<br>并通过 AMQP 协议进行消息发布、消费和管理队列等操作。</p></li><li><p><code>15672</code>：Web端默认端口</p></li><li><p><code>25672</code>：与客户端之间的通信端口，用于建立 AMQP 连接和传输消息</p></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开启端口</span><br>firewall-cmd --permanent --add-port=5672/tcp<br><span class="hljs-comment"># 重载配置</span><br>firewall-cmd --reload<br><span class="hljs-comment"># 查看开放的端口</span><br>firewall-cmd --list-ports<br></code></pre></td></tr></table></figure><p><strong>添加Web端账号</strong></p><blockquote><p>默认账号只能在本机登录，无法远程登录</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建账号和密码 （如果是云服务器，则密码尽量复杂）</span><br>rabbitmqctl add_user admin 123456<br><br><span class="hljs-comment"># 设置用户角色</span><br>rabbitmqctl set_user_tags admin administrator<br><br><span class="hljs-comment"># 为用户添加资源权限 设置不限ip访问  添加配置、写、读权限</span><br><span class="hljs-comment"># set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span><br>rabbitmqctl set_permissions -p <span class="hljs-string">&quot;/&quot;</span> admin <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure><p><strong>用户级别</strong></p><ul><li><p><code>administrator</code>：可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理</p></li><li><p><code>monitoring</code>：监控者 登录控制台，查看所有信息</p></li><li><p><code>policymaker</code>：策略制定者 登录控制台，指定策略</p></li><li><p><code>managment</code>：普通管理员 登录控制台</p></li></ul><p><strong>相关命令</strong></p><ul><li><p>关闭应用：<code>rabbitmqctl stop_app</code></p></li><li><p>重置：<code>rabbitmqctl reset</code></p></li><li><p>重新启动：<code>rabbitmqctl start_app</code></p></li></ul><h2 id="三、入门案例"><a href="#三、入门案例" class="headerlink" title="三、入门案例"></a>三、入门案例</h2><blockquote><p>使用Java编写一个生产者，消费者，使消费者接收生产者的消息</p></blockquote><p><strong>流程图</strong></p><p>图中红色方块为消息队列</p><p><img src="https://s2.loli.net/2023/12/08/XYfbxpijTqZr1Fz.png" alt="lct"></p><h3 id="1-创建POM模块"><a href="#1-创建POM模块" class="headerlink" title="1. 创建POM模块"></a>1. 创建POM模块</h3><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--rabbitmq 依赖客户端--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--操作文件流的一个依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0-alpha5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0-alpha1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定 jdk 编译版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">provider</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br><br>        factory.setHost(<span class="hljs-string">&quot;服务器IP地址&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;@123@&quot;</span>);<br><br><span class="hljs-comment">//        创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><span class="hljs-comment">//        创建信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><span class="hljs-comment">//        创建队列</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 1.队列名称</span><br><span class="hljs-comment">         * 2.持久化</span><br><span class="hljs-comment">         * 3.是否一个消费者独有</span><br><span class="hljs-comment">         * 4.自动删除</span><br><span class="hljs-comment">         * 5.其他参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        发送消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello RabbitMQ!&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,msg.getBytes());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;服务器IP地址&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;@123@&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br><span class="hljs-comment">//        消费者接收到消息时的回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (String consumerTag, Delivery message) -&gt;<br>                System.out.println(<span class="hljs-string">&quot;消费者接收到消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br><br><span class="hljs-comment">//        消费者取消的回调</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> consumerTag -&gt; System.out.println(<span class="hljs-string">&quot;消费者取消消息 : &quot;</span> + consumerTag);<br><br><span class="hljs-comment">//        接收消息</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 队列名称</span><br><span class="hljs-comment">        2. 成功后是否自动应答</span><br><span class="hljs-comment">        3. 消费者接收到消息时的回调</span><br><span class="hljs-comment">        4. 消费者取消的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者成功接收</strong></p><p><img src="https://s2.loli.net/2023/12/08/gvCminqLxU2cXfO.png" alt="qd"></p><h3 id="2-轮巡分发"><a href="#2-轮巡分发" class="headerlink" title="2. 轮巡分发"></a>2. 轮巡分发</h3><blockquote><p>RabbitMQ默认为轮巡分发</p></blockquote><p><strong>创建连接工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Channel <span class="hljs-title function_">getChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;服务器IP地址&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;@123@&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-keyword">return</span> connection.createChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">provider</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 获取信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><span class="hljs-comment">// 生成队列</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 发送消息</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,msg.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;发送完成&quot;</span> + msg);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br>        <span class="hljs-comment">// 消费者接收到消息时的回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (String consumerTag, Delivery message) -&gt;<br>                System.out.println(<span class="hljs-string">&quot;消费者接收到消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br><br>        <span class="hljs-comment">// 消费者取消的回调</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> consumerTag -&gt; System.out.println(<span class="hljs-string">&quot;消费者取消消息 : &quot;</span> + consumerTag);<br><br>        <span class="hljs-comment">// 接收消息</span><br>        System.out.println(<span class="hljs-string">&quot;C1_等待接收消息......&quot;</span>);<br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>开启多个消费者</strong></p><p><img src="https://s2.loli.net/2023/12/08/gs7uWPEKQpjnGFZ.png" alt="duokai"></p><p><strong>启动</strong></p><p><img src="https://s2.loli.net/2023/12/08/WH6TYftErJV2ZQM.png" alt="fs"></p><p><img src="https://s2.loli.net/2023/12/08/zonYUgKt9u8JmRh.png" alt="c1"></p><p><img src="https://s2.loli.net/2023/12/08/TVgncL8BaNUQskY.png" alt="c2"></p><h3 id="3-消息应答"><a href="#3-消息应答" class="headerlink" title="3. 消息应答"></a>3. 消息应答</h3><blockquote><p>消费者在接收到消息并且处理该消息之后，告诉 rabbitmq 处理完成，mq则将消息删除。防止未处理的消息丢失</p></blockquote><p><strong>自动应答</strong></p><p>消息发送后<strong>立即被认为已经传送成功</strong>，这种模式需要在<strong>高吞吐量和数据传输安全性方面做权衡</strong><br>这种模式消息在接收到之前，消费者<strong>宕机或关闭</strong>，消息就会丢失，<br>当然这种模式消费者可以接收过载的消息，<strong>没有对传递的消息数量进行限制</strong>，<br>不过这样有可能使得消费者这边，产生来大量不及处理的消息，<strong>导致消息的积压</strong>，使内存耗尽。<br><strong>所以这种模式仅适用在消费者可以高效并以 某种速率能够处理这些消息的情况下使用。</strong></p><p><strong>手动应答</strong></p><p> 手动消息应答的方法</p><ul><li><code>Channel.basicAck</code>：肯定确认</li><li><code>Channel.basicNack</code>：否定确认</li><li><code>Channel.basicReject</code>：否定确认，不处理该消息直接拒绝，<strong>可以丢弃</strong></li></ul><p>手动应答中可以通过批量应答解决网络拥堵</p><p><img src="https://s2.loli.net/2023/12/08/rAkQEf6bHFPqz4W.png" alt="ack"></p><ul><li><code>true</code> 代表批量应答 channel 上未应答的所有消息</li><li><code>false</code> 只会应答当前 tag 的消息</li></ul><p><img src="https://s2.loli.net/2023/12/08/NgjkrtuscJZFXol.png" alt="pl"></p><p><strong>消息自动重新入队</strong></p><p>RabbitMQ 会将未应答的消息重新竟然队列，如果此时其他消费者可以处理，它将会被分发给另一个消费者。<br>这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息。</p><p><strong>代码实现</strong></p><ul><li><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consuemr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br>        System.out.println(<span class="hljs-string">&quot;C1等待处理时间较长&quot;</span>);<br><br><span class="hljs-comment">// 消费者消息处理</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (tag, msg) -&gt; &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;接收到消息&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(), StandardCharsets.UTF_8));<br><br>            channel.basicAck(msg.getEnvelope().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>        &#125;;<br>      <br><span class="hljs-comment">// 接收消息</span><br>        channel.basicConsume(TASK_QUEUE_NAME, <span class="hljs-literal">false</span>, deliverCallback, System.out::println);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动两个消费者，一个10s 一个3s</p></li><li><p>消费者发送两条消息，默认轮巡</p></li><li><p>如在10s内关闭消费者一，则消费者二会接收到第二条消息</p></li></ul><h3 id="4-队列持久化"><a href="#4-队列持久化" class="headerlink" title="4. 队列持久化"></a>4. 队列持久化</h3><blockquote><p>默认情况下 RabbitMQ 某种原因关闭时，它会忽视队列和消息，造成消息丢失。<br>我们需要将队列和消息都标记为持久化</p></blockquote><p><strong>队列持久化</strong></p><p>之前创建的队列都是非持久化的，当 rabbitmq 重启，队列就会<strong>被删除掉</strong>，<br>要队列实现持久化，需要在声明队列的时候把 <code>durable</code> 参数设置为 <code>true</code></p><p><img src="https://s2.loli.net/2023/12/08/nIcC74KsOPleNtS.png" alt="dru"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 设置队列持久化</span><br>channel.queueDeclare(TASK_QUEUE_NAME,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>注意：修改队列属性后，需要将原来队列先删除</p><p>修改成功后，Web控制台会显示</p><p><img src="https://s2.loli.net/2023/12/08/Xw8Qxd3Wg9G52nD.png" alt="dur"></p><p><strong>消息持久化</strong></p><p>需要在生产者发送消息时，设置消息的属性 <code>MessageProperties.PERSISTENT_TEXT_PLAIN</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 设置消息持久化</span><br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,msg.getBytes());<br></code></pre></td></tr></table></figure><h3 id="5-不公平分发"><a href="#5-不公平分发" class="headerlink" title="5. 不公平分发"></a>5. 不公平分发</h3><blockquote><p>能者多劳，高性能服务器应该处理更多消息，保证资源不被浪费</p></blockquote><p><strong>在接收消息之前设置不公平分发</strong></p><p>在当前任务还没完成，或者没有应答，rabbitmq 就会把该任务分配给有空闲的消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 设置不公平分发</span><br><span class="hljs-comment"> 0:轮巡</span><br><span class="hljs-comment"> 1:不公平分发，能者多劳</span><br><span class="hljs-comment"> */</span><br>channel.basicQos(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 接收消息</span><br>channel.basicConsume(TASK_QUEUE_NAME, <span class="hljs-literal">false</span>, deliverCallback, System.out::println);<br></code></pre></td></tr></table></figure><h3 id="6-预取值分发"><a href="#6-预取值分发" class="headerlink" title="6. 预取值分发"></a>6. 预取值分发</h3><blockquote><p>限制信道缓冲区的大小</p></blockquote><p>一般来说，增加预取将<strong>提高</strong>向消费者传递消息的速度。但<strong>已传递未处理</strong>的消息的数量也会增加，从而增加了消费者的内存消耗，所以需要合适的预取值。不同的负载该值取值也不同 100 到 300 范 围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  设置不公平分发</span><br><span class="hljs-comment">  0:轮巡</span><br><span class="hljs-comment">  1:不公平分发，能者多劳</span><br><span class="hljs-comment">  &gt;1:预取值，设置信道能堆积消息的&#x27;最大值&#x27;</span><br><span class="hljs-comment">*/</span><br>channel.basicQos(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 接收消息</span><br>channel.basicConsume(TASK_QUEUE_NAME, <span class="hljs-literal">false</span>, deliverCallback, System.out::println);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/08/cSJW2eAH8vqfUla.png" alt="yqz"></p><h2 id="四、发布确认"><a href="#四、发布确认" class="headerlink" title="四、发布确认"></a>四、发布确认</h2><p><strong>原理</strong></p><p>生产者将信道设置成 confirm 模式，所有在该信道上面发布的消息都将会被指派一个<strong>唯一的 ID</strong>(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会<strong>发送一个确认</strong>给生产者(包含消息的唯一 ID)，</p><p>这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息<strong>写入磁盘之后发出</strong>，broker 回传给生产者的确认消息中 <code>delivery-tag</code> 域包含了确认消息的<strong>序列号</strong>，此外 broker 也可以设置 <code>basic.ack</code> 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>confirm 模式最大的好处在于他是<strong>异步</strong>的，一旦发布一条消息，生产者应用程序就可以<strong>在等信道返回确认的同时继续发送下一条消息</strong>，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，<br>如果RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 <code>nack</code> 消息， 生产者应用程序同样可以在回调方法中处理该 nack 消息。</p><p><strong>开启发布确认</strong></p><p>在生产者开启发布确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 开启发布确认</span><br>channel.confirmSelect();<br></code></pre></td></tr></table></figure><h3 id="1-单个发布确认"><a href="#1-单个发布确认" class="headerlink" title="1. 单个发布确认"></a>1. 单个发布确认</h3><blockquote><p>它是一种<strong>同步确认发布</strong>的方式，只有前一条消息被确认发布，后续的消息才能继续发布，</p><p><strong>发布速度特别的慢</strong>，前一条没有确认发布就会<strong>阻塞</strong>后续消息发布，最多提供每秒不超过数百条发布消息的吞吐量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Individually</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br><span class="hljs-comment">// 声明对列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">qName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(qName,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br><br><span class="hljs-comment">// 计算时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-comment">// 发布消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,qName,<span class="hljs-literal">null</span>,(<span class="hljs-string">&quot;&quot;</span>+i).getBytes());<br>            <span class="hljs-keyword">if</span> (channel.waitForConfirms())&#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;发布 &quot;</span> + MESSAGE_COUNT + <span class="hljs-string">&quot; 条消息 ，用时 &quot;</span> + (end-begin) + <span class="hljs-string">&quot; 毫秒&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-批量发布确认"><a href="#2-批量发布确认" class="headerlink" title="2. 批量发布确认"></a>2. 批量发布确认</h3><blockquote><p>先发布一批消息然后一起确认可以极大地提高吞吐量</p><p>当发布出现问题时，不知道是哪个消息出问题了，必须<strong>将整个批处理保存在内存中</strong>，<br>以记录重要的信息而后重新发布消息。这种方案仍然是<strong>同步</strong>的，也一样阻塞消息的发布。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br><span class="hljs-comment">// 声明对列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">qName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(qName,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br><br><span class="hljs-comment">// 计算时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-comment">// 批量确认大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">// 发布消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= MESSAGE_COUNT; i++) &#123;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,qName,<span class="hljs-literal">null</span>,(<span class="hljs-string">&quot;&quot;</span>+i).getBytes());<br><br>            <span class="hljs-keyword">if</span> (i % batchCount == <span class="hljs-number">0</span>)&#123;<br>                channel.waitForConfirms();<br>                System.out.println(<span class="hljs-string">&quot;发送成功&quot;</span>);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;发布 &quot;</span> + MESSAGE_COUNT + <span class="hljs-string">&quot; 条消息 ，用时 &quot;</span> + (end-begin) + <span class="hljs-string">&quot; 毫秒&quot;</span>);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-异步发布确认"><a href="#3-异步发布确认" class="headerlink" title="3. 异步发布确认"></a>3. 异步发布确认</h3><blockquote><p>利用<strong>回调函数</strong>来达到消息可靠性传递，通过函数回调来保证是否投递成功</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">async</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br><span class="hljs-comment">// 声明对列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">qName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        channel.queueDeclare(qName,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 开启发布确认</span><br>        channel.confirmSelect();<br><br><span class="hljs-comment">// 创建一个线程安全哈希表</span><br>        ConcurrentSkipListMap&lt;Long , String&gt; outConfirms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListMap</span>&lt;&gt;();<br><br><span class="hljs-comment">// 计算时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-comment">// 成功，回调函数</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">ackCallBack</span> <span class="hljs-operator">=</span> (deliveryTag, multiple) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (multiple)&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                  删除此tag之前的所有值</span><br><span class="hljs-comment">                  headmap会返回map中比tag小的所有值的视图，将视图清空会随之将map中的对应的值删除</span><br><span class="hljs-comment">                 */</span><br>                ConcurrentNavigableMap&lt;Long, String&gt; confirmed =<br>                        outConfirms.headMap(deliveryTag);<br>                confirmed.clear();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                outConfirms.remove(deliveryTag);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;确认 &quot;</span>+ deliveryTag);<br>        &#125;;<br><span class="hljs-comment">// 失败，回调函数</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">nackCallBack</span> <span class="hljs-operator">=</span> (deliveryTag, multiple)-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;未确认 &quot;</span> + deliveryTag);<br>        &#125;;<br><br><span class="hljs-comment">// 设置消息监听器(异步)</span><br>        channel.addConfirmListener(ackCallBack,nackCallBack);<br><br><span class="hljs-comment">// 发布消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + i;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,qName,<span class="hljs-literal">null</span>, msg.getBytes());<br>            outConfirms.put(channel.getNextPublishSeqNo(), msg);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;发布 &quot;</span> + MESSAGE_COUNT + <span class="hljs-string">&quot; 条消息 ，用时 &quot;</span> + (end-begin) + <span class="hljs-string">&quot; 毫秒&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="五、交换机"><a href="#五、交换机" class="headerlink" title="五、交换机"></a>五、交换机</h2><blockquote><p><strong>生产者只能将消息发送到交换机(exchange)</strong></p><p>RabbitMQ 消息传递模型的核心思想是: <strong>生产者生产的消息从不会直接发送到队列</strong>。<br>实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中</p></blockquote><p>交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。<br>交换机必须知道如何处理收到的消息。消息如何发送，就是由交换机的类型来决定。</p><p><img src="https://s2.loli.net/2023/12/08/sQrb3qZul5KGFOt.png" alt="jhj"></p><p><strong>Exchanges的类型：</strong></p><ul><li><p><strong>直接(direct)<strong>：这是最简单的一种类型。根据消息的路由键（routingKey）将消息发送到与指定路由键</strong>完全匹配</strong>的队列。只有完全匹配的队列会接收到消息。</p></li><li><p><strong>主题(topic)<strong>：路由键可以使用</strong>通配符</strong>来指定路由键的匹配规则。例如，路由键为 <code>red.orange.yellow</code> 的消息可以匹配到键为 <code>*.orange.*</code>的队列。</p></li><li><p><strong>标题(headers)<strong>：根据消息的标题（headers）属性来匹配消息，并将其发送到与匹配的规则</strong>完全匹配</strong>的队列。标题属性是一组键值对，并且匹配规则可以使用各种逻辑操作符来定义，例如等于、不等于、存在等。</p></li><li><p><strong>扇出(fanout)<strong>：扇出交换将消息发送到</strong>与之绑定的所有队列</strong>，忽略消息的路由键。这种交换方式<strong>广播消息</strong>给所有绑定的队列，无论它们的数量和位置。</p></li></ul><p><strong>BInding 交换机与队列绑定</strong></p><p><img src="https://s2.loli.net/2023/12/08/1ThVQKr6WJfg9xn.png" alt="binding"></p><h3 id="1-Fanout交换机"><a href="#1-Fanout交换机" class="headerlink" title="1. Fanout交换机"></a>1. Fanout交换机</h3><blockquote><p>它是将接收到的所有消息<strong>广播</strong>到它绑定的所有队列中</p></blockquote><p><img src="https://s2.loli.net/2023/12/08/HFpEz4M5DL1VRIT.png" alt="fanout"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogs01</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br><span class="hljs-comment">// 声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME,<span class="hljs-string">&quot;fanout&quot;</span>);<br><br><span class="hljs-comment">// 生成临时队列，当与发送者断开连接时会自动删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><br><span class="hljs-comment">// 绑定队列到交换机</span><br>        channel.queueBind(queueName, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;ReceiveLogs01 正在等待消息。。。。。。&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag,msg)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(), StandardCharsets.UTF_8));<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelBack</span> <span class="hljs-operator">=</span> (consumerTag)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;取消接收 &quot;</span> + consumerTag);<br><br><span class="hljs-comment">// 接收消息</span><br>        channel.basicConsume(queueName,<span class="hljs-literal">true</span>,ackBack,cancelBack);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Direct交换机"><a href="#2-Direct交换机" class="headerlink" title="2. Direct交换机"></a>2. Direct交换机</h3><blockquote><p>消息只去到它绑定的 routingKey 一致的队列中去</p></blockquote><p><strong>单一绑定</strong></p><p><img src="https://s2.loli.net/2023/12/08/OUXqywiYF7R8orn.png" alt="direct"></p><p><strong>多重绑定</strong></p><p><img src="https://s2.loli.net/2023/12/08/76WeJKvoNjs19TE.png" alt="direct"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsDirect01</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;direct_logs&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br><span class="hljs-comment">// 声明交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);<br><br><span class="hljs-comment">// 声明队列</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;console&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 绑定队列到交换机</span><br>        channel.queueBind(<span class="hljs-string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(<span class="hljs-string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="hljs-string">&quot;warning&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;ReceiveLogsDirect01 正在等待消息。。。。。。&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag, msg)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(), StandardCharsets.UTF_8));<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelBack</span> <span class="hljs-operator">=</span> (consumerTag)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;取消接收 &quot;</span> + consumerTag);<br><br><span class="hljs-comment">// 接收消息</span><br>        channel.basicConsume(<span class="hljs-string">&quot;console&quot;</span>,<span class="hljs-literal">true</span>,ackBack,cancelBack);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Topic交换机"><a href="#3-Topic交换机" class="headerlink" title="3. Topic交换机"></a>3. Topic交换机</h3><blockquote><p>通过 routingkey 通配符匹配对应的队列</p></blockquote><p> 发送到 topic 交换机的消息的 routing_key 它必须是<strong>一个单词列表</strong>，<strong>以点号分隔开</strong>这些单词可以是任意单词</p><p>例如：”lazy.asd.rabbit”, “quasc.orange.rabbit”, “quick.orange.rabbit”.这种类型的。</p><p>当然这个单词列表最多不能超过 255 个字节。</p><p>特殊占位符：</p><ul><li>*<strong>：可以代替一个单词</strong></li><li><strong>#：可以替代零个或多个单词</strong></li></ul><p><img src="https://s2.loli.net/2023/12/08/Z8wmHOf2oj5zU1r.png" alt="topic"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveLogsTopic02</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, <span class="hljs-string">&quot;topic&quot;</span>);<br><br>        channel.queueDeclare(<span class="hljs-string">&quot;Q2&quot;</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.queueBind(<span class="hljs-string">&quot;Q2&quot;</span>, EXCHANGE_NAME, <span class="hljs-string">&quot;*.*.rabbit&quot;</span>);<br>        channel.queueBind(<span class="hljs-string">&quot;Q2&quot;</span>, EXCHANGE_NAME, <span class="hljs-string">&quot;lazy.#&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Q2(*.*.rabbit / lazy.#)等待接收。。。。。。。&quot;</span>);<br><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag, msg)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(), StandardCharsets.UTF_8));<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelBack</span> <span class="hljs-operator">=</span> (consumerTag)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;取消接收 &quot;</span> + consumerTag);<br><br><span class="hljs-comment">// 接收消息</span><br>        channel.basicConsume(<span class="hljs-string">&quot;Q2&quot;</span>,<span class="hljs-literal">true</span>,ackBack,cancelBack);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、死信队列"><a href="#六、死信队列" class="headerlink" title="六、死信队列"></a>六、死信队列</h2><blockquote><p>由于某些原因<strong>导致 queue 中的某些消息无法被消费</strong>，且没有后续的处理，就变成了死信，有了死信就有了死信队列</p></blockquote><p><strong>应用场景：</strong></p><p>​为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息消费发生异常时，将消息投入死信队列中。还有比如说：用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</p><p><strong>死信的来源</strong></p><ul><li><p><strong>消息 TTL 过期</strong></p><p>TTL是Time To Live的缩写, 也就是生存时间</p></li><li><p><strong>队列达到最大长度</strong></p><p>队列满了，无法再添加数据到 mq 中</p></li><li><p><strong>消息被拒绝</strong></p><p>(basic.reject 或 basic.nack) 并且 requeue&#x3D;false</p></li></ul><h3 id="1-TTL死信"><a href="#1-TTL死信" class="headerlink" title="1. TTL死信"></a>1. TTL死信</h3><p><img src="https://s2.loli.net/2023/12/08/U3DicKPbvaAzJfR.png" alt="dead"></p><p><strong>消费者C1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer01</span> &#123;<br><br><span class="hljs-comment">// 普通交换机</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_exchange&quot;</span>;<br><span class="hljs-comment">// 死信交换机</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_exchange&quot;</span>;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;normal_queue&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br><span class="hljs-comment">// 声明交换机和队列</span><br>        channel.exchangeDeclare(NORMAL_EXCHANGE, <span class="hljs-string">&quot;direct&quot;</span>, <span class="hljs-literal">true</span>);<br>        channel.exchangeDeclare(DEAD_EXCHANGE, <span class="hljs-string">&quot;direct&quot;</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 配置普通队列</span><br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>        <span class="hljs-comment">// 设置RoutingKey</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        <span class="hljs-comment">// 过期时间(一般在发送消息时，设置过期时间)</span><br>        <span class="hljs-comment">//arguments.put(&quot;x-message-ttl&quot;, 10000);</span><br>        channel.queueDeclare(NORMAL_QUEUE,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br><br>        channel.queueDeclare(DEAD_QUEUE,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 绑定交换机与队列</span><br>        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="hljs-string">&quot;lisi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Consumer01 等待接收消息。。。。。&quot;</span>);<br><br><br><span class="hljs-comment">// 消息处理</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag, msg) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(),StandardCharsets.UTF_8);<br>                System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ msgs);<br>                channel.basicAck(msg.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>);<br>        &#125;;<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelBack</span> <span class="hljs-operator">=</span> (consumerTag)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;取消接收 &quot;</span> + consumerTag);<br><br>        <span class="hljs-comment">// 拒绝则要开启手动应答</span><br>        channel.basicConsume(NORMAL_QUEUE, <span class="hljs-literal">false</span>, ackBack, cancelBack);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者C2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer02</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dead_queue&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br>        System.out.println(<span class="hljs-string">&quot;Consumer02 等待接收消息。。。。。&quot;</span>);<br><br><br><span class="hljs-comment">// 消息处理</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag, msg)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(), StandardCharsets.UTF_8));<br><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelBack</span> <span class="hljs-operator">=</span> (consumerTag)<br>                -&gt; System.out.println(<span class="hljs-string">&quot;取消接收 &quot;</span> + consumerTag);<br><br>        channel.basicConsume(DEAD_QUEUE, <span class="hljs-literal">true</span>, ackBack, cancelBack);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitMQUtil.getChannel();<br>        <span class="hljs-comment">// 发送死信消息</span><br>        <span class="hljs-comment">// 设置TTL (ms)</span><br>        AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties()<br>                        .builder()<br>                        .expiration(<span class="hljs-string">&quot;10000&quot;</span>)<br>                        .build();<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;info &quot;</span>+ i;<br>            channel.basicPublish(NORMAL_EXCHANGE,<span class="hljs-string">&quot;zhangsan&quot;</span>,properties,msg.getBytes());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>先启动生产者，和C1，C2,创建队列与交换机</p><ul><li>10后，C1接收到所有消息</li></ul></li><li><p>将C1关闭，重启生产者</p><ul><li>10s后，C2接收到所有消息</li></ul><p><img src="https://s2.loli.net/2023/12/08/4WHQgP9zZfh3oyM.png" alt="ttl"></p></li></ul><h3 id="2-最大长度"><a href="#2-最大长度" class="headerlink" title="2. 最大长度"></a>2. 最大长度</h3><p><strong>添加最大长度属性</strong>，注意，修改属性需先删除原先的队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 设置最大长度</span><br>arguments.put(<span class="hljs-string">&quot;x-max-length&quot;</span>, <span class="hljs-number">6</span>);<br>channel.queueDeclare(NORMAL_QUEUE,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br></code></pre></td></tr></table></figure><ul><li><p>启动C1，C2，生产者，创建新队列</p><ul><li>此时，C1还是能接收到全部10条数据，因为处理速度快于堆积速度</li></ul></li><li><p>关闭C1，重启生产者</p><ul><li><p>此时，C2立即收到前四条数据</p><p><img src="https://s2.loli.net/2023/12/08/FI7y1uixfR5PVE3.png" alt="length"></p></li><li><p>10s后，接收到全部10条数据</p></li></ul></li></ul><h3 id="3-拒收消息"><a href="#3-拒收消息" class="headerlink" title="3. 拒收消息"></a>3. 拒收消息</h3><p><strong>在DeliverCallBack中添加拒收操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">ackBack</span> <span class="hljs-operator">=</span> (tag, msg) -&gt; &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(),StandardCharsets.UTF_8);<br>    <span class="hljs-keyword">if</span> (msgs.equals(<span class="hljs-string">&quot;info 5&quot;</span>)) &#123;<br>        <span class="hljs-comment">// 拒接消息</span><br>        System.out.println(<span class="hljs-string">&quot;拒接消息 &quot;</span>+msgs);<br>        <span class="hljs-comment">// 不放回原队列</span><br>        channel.basicReject(msg.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到消息 &quot;</span>+ msgs);<br>        channel.basicAck(msg.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>启动C1，C2，生产者<ul><li>拒收的消息被转发到死信队列，被C2接收</li></ul></li></ul><p><img src="https://s2.loli.net/2023/12/08/JEm6Pv8AyZQO9t7.png" alt="juj"></p><h2 id="七、整合SpringBoot"><a href="#七、整合SpringBoot" class="headerlink" title="七、整合SpringBoot"></a>七、整合SpringBoot</h2><p><strong>环境：</strong></p><ul><li>jdk8</li><li>spingboot 2.3.11.RELEASE</li></ul><p><strong>POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--RabbitMQ 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置文件YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">服务器IP地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;@123@&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="八、延时队列"><a href="#八、延时队列" class="headerlink" title="八、延时队列"></a>八、延时队列</h2><blockquote><p>延时队列就是用来存放，需要在指定时间被处理的元素的队列。</p></blockquote><p><strong>使用场景：</strong></p><ul><li><p>订单在十分钟之内未支付则自动取消 </p></li><li><p>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。 </p></li><li><p>用户注册成功后，如果三天内没有登陆则进行短信提醒。 </p></li><li><p>用户发起退款，如果三天内没有得到处理则通知相关运营人员。 </p></li><li><p>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</p></li></ul><p><img src="https://s2.loli.net/2023/12/08/cLQ8SrRpHiDCVb9.png" alt="yans"></p><h3 id="1-TTL属性"><a href="#1-TTL属性" class="headerlink" title="1. TTL属性"></a>1. TTL属性</h3><blockquote><p>TTL 是 RabbitMQ 中一个消息或者队列的属性，表明一条消息或者该队列中的所有消息的最大存活时间，单位是毫秒。</p><p>如果同时配置了队列的TTL 和消息的 TTL，那么较小的那个值将会被使用。</p></blockquote><p><strong>队列TTL与消息TTL</strong></p><ul><li><p>设置队列的 TTL 属性，一旦消息过期，就会被队列丢弃（如果配置了死信队列被丢到死信队列中）</p></li><li><p>设置消息TTL属性，消息即使过期，也<strong>不一定会被马上丢弃</strong>，<strong>因为消息是否过期是在即将投递到消费者之前判定的</strong>，<br>如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间；</p></li><li><p>注意，如果不设置 TTL，表示消息永远不会过期，<br>如果将 TTL 设置为 0，则表示除非此时<strong>可以直接投递</strong>该消息到消费者，否则该消息将会被丢弃</p></li></ul><h3 id="2-TTL队列"><a href="#2-TTL队列" class="headerlink" title="2. TTL队列"></a>2. TTL队列</h3><p>创建两个队列 QA 和 QB，两者队列 TTL 分别设置为 10S 和 40S，<br>然后在创建一个交换机 X 和死信交换机 Y，它们的类型都是direct，创建一个死信队列 QD</p><p><img src="https://s2.loli.net/2023/12/08/Cv826lGHnFQtZU5.png" alt="ttl2"></p><p><strong>编写配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TtlQueueConfig</span> &#123;<br><br>    <span class="hljs-comment">// 普通交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">X_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span>;<br>    <span class="hljs-comment">// 死信交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Y_DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>;<br>    <span class="hljs-comment">// 普通队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QA&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_B</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QB&quot;</span>;<br><br>    <span class="hljs-comment">// 死信对列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE_D</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;QD&quot;</span>;<br><br>    <span class="hljs-comment">// 声明交换机</span><br>    <span class="hljs-meta">@Bean(&quot;xExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">xExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(X_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;yExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">yExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(Y_DEAD_EXCHANGE);<br>    &#125;<br><br>    <span class="hljs-comment">// 声明队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueA&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueA</span><span class="hljs-params">()</span>&#123;<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置参数</span><br>        map.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_EXCHANGE);<br>        map.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(map).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;queueB&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueB</span><span class="hljs-params">()</span>&#123;<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置参数</span><br>        map.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_EXCHANGE);<br>        map.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">40000</span>);<br><br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_B).withArguments(map).build();<br>    &#125;<br><br><br>    <span class="hljs-comment">// 死信队列</span><br>    <span class="hljs-meta">@Bean(&quot;queueD&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(DEAD_QUEUE_D).build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ABX</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueABX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="hljs-string">&quot;XA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ABY</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueABY</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueA).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BBX</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBBX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="hljs-string">&quot;XB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BBY</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueBBY</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueB).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DBY</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueDBY</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>生产者</strong></p><p>生产者通过接口形式发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ttl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMsgController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMsg/&#123;msg&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span> &#123;<br>      log.info(<span class="hljs-string">&quot;当前时间: &#123;&#125; , 发送一条消息给两个TTL队列: &#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), msg);<br><br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XA&quot;</span>,<span class="hljs-string">&quot;消息来自ttl为10s的队列: &quot;</span> + msg);<br>      rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XB&quot;</span>,<span class="hljs-string">&quot;消息来自ttl为40s的队列: &quot;</span> + msg);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><p>消费者以接口形式接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLetterQueueConsumer</span> &#123;<br><br>    <span class="hljs-comment">// 接收消息</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;QD&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveD</span><span class="hljs-params">(Message message , Channel channel)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;, 接收死信队列消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>启动后发送Get请求</p><ul><li>消费者在规定的时间收到消息</li></ul><p><img src="https://s2.loli.net/2023/12/08/qXPVgOJzTYIWmv5.png" alt="ttl3"></p></li></ul><h3 id="3-TTL消息"><a href="#3-TTL消息" class="headerlink" title="3. TTL消息"></a>3. TTL消息</h3><blockquote><p>使用户发送自定义TTL属性的消息</p></blockquote><p><strong>增加队列 QC</strong></p><p><img src="https://s2.loli.net/2023/12/08/rStNVfyjuhmAPJF.png" alt="ttl4"></p><p><strong>在配置类中声明队列并绑定交换机</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean(&quot;queueC&quot;)</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queueC</span><span class="hljs-params">()</span>&#123;<br><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 设置参数</span><br>    map.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_EXCHANGE);<br>    map.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="hljs-string">&quot;YD&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> QueueBuilder.durable(QUEUE_C).withArguments(map).build();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CBX</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueCBX</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,</span><br><span class="hljs-params">                        <span class="hljs-meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="hljs-string">&quot;XC&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CBY</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">queueCBY</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,</span><br><span class="hljs-params">                        <span class="hljs-meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(queueC).to(yExchange).with(<span class="hljs-string">&quot;YD&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>生产者，添加接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/sendMsg/&#123;msg&#125;/&#123;ttl&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;msg&quot;)</span> String msg , <span class="hljs-meta">@PathVariable(&quot;ttl&quot;)</span> String ttl)</span> &#123;<br>    <br>  log.info(<span class="hljs-string">&quot;当前时间: &#123;&#125; , 发送一条ttl: &#123;&#125; ms 消息给通用TTL队列: &#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),ttl, msg);<br>  rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;XC&quot;</span>,<span class="hljs-string">&quot;消息来自通用ttl队列&quot;</span>,m -&gt; &#123;<br>      <span class="hljs-comment">// 设置消息属性</span><br>      m.getMessageProperties().setExpiration(ttl);<br>      <span class="hljs-keyword">return</span> m;<br>  &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但此方法有很大的问题</strong></p><p><strong>这就是介绍过的，在消息属性上设置 TTL 的方式，消息可能并不会按时“死亡“</strong></p><p>因为 RabbitMQ 只会检查第一个消息是否过期，如果过期则丢到死信队列，<br>如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行。</p><p><img src="https://s2.loli.net/2023/12/08/RjyvF8KIGw2qH7i.png" alt="ttl5"></p><h3 id="4-插件实现延迟队列"><a href="#4-插件实现延迟队列" class="headerlink" title="4. 插件实现延迟队列"></a>4. 插件实现延迟队列</h3><ul><li><a href="https://www.rabbitmq.com/community-plugins.html">官网下载 </a><strong>rabbitmq_delayed_message_exchange</strong> 插件，放置到 RabbitMQ 的插件目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装</span><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_delayed_message_exchange<br><span class="hljs-comment">#重启服务</span><br>systemctl restart rabbitmq-server<br></code></pre></td></tr></table></figure><p>安装成功后在Web端可以看到，交换机多了一个属性</p><p><img src="https://s2.loli.net/2023/12/08/ofUgOPHN1xFhQw4.png" alt="cjttl"></p><ul><li>这是一种新的交换类型，该类型消息支持延迟投递机制消息传递后并<strong>不会立即投递</strong>到目标队列中，<br>而是存储在 mnesia(一个分布式数据系统)表中，<strong>当达到投递时间时，才投递到目标队列中</strong>。</li></ul><p><strong>创建一个示例</strong></p><p><img src="https://s2.loli.net/2023/12/08/81zoxfGEUhNPq3W.png" alt="dlq"></p><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedQueueConfig</span> &#123;<br><br>    <span class="hljs-comment">// 队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.queue&quot;</span>;<br>    <span class="hljs-comment">// 交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.exchange&quot;</span>;<br>    <span class="hljs-comment">// routingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAYED_ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delayed.routingkey&quot;</span>;<br><br>    <span class="hljs-comment">// 声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayedExchange</span><span class="hljs-params">()</span>&#123;<br><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(DELAYED_EXCHANGE_NAME, <span class="hljs-string">&quot;x-delayed-message&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, map);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayedQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DELAYED_QUEUE_NAME);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayQueueBD</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue delayedQueue ,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Qualifier(&quot;delayedExchange&quot;)</span> CustomExchange delayedExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>生产者新接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/sendDelayMsg/&#123;msg&#125;/&#123;delay&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;msg&quot;)</span> String msg , <span class="hljs-meta">@PathVariable(&quot;delay&quot;)</span> Integer delay)</span> &#123;<br>  <br>  log.info(<span class="hljs-string">&quot;当前时间: &#123;&#125; , 发送一条ttl: &#123;&#125; ms 消息给TTL队列: &#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),delay, msg);<br><br>  rabbitTemplate.convertAndSend(DELAYED_EXCHANGE_NAME,DELAYED_ROUTING_KEY,<span class="hljs-string">&quot;消息来自通用ttl队列&quot;</span>,m -&gt; &#123;<br>      <span class="hljs-comment">// 设置消息属性</span><br>      m.getMessageProperties().setDelay(delay);<br>      <span class="hljs-keyword">return</span> m;<br>  &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayQueueConsumer</span> &#123;<br><br>    <span class="hljs-comment">// 接收消息</span><br>    <span class="hljs-meta">@RabbitListener(queues = DELAYED_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveD</span><span class="hljs-params">(Message message , Channel channel)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间：&#123;&#125;, 接收延迟队列消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>启动测试</p><p><img src="https://s2.loli.net/2023/12/08/knYe76sEdhaVRBN.png" alt="dlq2"></p><ul><li>第二条消息先消费，延时成功</li></ul></li></ul><h2 id="九、发布确认高级"><a href="#九、发布确认高级" class="headerlink" title="九、发布确认高级"></a>九、发布确认高级</h2><blockquote><p>解决因某原因导致 RabbitMQ 重启，在 RabbitMQ 重启期间生产者消息投递失败， 导致消息丢失，需要手动处理和恢复的问题</p></blockquote><p><strong>方案结构图</strong></p><p><img src="https://s2.loli.net/2023/12/09/ihJgXGnQOUjlco8.png" alt="confirmSB"></p><p><img src="https://s2.loli.net/2023/12/09/yDZCUQ1XfHoWiVu.png" alt="confirmSB2"></p><h3 id="1-整合SpringBoot"><a href="#1-整合SpringBoot" class="headerlink" title="1. 整合SpringBoot"></a>1. 整合SpringBoot</h3><p><strong>添加配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-comment"># 开启发布确认</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span><br></code></pre></td></tr></table></figure><ul><li><p><code>NONE</code>： 禁用发布确认模式（默认）</p></li><li><p><code>CORRELATED</code> ：发布消息成功到交换器后会触发回调方法</p></li><li><p><code>SIMPLE</code> ：有两种效果</p><ol><li><p>和 <code>CORRELATED</code> 值一样会触发回调方法</p></li><li><p>在发布消息成功后使用 <code>rabbitTemplate</code> 调用 <code>waitForConfirms</code> 或 <code>waitForConfirmsOrDie</code> 方法<br>等待 <code>broker</code> 节点返回发送结果，根据返回结果来判定下一步的逻辑，<br><strong>注意</strong>： <code>waitForConfirmsOrDie</code> 方法如果返回 <code>false</code> 会关闭 <code>channel</code>，接下来无法发送消息到 <code>broker</code></p></li></ol></li></ul><p><strong>新增配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConfig</span> &#123;<br><br>    <span class="hljs-comment">// 交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_exchange&quot;</span>;<br>    <span class="hljs-comment">// 队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_queue&quot;</span>;<br>    <span class="hljs-comment">// routingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br><br>    <span class="hljs-comment">// 声明确认交换机</span><br>    <span class="hljs-meta">@Bean(&quot;confirmExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">confirmExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(CONFIRM_EXCHANGE_NAME);<br>    &#125;<br><br>    <span class="hljs-comment">// 声明确认队列</span><br>    <span class="hljs-meta">@Bean(&quot;confirmQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">confirmQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue ,</span><br><span class="hljs-params">                           <span class="hljs-meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现生产者回调接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此类注入到rabbitTemplate中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换机确认回调方法</span><br><span class="hljs-comment">     * 1.接收成功，回调</span><br><span class="hljs-comment">     *  1.1 correlationDate 保存了回调消息的信息</span><br><span class="hljs-comment">     *  1.2 交换机接收到消息 ack = true</span><br><span class="hljs-comment">     *  1.3 cause Null</span><br><span class="hljs-comment">     * 2.接收失败，回调</span><br><span class="hljs-comment">     *  2.1 correlationDate 保存了回调消息的信息</span><br><span class="hljs-comment">     *  2.2 交换机接收到消息 ack = false</span><br><span class="hljs-comment">     *  2.3 cause 失败的原因</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> correlationData != <span class="hljs-literal">null</span> ? correlationData.getId() : <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (ack)&#123;<br>            log.info(<span class="hljs-string">&quot;交换机接收到Id为：&#123;&#125; 的消息&quot;</span>,id);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;交换机接收Id为：&#123;&#125; 的消息失败，失败原因：&#123;&#125;&quot;</span>,id,cause);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@PostConstruct</code>：注解的含义与用法</p><ul><li>注解允许在 bean 的构造函数之后和 bean 的属性设置之后执行初始化逻辑。   </li><li>注解可以应用于任何类型的 bean，包括普通 bean、单例 bean 和原型 bean。</li><li>注解不能应用于接口、枚举类型或静态方法。   </li><li>注解的方法必须是 public 方法，并且不能有任何参数。</li><li>注解的方法可以抛出任何异常。</li></ul><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/confirm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMsg/&#123;msg&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;msg&quot;)</span> String message)</span> &#123;<br>        <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        rabbitTemplate.convertAndSend(CONFIRM_EXCHANGE_NAME,CONFIRM_ROUTING_KEY,message,correlationData);<br>        log.info(<span class="hljs-string">&quot;发送消息: &#123;&#125;&quot;</span>,message);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConsumer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = CONFIRM_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveConfirmMsg</span><span class="hljs-params">(Message message)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;接收到队列confirm.queue的消息：&#123;&#125;&quot;</span>,message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动</strong></p><ul><li>正常情况下消息成功接收</li></ul><p><img src="https://s2.loli.net/2023/12/09/YTDgXoOn8Vhy4ZE.png" alt="confirmMsg"></p><ul><li>修改Key的值，则消息无法匹配到队列，会被直接丢弃</li></ul><p><img src="https://s2.loli.net/2023/12/09/mAyGaoPu2ZEr5Sj.png" alt="confirmMsg2"></p><p><strong>注意</strong>：此时丢弃的消息交换机不知道，需要告诉生产者消息接收失败</p><h3 id="2-回退消息"><a href="#2-回退消息" class="headerlink" title="2. 回退消息"></a>2. 回退消息</h3><blockquote><p>设置回退消息，可以在当消息传递过程中不可达目的地时将消息返回给生产者</p></blockquote><p><strong>增加配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-comment"># 开启回退消息</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p><strong>在回调方法中实现回退接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback,RabbitTemplate.ReturnCallback &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此类注入到rabbitTemplate中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>        rabbitTemplate.setReturnCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换机确认回调方法</span><br><span class="hljs-comment">     * 1.接收成功，回调</span><br><span class="hljs-comment">     *  1.1 correlationDate 保存了回调消息的信息</span><br><span class="hljs-comment">     *  1.2 交换机接收到消息 ack = true</span><br><span class="hljs-comment">     *  1.3 cause Null</span><br><span class="hljs-comment">     * 2.接收失败，回调</span><br><span class="hljs-comment">     *  2.1 correlationDate 保存了回调消息的信息</span><br><span class="hljs-comment">     *  2.2 交换机接收到消息 ack = false</span><br><span class="hljs-comment">     *  2.3 cause 失败的原因</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> correlationData != <span class="hljs-literal">null</span> ? correlationData.getId() : <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (ack)&#123;<br>            log.info(<span class="hljs-string">&quot;交换机接收到Id为：&#123;&#125; 的消息&quot;</span>,id);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;交换机接收Id为：&#123;&#125; 的消息失败，失败原因：&#123;&#125;&quot;</span>,id,cause);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回消息回调</span><br><span class="hljs-comment">     * 只有在消息不可达目的地时 才可进行回退</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message    the 返回的消息。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> replyCode  the 回复代码。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> replyText  the 回复文本。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange   the 交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> routingKey the routing key.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(Message message, <span class="hljs-type">int</span> replyCode, </span><br><span class="hljs-params">                                String replyText, String exchange, String routingKey)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;消息：&#123;&#125; 被交换机：&#123;&#125; 退回, 原因：&#123;&#125;，路由键：&#123;&#125;&quot;</span>,<br>                 message.getBody(),replyText,exchange,routingKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动</strong></p><p><img src="https://s2.loli.net/2023/12/09/AhODwc2vXM8BFng.png" alt="confirmMsg3"></p><p>可以看到消息被退回</p><h3 id="3-备份交换机"><a href="#3-备份交换机" class="headerlink" title="3. 备份交换机"></a>3. 备份交换机</h3><blockquote><p>当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由备份交换机来进行转发和处理</p></blockquote><p>通常备份交换机的类型为 <code>Fanout</code> ，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定一个队列，<br>所有无法被路由的消息，都进入这个队列，还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p><p><strong>简单结构</strong></p><p><img src="https://s2.loli.net/2023/12/09/njlwGQtFiXOIWuH.png" alt="backup"></p><p><strong>修改配置类</strong></p><blockquote><p>注意：修改已存在交换机配置需要将已存在的交换机删除</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmConfig</span> &#123;<br><br>    <span class="hljs-comment">// 交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_exchange&quot;</span>;<br>    <span class="hljs-comment">// 队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm_queue&quot;</span>;<br>    <span class="hljs-comment">// routingKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIRM_ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br><br>    <span class="hljs-comment">// 备份交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKUP_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backup_exchange&quot;</span>;<br>    <span class="hljs-comment">// 备份队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKUP_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backup_queue&quot;</span>;<br>    <span class="hljs-comment">// 报警队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WARNING_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;warning_queue&quot;</span>;<br><br>    <span class="hljs-comment">// 声明确认交换机</span><br>    <span class="hljs-meta">@Bean(&quot;confirmExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">confirmExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME)<br>                .durable(<span class="hljs-literal">true</span>)<br>            <span class="hljs-comment">// 设置备份交换机</span><br>                .withArgument(<span class="hljs-string">&quot;alternate-exchange&quot;</span>,BACKUP_EXCHANGE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 声明确认队列</span><br>    <span class="hljs-meta">@Bean(&quot;confirmQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">confirmQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue ,</span><br><span class="hljs-params">                           <span class="hljs-meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);<br>    &#125;<br><br>    <span class="hljs-comment">// 声明备份交换机</span><br>    <span class="hljs-meta">@Bean(&quot;backupExchange&quot;)</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">backupExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(BACKUP_EXCHANGE_NAME);<br>    &#125;<br><br>    <span class="hljs-comment">// 声明备份队列</span><br>    <span class="hljs-meta">@Bean(&quot;backupQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">backupQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(BACKUP_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 声明警告队列</span><br>    <span class="hljs-meta">@Bean(&quot;warningQueue&quot;)</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">warningQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(WARNING_QUEUE_NAME).build();<br>    &#125;<br><br>    <span class="hljs-comment">// 绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">BBB</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;backupQueue&quot;)</span> Queue backupQueue ,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(backupQueue).to(backupExchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">WBB</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;warningQueue&quot;)</span> Queue warningQueue ,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(warningQueue).to(backupExchange);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>报警消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningConsumer</span> &#123;<br><br>    <span class="hljs-comment">// 接收报警信息</span><br>    <span class="hljs-meta">@RabbitListener(queues = WARNING_QUEUE_NAME)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[WARNING] Unreceived &#x27;&#123;&#125;&#x27;&quot;</span>, message.getBytes(StandardCharsets.UTF_8));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动</strong></p><p><img src="https://s2.loli.net/2023/12/09/msbpa5Z2CgGQhYS.png" alt="warm"></p><p>消息成功被报警消费者接收</p><p><strong>注意：此处消息没有触发回退</strong></p><ul><li>因为当回退，和备份同时设置时，备份的优先级更高</li></ul><h2 id="十、其他性质"><a href="#十、其他性质" class="headerlink" title="十、其他性质"></a>十、其他性质</h2><h3 id="1-幂等性"><a href="#1-幂等性" class="headerlink" title="1. 幂等性"></a>1. 幂等性</h3><blockquote><p>对于同一操作发起的一次请求或者多次请求的结果是一致的</p></blockquote><p> <strong>例如支付操作：</strong></p><ul><li>用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常</li><li>用户再次点击按钮，此时会进行第二次扣款。</li></ul><p><strong>消息重复消费</strong></p><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给 MQ 返回 ack 时网络中断， 故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p><p><strong>解决思路</strong></p><p>MQ 消费者的幂等性的解决一般使用<strong>全局 ID</strong> ，<strong>每次消费消息时用该 id 先判断该消息是否已消费过。</strong></p><p>主流的幂等性有两种操作:</p><ul><li><p>唯一 ID+指纹码机制,利用数据库主键去重</p><p>指纹码：<strong>唯一信息码</strong>,一般都是由我们的业务规则拼接而来，然后利用查询语句进行判断这个 id 是否存在数据库中<br>优势： 实现简单就一个拼接，然后查询判断是否重复；<br>劣势： 在高并发时，增大数据库的压力</p></li><li><p>利用 redis 的原子性去实现</p><p>利用 redis 执行 setnx 命令，天然具有幂等性</p></li></ul><h3 id="2-优先级队列"><a href="#2-优先级队列" class="headerlink" title="2. 优先级队列"></a>2. 优先级队列</h3><blockquote><p>优先处理某些订单</p></blockquote><ul><li><strong>Web控制台添加属性</strong></li></ul><p><img src="https://s2.loli.net/2023/12/09/2tMuDId8KiyTwnx.png" alt="youxain"></p><ul><li><strong>声明队列时添加优先级</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>params.put(<span class="hljs-string">&quot;x-max-priority&quot;</span>, <span class="hljs-number">10</span>);<br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br></code></pre></td></tr></table></figure><ul><li><strong>发送消息添加优先级</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().priority(<span class="hljs-number">10</span>).build();<br></code></pre></td></tr></table></figure><p><strong>前提条件：</strong></p><ul><li>队列需要设置为优先级队列</li><li>消息需要设置消息的优先级</li><li>消费者需要等待消息已经发送到队列中才去消费，因为这样才有机会对消息进行排序</li></ul><h3 id="3-惰性队列"><a href="#3-惰性队列" class="headerlink" title="3. 惰性队列"></a>3. 惰性队列</h3><blockquote><p>惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中去</p></blockquote><ul><li><strong>背景原因</strong></li></ul><p>它的一个重要的设计目标是能够支持更长的队列，即<strong>支持更多的消息存储</strong>。<br>当消费者由于各种各样的原因而致使长时间内不能消费消息<strong>造成堆积时</strong>，惰性队列就很有必要了</p><p>默认情况下，当生产者发送消息时，队列中的消息存储在内存之中，可以更快的将消息发送给消费者。<br>即使是持久化的消息，被写入磁盘的时也会在内存中留一份备份。<br>当RabbitMQ <strong>需要释放内存时</strong>，会将内存中的消息换页至磁盘中，操作时间较长<strong>会阻塞队列的操作</strong>，导致无法接收新的消息</p><p><strong>队列的两种模式</strong>：<code>default 和 lazy。</code></p><ul><li><p>默认的为<code>default</code> 模式</p></li><li><p><code>lazy</code> 模式即为惰性队列的模式，可以通过调用 <code>channel.queueDeclare</code> 方法的时候在参数中设置，或通过 <code>Policy</code> 的方式设置，<br>如果队列同时使用这两种方式设置，<code>Policy</code> 方式优先级更高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>args.put(<span class="hljs-string">&quot;x-queue-mode&quot;</span>, <span class="hljs-string">&quot;lazy&quot;</span>);<br>channel.queueDeclare(<span class="hljs-string">&quot;myqueue&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, args);<br></code></pre></td></tr></table></figure></li><li><p><strong>占用内存比较</strong></p></li></ul><p><img src="https://s2.loli.net/2023/12/09/O1MVzaZX9Np2HRt.png" alt="lazy"></p><p><strong>在发送 1 百万条消息时，每条消息大概占 1KB 的情况下，普通队列占用内存是 1.2GB，而惰性队列仅仅 占用 1.5MB</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2023/12/11/Linux/"/>
    <url>/2023/12/11/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-CentOS"><a href="#Linux-CentOS" class="headerlink" title="Linux-CentOS"></a><u>Linux-CentOS</u></h1><hr><h2 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h2><h3 id="1-网络连接的三种模式"><a href="#1-网络连接的三种模式" class="headerlink" title="1.网络连接的三种模式"></a>1.网络连接的三种模式</h3><ol><li><p>桥接模式</p><blockquote><p>虚拟机能和外部网络通信，但是容易造成IP冲突</p><p>因为：桥接模式下，虚拟机生成与主机网络在同一网段下的IP</p></blockquote></li><li><p>NAT模式</p><blockquote><p>网络地址转换模式</p><p>虚拟机能与外部通信</p><p>不会引起IP冲突</p></blockquote><img src="https://s2.loli.net/2023/11/02/3Y7CTpAkERxL1rQ.png" alt="nat" style="zoom: 50%;" /></li><li><p>主机模式</p><blockquote><p>独立的系统</p></blockquote><img src="https://s2.loli.net/2023/11/02/bIl3vr6u7ZXRKse.png" alt="netImg" style="zoom:50%;" /></li></ol><h3 id="2-Linux的目录结构"><a href="#2-Linux的目录结构" class="headerlink" title="2. Linux的目录结构"></a>2. Linux的目录结构</h3><p>Linux目录由  <strong><code>/</code></strong>  开始，向下发展分支</p><p><img src="https://s2.loli.net/2023/11/02/iqMjACp1kFRohEZ.png" alt="linuxMenu"></p><ul><li><strong>&#x2F;bin</strong> 【常用】：（&#x2F;usr&#x2F;bin , &#x2F;user&#x2F;local&#x2F;bin）, 是<strong>Binary</strong>的缩写，用来存放最经常使用的命令</li><li><strong>&#x2F;sbin</strong> ：（&#x2F;usr&#x2F;sbin , &#x2F;usr&#x2F;local&#x2F;sbin）, s 就是 Super User 存放系统管理员使用的系统管理程序</li><li><strong>&#x2F;home</strong> 【常用】: 存放普通用户的主目录，在Linux 中每个用户都有自己的目录</li><li><strong>&#x2F;root</strong> 【常用】：系统管理员的主目录</li><li><strong>&#x2F;lib</strong> :系统所需的最基本的动态连接共享库 ， 其作用类似于Window 里的DLL文件，几乎所有的应用程序都需要使用到</li><li><strong>&#x2F;lost + found</strong> : 这个目录一般是空的，当系统非法关机后，就存放了一些文件</li><li><strong>&#x2F;etc</strong> 【常用】：所有系统管理所需要的配置文件和子目录</li><li><strong>&#x2F;usr</strong> 【常用】：非常重要的目录，用户的很多应用程序和文件都放在此处，类似于win中的program files</li><li><strong>&#x2F;boot</strong> 【常用】：存放启动Linux时使用的核心文件，包括连接和镜像文件</li><li><strong>&#x2F;proc</strong> 【不能动】：是一个虚拟目录。他是系统内存的映射，访问这个目录来获取系统信息</li><li><strong>&#x2F;srv</strong> 【不能动】：service 的缩写，该目录存放一些服务启动之后需要提取的数据</li><li><strong>&#x2F;sys</strong> 【不能动】: 这是Linux 2.6内核的一个很大变化，安装了2.6内核中新出现的一个文件系统sysfs</li><li><strong>&#x2F;tmp</strong> : 存放临时文件</li><li><strong>&#x2F;dev</strong> : 类似于win中的设备管理器，把所有的硬件用文件的形式存储</li><li><strong>&#x2F;media</strong> 【常用】：Linux 系统会自动识别一些设备，例如U盘，识别后会把设备挂载到这个目录下</li><li><strong>&#x2F;mnt</strong> 【常用】：该目录让用户临时挂载别的文件系统，可以将外部存储挂载在&#x2F;mnt&#x2F;上，进入目录就能查看内容，例如共享文件夹</li><li><strong>&#x2F;opt</strong> ：给主机额外安装软件的目录</li><li><strong>&#x2F;usr&#x2F;local</strong> 【常用】：这是另一个给主机安装软件的目录，一般是通过编译源码的方式安装的程序</li><li><strong>&#x2F;var</strong> 【常用】：这个目录存放着在不断扩充的东西 ， 习惯将经常被修改的目录放在这个目录下，包括日志文件</li><li><strong>&#x2F;selinux [security-enhanced linux]</strong> : SE-Linux 是一种安全子系统，能控制程序只能访问特定文件，有三种工作模式可以自行设置</li></ul><h3 id="3-vi与vim"><a href="#3-vi与vim" class="headerlink" title="3. vi与vim"></a>3. vi与vim</h3><p><strong>三种模式</strong>：</p><ul><li><p>正常模式</p><blockquote><p>刚进入vi &#x2F; vim 的状态</p><p>在任何模式下输入esc 将进入正常模式</p></blockquote></li><li><p>插入模式</p><blockquote><p>在正常模式下输入  ，i , o , a , r进入</p></blockquote></li><li><p>命令行模式</p><blockquote><p>正常模式下输入 &#x2F; 或者 :</p></blockquote></li></ul><p><u>常用快捷键</u></p><ol><li><strong><code>yy</code></strong> : 复制当前行，例如 5yy 复制光标以下5行，配合粘贴 <strong><code>p</code></strong> 使用</li><li><strong><code>dd</code></strong> ：删除当前行，5dd 删除光标以下5行</li><li><strong><code>/内容</code></strong> ：查找文件中的对应内容，输入<strong>n</strong> 就是查找下一个</li><li><strong><code>:set nu 与 :set nonu</code></strong> : 显示文件的行号，取消显示</li><li>**<code>G 与 gg</code>**：移动光标到文件末尾，首行</li><li>**<code>u</code>**：撤销上一个操作，类似于win中的CTRL+ Z</li><li><strong><code>行号 + shift + g</code></strong> : 将光标跳转到该行</li></ol><img src="https://s2.loli.net/2023/11/02/oZpHywznP3WeV8E.png" alt="vi&vim" style="zoom: 67%;" /><h3 id="4-关机-重启-运行"><a href="#4-关机-重启-运行" class="headerlink" title="4. 关机 &amp; 重启 &amp; 运行"></a>4. 关机 &amp; 重启 &amp; 运行</h3><p>基本命令：</p><ul><li><code>shutdown -h  now</code>  立刻关机</li><li><code>shutdown -h 1</code>         会给当前访问虚拟机的所有用户发送这一条消息通知一分钟后将关机</li><li><code>shutdown -r now</code>     立即重启</li><li><code>halt </code>                           关机，作用同上</li><li><code>reboot</code>                        立即重启</li><li><code>sync</code>                            把内存的数据同步到磁盘</li></ul><p><strong>注：无论重启或关闭系统，首先要运行sync命令防止数据丢失</strong></p><p><strong>注：目前的shutdown&#x2F;reboot&#x2F;halt 等命令在关机前进行了 sync ，但最好每次都先执行 sync</strong></p><p><strong>运行级别</strong></p><ol><li><p>运行级别种类</p><ul><li>0：关机</li><li>1：单用户【找回密码】</li><li>2：多用户没有网络服务</li><li>3：多用户有网络服务</li><li>4：系统未使用保留给用户</li><li>5：图形界面</li><li>6：系统重启</li></ul><p>可以使用 <code>init[num]</code> 来切换运行级别。</p></li><li><p>设置默认运行级别</p><ul><li><code>systemctl get-default</code>：查看当前默认运行级别</li><li><code>systemctl set-default TARGET.target</code>：设置默认运行级别<ul><li>multi-user.target : 3</li><li>graphical.target ：5</li></ul></li></ul></li></ol><h3 id="5-用户登录与注销"><a href="#5-用户登录与注销" class="headerlink" title="5. 用户登录与注销"></a>5. 用户登录与注销</h3><p><strong>注意事项</strong>：</p><ul><li>登录时尽量少用root账号避免操作失误</li><li>用 <code>su - 用户名</code> 切换账户</li><li>用<code>logout</code>来注销用户</li></ul><h3 id="6-帮助指令"><a href="#6-帮助指令" class="headerlink" title="6. 帮助指令"></a>6. 帮助指令</h3><ul><li><code>main [命令或配置文件]</code>：获取帮助信息，例如：main ls , 查看ls的帮助信息</li><li><code>help [命令]</code>：获取shell内置命令的帮助信息</li></ul><h2 id="二、用户管理"><a href="#二、用户管理" class="headerlink" title="二、用户管理"></a>二、用户管理</h2><h3 id="1-账号增删"><a href="#1-账号增删" class="headerlink" title="1. 账号增删"></a>1. 账号增删</h3><p><strong>添加账户</strong></p><ul><li><code>useradd 用户名</code></li><li><code>useradd -d 指定目录 用户名</code> ： 给新用户指定home目录</li><li><code>passwd 用户名</code>：设置&#x2F;修改 密码</li><li><code>whoami</code>：查看当前用户</li></ul><p><strong>删除用户</strong></p><ul><li><code>userdel 用户名</code> ： 删除用户，保留home目录（建议使用）</li><li><code>userdel -r 用户名</code> ： 删除用户及home目录</li></ul><h3 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2. 用户组"></a>2. 用户组</h3><p><strong>对类似的有共性的多个用户进行同一管理</strong></p><p><u>当用户没有指定的组时，该用户的用户组就是他自己</u></p><ul><li><code>groupadd 组名</code> ：新增组</li><li><code>groupdel 组名</code> ：删除组</li><li><code>useradd -g 用户组 用户名</code>：增加用户时直接加上组</li><li><code>usermod -g 用户组 用户名</code>：修改用户组</li></ul><p><strong>用户组相关文件</strong></p><ul><li><p><code>/etc/passwd</code> ：用户（user）的配置文件，记录各种信息</p><blockquote><p>每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录Shell</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/8UCfhAmlOJZDo95.png" alt="etcPassword"></p></li><li><p><code>/etc/shadow</code>：口令配置文件</p><blockquote><p>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/dxqMtOUyTCKcAsJ.png" alt="etcShadow"></p></li><li><p><code>/etc/group</code>：组的配置文件，记录Linux包含的组的信息</p><blockquote><p>每行的含义：组名：口令：组标识号：组内用户列表</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/xy4Yc1sI98P5WuE.png" alt="etcGroup"></p></li></ul><h3 id="3-找回root密码"><a href="#3-找回root密码" class="headerlink" title="3. 找回root密码"></a>3. 找回root密码</h3><ol><li>启动系统，进入开机界面，按方向键移动高亮条，选中第一个，按 <code>e</code> 进入编辑界面</li></ol><img src="https://s2.loli.net/2023/11/02/RpsGcrwv5t8fIai.png" alt="backpd" style="zoom:50%;" /><ol start="2"><li>将光标移动至 <code>linux16</code>开头的行的结尾，输入 <code>init=/bin/sh</code> 后按 <code>ctrl + x</code> 启动虚拟机，进入单用户模式（1）</li></ol><img src="https://s2.loli.net/2023/11/02/RUim3q8p5OIyb6L.png" alt="back2" style="zoom: 67%;" /><ol start="3"><li><p>在光标处输入：<code>mount -o remount,rw /</code> 后按回车键<code>Enter</code></p></li><li><p>在新的一行输入passwd，回车后输入新密码，再次输入密码确认，密码修改成功！</p></li></ol><p><img src="https://s2.loli.net/2023/11/02/stuNXZmP296Kozb.png" alt="back3"></p><ol start="5"><li>继续输入 <code>touch /.autorelabel</code> 回车后 继续输入 <code>exec /sbin/init</code> 回车后稍等片刻，系统将会自动重启，密码修改生效！</li></ol><p><img src="https://s2.loli.net/2023/11/02/dJhfaWNyVe8qprA.png" alt="back4"></p><h2 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h2><h3 id="1-文件目录"><a href="#1-文件目录" class="headerlink" title="1. 文件目录"></a>1. 文件目录</h3><ul><li><p><code>pwd</code>：显示前工作目录的绝对路径</p></li><li><p><code>ls[选项][目录或文件]</code> ：选项可以组合使用，例如: -la 顺序不影响。</p><ul><li><code>-a</code>：显示目录所有的文件和目录，包括隐藏的</li><li><code>-l</code>：已列表形式显示信息</li></ul></li><li><p><code>cd [参数]</code>：切换到指定目录，注意参数是 绝对路径 或 相对路径</p><ul><li><code>~ 或 无参</code>：回到自己的家目录</li><li><code>..</code>：回到该目录的上一级目录</li></ul><p><strong>例如：</strong></p><blockquote><p>当前目录为：&#x2F;home&#x2F;user1</p><p>使用相对路径切换到 &#x2F;root 目录</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../../root<br></code></pre></td></tr></table></figure><ul><li><p><code>mkdir [选项] 要创建的目录</code>：创建目录</p><ul><li><code>-p</code>：创建多级目录</li></ul></li><li><p><code>rmdir [选项] 要删除的空目录</code>：删除空目录</p></li><li><p><code>rm [选项] 要删除的文件或目录</code>：移除文件或目录</p><ul><li><code>-r</code>：递归删除整个文件夹</li><li><code>-f</code>：强制删除不提示</li></ul></li><li><p><code>touch 文件名</code>：创建空文件</p></li><li><p><code>cp [选项] 指定文件 指定目录</code>：将文件复制到指定目录</p><ul><li><code>-r</code>：递归复制整个文件夹</li><li><code>\cp</code>：如指定文件夹有同名文件，此命令则强制覆盖不提示</li></ul></li><li><p><code>mv</code>：移动文件与目录 或 重命名</p><ul><li><code>mv 原文件名 新文件名</code>：重命名文件</li><li><code>mv 原文件路径 指定路径</code>：移动文件</li></ul></li><li><p><code>cat [选项] 文件</code>：查看文件内容</p><ul><li><code>-n</code>：显示行号</li></ul><blockquote><p>cat 可与  <code>|</code> 管道命令组合使用 </p><p>以下表示将管道符前的命令结果交给管道符后的命令处理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/profile | more<br></code></pre></td></tr></table></figure><p><code>more</code>指令的交互操作：</p><img src="https://s2.loli.net/2023/11/02/Hi74C6NfD8KsjqG.png" alt="管道符" style="zoom:67%;" /></li><li><p><code>less 文件</code>：查看文件内容，但并不是一次性将文件加载后显示，而是根据需要加载的内容</p><img src="https://s2.loli.net/2023/11/02/k2E39XhbPLf5pvJ.png" alt="less" style="zoom:67%;" /></li><li><p><code>echo [选项] [输出内容]</code>：将内容输出到控制台</p></li><li><p><code>head [选项] 文件</code>：显示文件的开头部分内容，默认显示前十行</p><ul><li><code>-n 数字</code>：查看文件前n行</li></ul></li><li><p><code>tail [选项] 文件</code>：显示文件的结尾内容，默认显示后十行</p><ul><li><code>-n 数字</code>：查看文件的后n行</li><li><code>-f</code> ：实时追踪文件的所有更新</li></ul></li><li><p><code>&gt; 与 &gt;&gt;</code>：</p><ul><li><code>内容 &gt; 文件</code>：输出重定向，将内容覆盖写入文件中</li><li><code>内容 &gt;&gt; 文件</code>：追加，将内容追加写入文件末尾</li></ul></li><li><p><code>ln -s 原文件或目录 软连接名</code>：给文件创建一个软连接（类似于win的快捷方式）</p><ul><li>删除软连接则当成文件删除</li></ul></li><li><p><code>history [数字]</code>：查看执行过的指令，输入数字n，则显示最近n条</p><ul><li><code>!n</code>：执行历史中编号为 n 的指令</li></ul></li></ul><h3 id="2-时间日期"><a href="#2-时间日期" class="headerlink" title="2. 时间日期"></a>2. 时间日期</h3><ul><li><code>date [选项]</code>：显示当前日期<ul><li><code>-s &quot;yyyy-MM-dd HH:mm:ss&quot; </code>：设置系统当前时间</li><li><code>+%Y</code>：显示年份</li><li><code>+%m</code>：显示月份</li><li><code>+%d</code>：显示当前一天</li><li><code>&quot;+%Y-%m-%d %H:%M:%S&quot;</code>：显示年月十分秒</li></ul></li><li><code>cal [年份]</code>：显示日历，默认显示当前月份<ul><li><code>cal 2023</code>：显示2023年所有月份的日历</li></ul></li></ul><h3 id="3-搜索查找类"><a href="#3-搜索查找类" class="headerlink" title="3. 搜索查找类"></a>3. 搜索查找类</h3><ul><li><p><code>find [搜索范围] [选项]</code>：该指令将从指定目录向下递归的遍历其各个子目录，将满足条件的文件或目录显示在终端</p><ul><li><p><code>-name</code>：按照指定文件名查找文件</p></li><li><p><code>-user</code>：查找属于指定用户名所有文件</p></li><li><p><code>-size</code>：按照指定文件大小查找文件</p><ul><li><code>+n</code>：大于</li><li><code>-n</code>：小于</li><li><code>n</code>：等于</li></ul><p><strong>例如</strong>：  查找整个系统下大于20k 的文件 单位：k ， M ， G</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find / -size +<span class="hljs-number">20</span>k <br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>locate 文件</code>：可以快速定位指定文件路径</p><blockquote><p>该指令利用事先建立的系统中所有文件名及路径的locate数据库快速定位文件，无需遍历整个系统速度快</p><p>为了保证定位的准确度，管理员必须定期更新locate时刻</p></blockquote><ul><li><code>updatedb</code>：更新locate数据库，在第一次locate前需要使用updatedb构建locate数据库</li></ul></li><li><p><code>grep [选项] 查找内容 源文件</code>：过滤查找相关内容</p><ul><li><code>-n</code>：显示匹配行及行号</li><li><code>-i</code>：忽略字母大小写</li></ul><p><strong>例如</strong>：在hello.txt中查找”yes“所在行，并显示行号</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -n <span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-regexp">/home/</span>hello.txt<br></code></pre></td></tr></table></figure><p>还能与 <code>|</code> 管道符配合使用，效果同上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /home/hello.txt | grep -n <span class="hljs-string">&quot;yes&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-压缩与解压"><a href="#4-压缩与解压" class="headerlink" title="4. 压缩与解压"></a>4. 压缩与解压</h3><ul><li><p><code>gzip </code> 文件：压缩文件，将文件压缩为*.gz</p></li><li><p><code>gunzip 文件.gz</code>：解压缩文件</p></li><li><p><code>zip [选项] XXX.zip 文件或目录</code>：压缩文件或目录</p><ul><li><code>-r</code>：递归压缩，即压缩目录</li></ul><p><strong>例如</strong>：将home目录压缩为名为myHome.zip的压缩文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> -r myHome.<span class="hljs-built_in">zip</span> /home/ <br></code></pre></td></tr></table></figure></li><li><p><code>unzip [选项] 要解压的文件</code>：解压缩文件</p><ul><li><code>-d &lt;目录&gt;</code>：将文件解压到指定目录</li></ul><p><strong>例如</strong>：将&#x2F;home下的myHome.zip文件解压到 &#x2F;opt&#x2F;tmp目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">unzip -d <span class="hljs-regexp">/opt/</span>tmp <span class="hljs-regexp">/home/my</span>Home.zip<br></code></pre></td></tr></table></figure></li><li><p><code>tar [选项] XXX.tar.gz 打包的内容</code>：打包目录压缩后格式为tar.gz</p><ul><li><code>-c</code>：产生tar打包文件</li><li><code>-v</code>：显示详细信息</li><li><code>-f</code>：指定压缩后的文件名</li><li><code>-z</code>：同时压缩文件</li><li><code>-x</code>：解包.tar文件</li></ul><p><strong>例如</strong>：</p><ol><li>将多个文件打包压缩成pc.tar.gz</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zcvf pc<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> /home/pig<span class="hljs-selector-class">.txt</span> /home/tiger.txt<br></code></pre></td></tr></table></figure><ol start="2"><li>将&#x2F;home文件夹压缩成myHome.tar.gz</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zcvf myHome<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> /home/<br></code></pre></td></tr></table></figure><ol start="3"><li>将myHome.tar.gz  &#x3D;&#x3D;解压到&#x3D;&#x3D;  &#x2F;opt&#x2F;tmp 目录下</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -zxvf <span class="hljs-regexp">/home/my</span>Home.tar.gz -C <span class="hljs-regexp">/opt/</span>tmp<br></code></pre></td></tr></table></figure></li></ul><h2 id="四、组管理与权限管理"><a href="#四、组管理与权限管理" class="headerlink" title="四、组管理与权限管理"></a>四、组管理与权限管理</h2><h3 id="1-Linux组"><a href="#1-Linux组" class="headerlink" title="1. Linux组"></a>1. Linux组</h3><p>Linux中每个用户必须属于一个组，在Linux文件中，有所有者，所在组，其他组的概念</p><ul><li><p>所有者：默认为文件的创建者</p><ul><li><code>chown 用户名 文件名</code>：改变文件的所有者</li></ul></li><li><p>所在组：默认为所有者的所在组</p><ul><li><code>chgrp 组名 文件名</code>：修改文件、目录所在组</li></ul><p>同时改变所有者和所属组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> user1:group1 abc.txt<br></code></pre></td></tr></table></figure><p>改变目录下所以子目录或文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R user1 abc.txt<br><span class="hljs-built_in">chgrp</span> -R group1 abc.txt<br><span class="hljs-built_in">chown</span> -R user1:group1 abc.txt<br></code></pre></td></tr></table></figure></li><li><p>其他组：所有者所在组之外的组</p><ul><li><p><code>usermod -g 新组名 用户名</code>：改变用户所在组</p></li><li><p><code>usermod -d 目录名 用户名</code>：改变用户登录的初始目录</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：用户需要有进入该目录的权限</p></li></ul></li></ul><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h3><p><strong>权限的基本介绍</strong></p><p><img src="https://s2.loli.net/2023/11/02/AVhEGrkj9DzQwiB.png" alt="qx"></p><ol><li>图中第一段  **<code>drwxr-xr-x</code>**，由十位字符组成<ol><li>第 <strong>0</strong> 位为文件类型<ul><li><code>-</code>：表示普通文件</li><li><code>d</code>：表示目录</li><li><code>c</code>：表示字符设备文件，例如，鼠标，键盘</li><li><code>b</code>：表示块设备，例如，硬盘</li></ul></li><li>第 <strong>1-3</strong> 位确定所有者对文件拥有的权限</li><li>第 <strong>4-6</strong> 位确定所属组对文件拥有的权限</li><li>第 <strong>7-9</strong> 位确定其他用户对文件拥有的权限</li></ol></li></ol><table><thead><tr><th>权限</th><th>作用到文件</th><th>作用到目录</th></tr></thead><tbody><tr><td>r (read) 4</td><td>读取，查看</td><td>读取，ls查看内容</td></tr><tr><td>w (write) 2</td><td>修改，不能删除<a href="%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%E6%98%AF%EF%BC%8C%E5%AF%B9%E8%AF%A5%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9A%84%E7%9B%AE%E5%BD%95%E6%9C%89%E5%86%99%E6%9D%83%E9%99%90%EF%BC%8C%E6%89%8D%E8%83%BD%E5%88%A0%E9%99%A4%E8%AF%A5%E6%96%87%E4%BB%B6">^注</a></td><td>修改，对目录内创建，删除，重命名目录</td></tr><tr><td>x (execute) 1</td><td>可以被执行</td><td>可以进入该目录</td></tr></tbody></table><ol start="2"><li>图中第二段  <strong><code>2</code></strong> ，表示，文件：硬连接数 ， 目录：子目录数</li><li>图中第三，四段 **<code>root root</code>**，表示所有者和所属组</li><li>图中第五段 <code>4096</code> 表示文件大小（字节），如果是文件夹则显示4096</li><li>图中第六段 **<code>11月 3 22：09</code>**表示最后修改时间</li><li>图中第七段 <strong><code>home</code></strong> 表示文件名</li></ol><p><strong>修改权限</strong></p><ul><li><p><code>chmod &lt;操作语句&gt; 被修改的文件</code>：修改文件或目录的权限</p><ol><li><p><code>+ , - , =</code> 变更权限</p><ul><li><code>+</code>：增加权限</li><li><code>-</code>：取消权限</li><li><code>=</code>：赋予权限</li></ul></li><li><p><code>u , g , o , a</code> 表示角色</p><ul><li><code>u</code>：所有者</li><li><code>g</code>：所属组</li><li><code>o</code>：其他人</li><li><code>a</code>：所有人</li></ul></li></ol><p><strong>例如</strong>：对于&#x2F;home&#x2F;abc文件</p><ol><li>给所有者读写执行，给所属组读执行，给其他人读执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u=rwx,g=rx,o=rx /home/abc.txt<br></code></pre></td></tr></table></figure><ol start="2"><li>给所有者取消执行，给所属组增加写</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u-x,g+w /home/abc.txt<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>可以使用数字代替字母</p><ul><li><code>r=4 w=2 x=1</code> 所以 <code>rwx = 7</code></li></ul><p><strong>例如</strong>：将文件abc的权限修改为 <code>rwxr-xr-x</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 /home/abc.txt<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、任务调度"><a href="#五、任务调度" class="headerlink" title="五、任务调度"></a>五、任务调度</h2><h3 id="1-crond任务调度"><a href="#1-crond任务调度" class="headerlink" title="1. crond任务调度"></a>1. <strong>crond</strong>任务调度</h3><p>是指系统在某个时间执行的特定的命令或程序</p><p>分为：</p><ol><li>系统工作：有些重要的工作必须周而复始的执行，如病毒扫描秒</li><li>个别用户工作：个别用户可能希望执行某些程序，如mysql数据库备份</li></ol><ul><li><p><code>crontab [选项]</code>：进行定时任务的设置</p><ul><li><code>-e</code>：编辑crontab定时任务</li><li><code>-l</code>：查询crontab任务</li><li><code>-r</code>：删除当前用户的所以crontab任务</li></ul><p><strong>例如</strong>：设置个人任务调度</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 指令编辑定时任务，将打开/etc/crontab文件</span><br>crontab -e<br><span class="hljs-comment"># 编写定时任务</span><br>*<span class="hljs-string">/1</span> * * * * <span class="hljs-keyword">ls</span> -l <span class="hljs-string">/etc/</span> &gt; <span class="hljs-string">/tmp/to.txt</span><br></code></pre></td></tr></table></figure></li><li><p><code>*/1 * * * *</code></p><p><img src="https://s2.loli.net/2023/11/02/FPcw8JoN9RDuHge.png" alt="crontab"></p><ul><li><p><code>*</code>：表示时间</p></li><li><p><code>*/n</code>：表示，每隔n个时间单位为周期</p><ul><li><code>*/1 * * * *</code>：表示每分钟都执行</li></ul></li><li><p><code>,</code>：表示不连续的时间</p><ul><li><code>0 8,12,16 * * *</code>：表示每天的8，12，16点都执行命令</li></ul></li><li><p><code>-</code>：表示连续时间范围</p><ul><li><code>0 5 * * 1-6</code>：表示周一到周六的凌晨5点执行</li></ul></li></ul></li><li><p>常见用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每隔一分钟将时间数据追加到/home/mydate.txt文件中</span><br>*/1 * * * * <span class="hljs-built_in">date</span> &gt;&gt; /home/mydate.txt<br><br><span class="hljs-comment">#每天2点将时间数据覆盖到/home/mydate.txt文件中</span><br>* 2 * * * <span class="hljs-built_in">date</span> &gt; /home/mydate.txt<br></code></pre></td></tr></table></figure><ul><li>编写简单脚本任务,每分钟将日期和时间数据追加写入mydate.txt文件中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建脚本文件mdate.sh</span><br>vim mdate.sh<br><br><span class="hljs-comment"># 写入指令</span><br>cal &gt;&gt; /home/mydate.txt<br><span class="hljs-built_in">date</span> &gt;&gt; /home/mdate.sh<br><br><span class="hljs-comment"># 赋予用户对该脚本文件的执行权力</span><br><span class="hljs-built_in">chmod</span> u+x /home/mdate.sh<br><br><span class="hljs-comment"># 添加任务调度</span><br>crontab -e<br><br><span class="hljs-comment"># 写入</span><br>*/1 * * * * /home/mdate.sh<br><br><span class="hljs-comment"># 用tail监控执行结果</span><br><span class="hljs-built_in">tail</span> -f /home/mydate.txt<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-at定时任务"><a href="#2-at定时任务" class="headerlink" title="2. at定时任务"></a>2. at定时任务</h3><p>​at命令是&#x3D;&#x3D;一次性&#x3D;&#x3D;定时计划任务，at的守护进程atd会已后台任务运行，检查作业队列来运行</p><p>默认是每60s检查队列，如果与任务时间匹配则执行任务</p><p><strong>注意</strong>：<u>在使用at命令时一定要保证atd进程的启动</u> ，一般使用 <code>ps-ef | grep atd</code>指令检查</p><ul><li><p><code>at [选项] 时间</code>：注意输出完成之后，按两次 <code>Ctrl + D</code>结束输入</p><p><img src="https://s2.loli.net/2023/11/02/KctHluiCATyoszw.png" alt="at"></p><ul><li><p>at的时间格式</p><ul><li><p><code>hh:mm</code>：小时分钟，例如，04：00</p></li><li><p>模糊词语:</p><ul><li><code>midnight</code>：深夜</li><li><code>noon</code>：中午</li><li><code>teatime</code>：喝茶时间（一般下午四点）</li><li>等待</li></ul></li><li><p>十二小时制：</p><ul><li><code>am</code>：上午</li><li><code>pm</code>：下午</li></ul></li><li><p>具体日期：</p><ul><li><code>month day</code></li><li><code>mm/dd/yy</code></li><li><code>dd.mm.yy</code></li></ul><p><strong>注意</strong>：指定日期必须在指定时间后，例如 04:00 2023-9-21</p></li><li><p>相对计时：</p><ul><li><code>now + count 时间单位</code>：minutes ,  hours , days ,weeks</li></ul></li><li><p>指定时间：</p><ul><li><code>today</code></li><li><code>tomorrow</code></li></ul></li></ul></li></ul></li><li><p><code>atq</code>：查看任务队列</p></li><li><p><code>atrm 编号</code>：删除已设置任务</p></li></ul><p><strong>案例</strong>：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@xxx ~]<span class="hljs-comment"># at 5pm + 2days</span><br>at&gt; /bin/ls /home&lt;EOT&gt; 注：按两次CTRL + D会出现&lt;EOT&gt;表示输出结束<br>job<span class="hljs-number"> 1 </span>at Thu Sep<span class="hljs-number"> 7 </span>16:34:00 2023<br><br>[root@xxx ~]<span class="hljs-comment"># atq</span><br>job<span class="hljs-number"> 1 </span>at Thu Sep<span class="hljs-number"> 7 </span>16:34:00<span class="hljs-number"> 2023 </span>a root<br></code></pre></td></tr></table></figure><p>​    </p><h2 id="六、磁盘相关"><a href="#六、磁盘相关" class="headerlink" title="六、磁盘相关"></a>六、磁盘相关</h2><p>linux磁盘分为，IDE硬盘，SCSI硬盘，目前基本上是SCSI硬盘</p><ul><li><p>IDE硬盘：</p><ul><li><p><code>hdx~</code>：其中hd为设备类型，x为盘号 ， ~表示分区</p><blockquote><p>a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘</p></blockquote></li></ul></li><li><p>SCSI硬盘：</p></li><li><p><code>sdx~</code>：sd为类型，其余同上</p></li><li><p><code>lsblk [选项]</code>：查看分区情况</p><ul><li><code>-f</code>：详细信息</li></ul></li></ul><h3 id="1-分区"><a href="#1-分区" class="headerlink" title="1. 分区"></a>1. 分区</h3><ul><li><p><code>fdisk 磁盘地址</code></p><img src="https://s2.loli.net/2023/11/02/GLd6fS7CQJmpxYK.png" alt="fdisk" style="zoom: 67%;" /><img src="https://s2.loli.net/2023/11/02/3TtcFvIXxGPhC8u.png" alt="fq" style="zoom: 67%;" /><ul><li><code>n</code>：添加分区</li><li><code>w</code>：写入并退出</li></ul><p><img src="https://s2.loli.net/2023/11/02/twszG9m8qhln7xu.png" alt="fqcz"></p><blockquote><p>前两个可自主配置，后面默认即可（回车）</p></blockquote></li><li><p><code>mkfs -t 文件格式 磁盘地址</code>：格式化磁盘</p><img src="https://s2.loli.net/2023/11/02/zg2RA6UKtdFxS4W.png" alt="gsh" style="zoom:67%;" /><p><img src="https://s2.loli.net/2023/11/02/iMJaO1TEgW2nBDv.png" alt="gsh2"></p></li></ul><blockquote><p>如图，格式化成功！</p></blockquote><h3 id="2-挂载"><a href="#2-挂载" class="headerlink" title="2. 挂载"></a>2. 挂载</h3><p>&#x3D;&#x3D;<strong>注意：用命令行挂载磁盘重启后会失效</strong>&#x3D;&#x3D;</p><ul><li><code>mount 磁盘地址 目标目录地址</code>  ：挂载磁盘</li><li><code>umount 磁盘地址 或 目录地址</code>：卸载磁盘</li></ul><p><img src="https://s2.loli.net/2023/11/02/nz2tViRF9KQf1DS.png" alt="gz"></p><p>&#x3D;&#x3D;<strong>永久挂载</strong>&#x3D;&#x3D;</p><p>​通过修改  <code>/etc/fstab</code> 实现，修改后执行  <code>mount -a</code> 即刻生效</p><p><img src="https://s2.loli.net/2023/11/02/KyosYtR6MFS2q1I.png" alt="fstab"></p><h3 id="3-磁盘情况"><a href="#3-磁盘情况" class="headerlink" title="3. 磁盘情况"></a>3. 磁盘情况</h3><p><strong>查询</strong>指定目录的磁盘占用情况</p><ul><li><code>du [选项]</code>：默认为当前用户<ul><li><code>-s</code>：目录占用大小总汇</li><li><code>-h</code>：带计量单位</li><li><code>-a</code>：含文件</li><li><code>--max-depth=n</code>：子目录深度为 <strong>n</strong></li><li><code>-c</code>：列出明细同时增加汇总值</li></ul></li></ul><p><strong>磁盘实用指令</strong></p><ul><li><p>统计&#x2F;opt下文件的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /opt | grep <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p>统计&#x2F;opt下目录的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p>统计&#x2F;opt下所以文件的个数（包括所有子目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lR /opt | gerp <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p>统计&#x2F;opt下所有目录的数量（包括所有子目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lR /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>指令中，grep 后为正则表达式，过滤 ls 的结果中符合首字母合格的数据，wc 为统计数据</p></blockquote><ul><li><p>目录树状显示</p><ul><li><code>tree 目录</code>：<ul><li>如没有 tree 指令，则使用 <code>yum install tree </code>安装</li></ul></li></ul><img src="https://s2.loli.net/2023/11/02/mcor4ONgGECBUQZ.png" alt="tree" style="zoom:67%;" /></li></ul><h2 id="七、网络配置"><a href="#七、网络配置" class="headerlink" title="七、网络配置"></a>七、网络配置</h2><h3 id="1-修改IP地址"><a href="#1-修改IP地址" class="headerlink" title="1. 修改IP地址"></a>1. 修改IP地址</h3><p>  固定NAT模式下的IP地址</p><pre><code class="hljs">1. 修改配置文件</code></pre>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-ens33<br></code></pre></td></tr></table></figure><p>  <img src="https://s2.loli.net/2023/11/02/mJOGZF1iN9YMKD7.png" alt="ipconfig"></p><pre><code class="hljs">2. 注意网关与子网ip在同一网段内</code></pre><img src="https://s2.loli.net/2023/11/02/RsPnDJCLBd1FaZy.png" alt="ip2" style="zoom: 67%;" /><ol start="3"><li>重启网络服务，或重启系统后生效<ol><li><code>service network restart</code>：重启网络服务</li><li><code>reboot</code>：重启系统</li></ol></li></ol><h3 id="2-修改主机名"><a href="#2-修改主机名" class="headerlink" title="2. 修改主机名"></a>2. 修改主机名</h3><p>修改主机名方便记忆，便于区分不同的主机</p><ul><li><code>hostname</code>：查看当前主机名</li><li><code>vim /etc/hostname</code>：在该文件中指定当前主机名</li></ul><p>修改过后，重启生效</p><h3 id="3-host映射"><a href="#3-host映射" class="headerlink" title="3. host映射"></a>3. host映射</h3><p>设置host映射，使用主机名即可访问主机</p><ol><li><p>windows中：</p><ul><li>修改 <code>C:\Windows\System32\drivers\etc\hosts</code>文件，配置映射关系</li></ul></li><li><p>Linux中：</p><ul><li>修改 <code>/etc/hosts</code>文件，配置映射关系</li></ul></li></ol><h3 id="4-DNS"><a href="#4-DNS" class="headerlink" title="4. DNS"></a>4. DNS</h3><p>域名系统，在互联网上映射域名与IP的一个分布式数据库</p><p><strong>windows中</strong></p><ul><li><code>ipconfig /displaydns</code>：查看DNS域名解析缓存</li><li><code>ipconfig /flushdns</code>：手动清理dns缓存<ul><li>防止域名劫持</li></ul></li></ul><p><img src="https://s2.loli.net/2023/11/02/ulfT7gB4RZtNQpi.png" alt="dns"></p><h3 id="5-防火墙"><a href="#5-防火墙" class="headerlink" title="5. 防火墙"></a>5. 防火墙</h3><ul><li><code>firewall-cmd</code>：操作端口<ul><li><code>--permanent</code><ul><li><code>--add-port=端口号/协议</code>：打开端口</li><li><code>--remove-port=端口号/协议</code>：关闭端口</li></ul></li><li><code>--reload</code>：重载端口，更新操作后，重载生效</li><li><code>--query-port</code>&#x3D;端口号&#x2F;协议：查询端口是否开放</li><li><code>--list-ports</code>：查看所有开放的端口</li></ul></li></ul><p><strong>监控网络状态</strong></p><ul><li><p><code>netstat [选项]</code></p><ul><li><code>-an</code>：按一定顺序排列输出</li><li><code>-p</code>：显示哪个进程再调用</li></ul></li><li><p><code>-ntlp</code>：查看正在使用的端口</p><blockquote><p>注意经常查看网络状态，防止木马程序</p></blockquote></li></ul><h2 id="八、进程"><a href="#八、进程" class="headerlink" title="八、进程"></a>八、进程</h2><h3 id="1-查看进程"><a href="#1-查看进程" class="headerlink" title="1.查看进程"></a>1.查看进程</h3><ul><li><code>ps [选项]</code>：<ul><li><code>-a</code>：显示当前终端所有进程</li><li><code>-e</code>：显示所有进程</li><li><code>-u</code>：以用户的格式显示进程</li><li><code>-f</code>：以全格式显示进程</li><li><code>-x</code>：显示后台运行的参数</li></ul></li></ul><p><img src="https://s2.loli.net/2023/11/02/8lRCnpoS5eNmkJ9.png" alt="jc"></p><p><img src="https://s2.loli.net/2023/11/02/zKJ9lPMq1VibLjC.png" alt="gc2"></p><p><strong>如图所示，各列的含义为：</strong></p><ul><li><code>USER</code>：进程执行用户</li><li><code>PID</code>：进程号</li><li><code>PPID</code>：父进程号</li><li><code>%CPU</code>：占用CPU的百分比</li><li><code>%MEM</code>：占用物理内存的百分比</li><li><code>VSZ</code>：占用虚拟内存的情况</li><li><code>RSS</code>：占用物理内存的情况</li><li><code>TTY</code>：终端信息</li><li><code>STAT</code>：运行状态<ul><li><code>S</code>：睡眠，<code>s</code>，表示会话的先导进程</li><li><code>N</code>：表示比普通优先级更低的优先级</li><li><code>R</code>：正在运行</li><li><code>D</code>：短期等待</li><li><code>Z</code>：僵死进程，已经结束但未释放内存</li><li><code>T</code>：被跟踪或被停止</li></ul></li><li><code>START</code>：执行的开始时间</li><li><code>TIME</code>：占用的CPU时间</li><li><code>COMMAND</code>：进程名，执行该进程的指令</li></ul><p><strong>查看进程树</strong></p><ul><li><code>pstree [选项]</code>：以树状形式查看进程<ul><li><code>-p</code>：显示进程的PID</li><li><code>-u</code>：显示进程的所属用户</li></ul></li></ul><h3 id="2-终止进程"><a href="#2-终止进程" class="headerlink" title="2. 终止进程"></a>2. 终止进程</h3><ul><li><code>kill [选项] 进程号</code>：通过进程号终止一个进程<ul><li><code>-9</code>：强制终止</li></ul></li><li><code>killall 进程名称</code>：通过进程名终止所有同类进程</li></ul><p><strong>示例</strong>：</p><ol><li>终止远程登录服务sshd，再重新启动sshd服务</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 首先查看sshd相关所有进程</span><br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-aux</span> | gerp sshd<br><br><span class="hljs-comment">#找到对应进程号（/usr/sbin/sshd - D）</span><br><span class="hljs-built_in">kill</span> 进程号<br><br><span class="hljs-comment">#重启sshd服务</span><br>/bin/systemctl <span class="hljs-built_in">start</span> sshd.service<br></code></pre></td></tr></table></figure><ol start="2"><li>终止多个gedit进程</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">killall gedit</span><br></code></pre></td></tr></table></figure><ol start="3"><li>终止一个终端</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查询终端进程</span><br><span class="hljs-attribute">ps</span> -aux | grep bash<br><br><span class="hljs-comment">#找到对应进程号，注意此处需要 -9 强制终止，终端会触发进程保护机制</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">10487</span> <br></code></pre></td></tr></table></figure><p>   <img src="https://s2.loli.net/2023/11/02/HmjyftOM8zPArJu.png" alt="zz"></p><h3 id="3-服务管理"><a href="#3-服务管理" class="headerlink" title="3. 服务管理"></a>3. 服务管理</h3><p>服务本质是进程，但是运行在后台，通常会监听某个端口，等待其他程序的请求，又称之为守护进程</p><ul><li><p><code>service [选项] 服务</code>：管理指令</p><ul><li><code>start</code>：启动</li><li><code>stop</code>：暂停</li><li><code>restart</code>：重启</li><li><code>reload</code>：重载</li><li><code>status</code>：状态</li></ul><p><strong>注意：</strong>在CentOS 7.0之后，很多服务&#x3D;&#x3D;不在使用service，而是systemctl&#x3D;&#x3D;</p><blockquote><p>service管理的服务在 &#x2F;etc&#x2F;init.d&#x2F;中查看</p></blockquote></li><li><p><code>setup</code>：查看所有系统服务</p></li><li><p><code>chkconfig [选项]</code>：设置所管理服务的各个运行级别设置自启动 或关闭</p><ul><li><code>[服务名] --list</code>：查看服务</li><li><code>--level 运行级别 服务名 on或of</code>：设置某服务在该运行级别上的自启动的状态</li></ul><blockquote><p>chkconfig重新设置服务后自启动或关闭，需要重启后生效</p></blockquote></li><li><p><code>systemctl [选项] 服务</code> ：服务管理指令</p><ul><li><code>start |stop | restart | status</code>：作用同上</li></ul><blockquote><p>systemctl指令管理的服务在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system</p></blockquote><p>设置服务自启动状态</p><ul><li><code>list-unit-files</code>：查看服务开机启动状态</li><li><code>enable 服务名</code>：设置服务开机自启</li><li><code>disable 服务名</code>：关闭服务开机自启</li><li><code>is-enable 服务名</code>：查询某个服务开机自启状态</li></ul></li></ul><h3 id="4-动态监控"><a href="#4-动态监控" class="headerlink" title="4. 动态监控"></a>4. 动态监控</h3><p>top指令实现对进程的动态监控，与ps不同的是执行一段时间后可以更新正在运行的进程</p><ul><li><code>top [选项]</code>：<ul><li><code>-d 秒数</code>：指定top命令每个几秒更新，默认3秒</li><li><code>-i</code>：时top命令不显示闲置或将死的命令</li><li><code>-p id号</code>：通过指定进程ID来监视某个进程的状态</li></ul></li><li>交互操作<ul><li><code>P</code>：以CPU使用率排序，默认选项</li><li><code>M</code>：以内存使用率排序</li><li><code>N</code>：以PID排序</li><li><code>q</code>：退出top</li><li><code>u</code>：再输入用户名，监控该用户的进程</li><li><code>k</code>：再输入进程ID，结束该进程</li></ul></li></ul><h2 id="九、包管理"><a href="#九、包管理" class="headerlink" title="九、包管理"></a>九、包管理</h2><h3 id="1-rpm"><a href="#1-rpm" class="headerlink" title="1. rpm"></a>1. rpm</h3><p>rpm用于互联网下载包的打包及安装工具。生成具有.RPM拓展名的文件</p><ul><li><code>rpm [选项]</code><ul><li><code>-q 包名</code>：查询软件包是否被安装<ul><li><code>-i 包名</code>：查询软件包详细信息</li><li><code>-l 包名</code>：查询软件包中的文件</li><li><code>-f 包名</code>：查询该文件的所属软件包</li><li><code>-a 包名</code>：查询所安装的所有的rpm软件包</li></ul></li><li><code>-e 包名</code>：删除软件包<ul><li>如果删除时报出警告，无法发删除，则可以添加 <code>--nodeps</code> 强制删除（谨慎使用）</li></ul></li><li><code>-ivh 软件包路径全名称</code>：安装软件包<ul><li><code>-i</code>：install 安装</li><li><code>-v</code>：verbose 提示</li><li><code>-h</code>：hash 进度条</li></ul></li></ul></li></ul><h3 id="2-yum"><a href="#2-yum" class="headerlink" title="2. yum"></a>2. yum</h3><p>yum是一个shell前端包管理器，基于rpm包管理，能够从指定服务器自动下载rpm包并安装，自动处理依赖关系并安装</p><ul><li><code>yum [选项]</code><ul><li><code>install 软件名</code>：安装指定包名</li><li><code>list 软件名</code>：在yum服务器上查询是否有该软件</li></ul></li></ul><h2 id="十、搭建JavaEE环境"><a href="#十、搭建JavaEE环境" class="headerlink" title="十、搭建JavaEE环境"></a>十、搭建JavaEE环境</h2><h3 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK"></a>1. 安装JDK</h3><p><strong>安装步骤</strong></p><ol><li><p><code>mkdir /opt/jdk</code></p></li><li><p>通过xftp6上传到 &#x2F;opt&#x2F;jdk 下 cd &#x2F;opt&#x2F;jdk</p></li><li><p>解压tar -zxvf jdk-8u261-linux-x64.tar.gz</p></li><li><p><code>mkdir /usr/local/java</code></p></li><li><p><code>mv /opt/jdk/jdki.8.0_261 /usr/local/java</code>配置环境变量的配置文件<code>vim /etc/profile</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_261<br><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH<br></code></pre></td></tr></table></figure></li><li><p><code>source /etc/profile</code>让新的环境变量生效]测试是否安装成功</p></li><li><p>编写一个简单的Hello.java输出”hello,world!”</p></li></ol><h3 id="2-安装tomcat"><a href="#2-安装tomcat" class="headerlink" title="2. 安装tomcat"></a>2. 安装tomcat</h3><p><strong>步骤</strong></p><ol><li><p>上传安装文件，并解压缩到 <code>/opt/tomcat</code></p></li><li><p>进入解压目录<code>/bin</code>，启动<code>tomcat ./startup.sh</code></p></li><li><p>开放端口8080</p></li><li><p>测试是否安装成功</p></li><li><p>在windows、Linux下访问<a href="http://linuxip:8080/">http://linuxip:8080</a><br>·</p></li></ol><h3 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3. 安装MySQL"></a>3. 安装MySQL</h3><p><strong>步骤</strong>：</p><ol><li>新建文件夹<code>/opt/mysql</code>，并cd进去</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://dev.mysql.com/get/mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm-bundle.tar，下载mysql安装包<br></code></pre></td></tr></table></figure><blockquote><p>PS: centos7.6自带的类MySQL数据库是maria-db，会跟MySQL冲突，要先删除。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">运行 tar -xvf mysq1-<span class="hljs-number">5.7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span><span class="hljs-selector-class">.e17</span><span class="hljs-selector-class">.x86_64</span><span class="hljs-selector-class">.rpm-bundle</span>.tar<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">运行rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mari，查询mariadb相关安装包<br><br>运行rpm -<span class="hljs-keyword">e</span> --nodeps mariadb-libs，卸载<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/Pl4r29zoudjBLDH.png" alt="maria"></p><ol start="2"><li>然后开始真正安装mysql，依次运行以下几条</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh mysql-community-common-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm<br><br><span class="hljs-attribute">rpm</span> -ivh mysql-community-libs-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm<br><br><span class="hljs-attribute">rpm</span> -ivh mysql-community-client-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm<br><br><span class="hljs-attribute">rpm</span> -ivh mysql-community-server-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">26</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">运行systemctl <span class="hljs-literal">start</span> mysqld.service，启动mysql<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/hvuT8g134Wc5Pt9.png" alt="mysql3"></p><ol start="3"><li><p>然后开始设置root用户密码</p></li><li><p>Mysql自动给root用户设置随机密码，</p></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">运行 grep <span class="hljs-string">&quot;password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span> 可看到当前密码<br></code></pre></td></tr></table></figure><ol start="5"><li>运行<code>mysql -u root -p</code>，用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行</li></ol><p><img src="https://s2.loli.net/2023/11/02/6XlyqaUY72WojOE.png" alt="mysqlpd"></p><ol start="6"><li>设置root密码，对于个人开发环境，如果要设比较简单的密码&#x3D;&#x3D;(生产环境服务器要设复杂密码)&#x3D;&#x3D;</li></ol><p><img src="https://s2.loli.net/2023/11/02/ePAcqMhpROuHXyQ.png" alt="mysqlpd3"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">可以运行<span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=0;<br></code></pre></td></tr></table></figure><ol start="7"><li>提示密码设置策略 ( validate_password_policy 默认值1,)</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;root@&#x27;</span>localhost<span class="hljs-string">&#x27;=password(&#x27;</span><span class="hljs-number">12345678</span><span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><ol start="8"><li>运行<code>flush privileges;</code>使密码设置生效</li></ol><p><img src="https://s2.loli.net/2023/11/02/jeq4mh7SsvcYzO9.png" alt="mysqlpd2"></p><ul><li><code>mysqldump</code></li></ul><h2 id="十一、Shell编程"><a href="#十一、Shell编程" class="headerlink" title="十一、Shell编程"></a>十一、Shell编程</h2><p>​<strong>Shell</strong>是一个命令行解释器，他为用户提供一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动，挂起，停止和编写一些程序</p><p><strong>简单示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim hello.sh<br><br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;nihao~&quot;<br><br>运行：<br>sh hello.sh<br>或<br>./hello.sh<br></code></pre></td></tr></table></figure><h3 id="1-Shell变量"><a href="#1-Shell变量" class="headerlink" title="1. Shell变量"></a>1. Shell变量</h3><p>Shell变量分为<u>系统变量</u>和<u>用户自定义变量</u></p><p>系统变量：$HOME , $PWD , $SHELL ,$USER等</p><p>使用  <code>set</code> 指令可显示当前所有变量</p><p><strong>Shell变量定义</strong></p><ol><li>定义变量：<code>变量名=值</code></li><li>撤销变量：<code>unset 变量名</code></li><li>声明静态变量：<code>readonly 变量名</code></li></ol><p>&#x3D;&#x3D;注&#x3D;&#x3D;：静态变量不能 unset</p><p><strong>输出变量</strong></p><ul><li><code>$变量名</code></li><li><code>$(指令)</code>：可以将指令的结果返回</li><li>&#96;&#96;(指令) <code>\</code>：作用同上</li></ul><p><strong>设置环境变量</strong></p><ul><li><code>export 变量名=变量值</code>：将Shell变量输出为环境变量</li><li><code>source 配置文件</code>：让修改立即生效~</li><li><code>echo $变量名</code>：查看环境变量的值</li></ul><p><strong>多行注释</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;!<br>内容<br>！<br></code></pre></td></tr></table></figure><p><strong>位置参数变量</strong></p><p>当一个shell脚本需要获取命令行的参数信息时，就需要在shell脚本中设置位置参数变量</p><ul><li><code>$n</code>：n表示数字，$0 表示shell指令本身 ，从​$1开始表示传入的参数，1代表第一个参数</li><li><code>$*</code>：代表命令行中传入的所有的参数，但该命令将所有参数视为一个整体</li><li><code>$@</code>：代表命令行中传入的所有的参数，但该命令将参数分为各个个体</li><li><code>$#</code>：代表命令行中传入参数的数量</li></ul><p><strong>预定义变量</strong></p><p>是shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</p><ul><li><code>$$</code>：当前进程的进程号PID</li><li><code>$!</code>：后台运行的最后一个进程的进程号</li><li><code>$?</code>：最后一次执行的命令的返回状态<ul><li><code>0</code>：表示上一个命令正确执行</li><li><code>非0</code>：表示上一个命令执行不正确</li></ul></li></ul><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h3><ul><li><code>$((运算式))</code>：返回计算值</li><li><code>$[运算式]</code>：返回计算值，&#x3D;&#x3D;推荐&#x3D;&#x3D;</li><li><code>expr m + n</code>：计算运算式，如需返回计算值则要在语句外用 **&#96;&#96;**嵌套<ul><li><code>+ ，- ，\* ，/ ，%</code>：运算符，注意乘号要使用转义字符</li></ul></li></ul><h3 id="3-条件判断"><a href="#3-条件判断" class="headerlink" title="3. 条件判断"></a>3. 条件判断</h3><ul><li><code>=</code>：比较字符串</li><li>整数比较<ul><li><code>-lt</code>：小于</li><li><code>-le</code>：小于等于</li><li><code>-gt</code>：大于</li><li><code>-ge</code>：大于等于</li><li><code>-ne</code>：不等于</li></ul></li><li>文件权限判断<ul><li><code>-r</code>：读权限</li><li><code>-w</code>：写权限</li><li><code>-x</code>：执行权限</li></ul></li><li>文件类型判断<ul><li><code>-f</code>：存在并且是普通文件</li><li><code>-e</code>：存在</li><li><code>-d</code>：存在并且是目录</li></ul></li></ul><h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h3><p><strong>if判断</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">第一种</span><br>if [ 23 -ge 22 ]<br>then<br>echo &quot;大于&quot;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二种</span><br>if [ $1 -ge 60 ]<br>then<br>echo &quot;及格了&quot;<br>elif [ $1 -lt 60 ]<br>then<br>echo &quot;不及格&quot;<br>fi<br></code></pre></td></tr></table></figure><p>注意：if 后 条件判断式 <code>[ 语句 ]</code>语句&#x3D;&#x3D;与中括号之间要有空格&#x3D;&#x3D;</p><p><strong>case语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">case $1 in<br>&quot;1&quot;)<br>echo &quot;周一&quot;<br>;;<br>&quot;2&quot;)<br>echo &quot;周二&quot;<br>;;<br>&quot;3&quot;)<br>echo &quot;周三&quot;<br>;;<br>*)<br>echo &quot;其他&quot;<br>;;<br>esac<br></code></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">第一种</span><br>for 变量 in 值1 值2 值3等等<br>do<br>程序语句<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例(此时<span class="hljs-variable">$@</span>将传入的所有参数视为单个个体)</span><br>for i in $@<br>do<br>echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例(此时$*将传入的所有参数视为一个整体)</span><br>for i in $*<br>do<br>echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二种</span><br>for ((初始值;循环控制条件;变量变化))<br>do<br>程序语句<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例(注意此处i不能使用整数运算符)</span><br>SUN=0<br>for (( i=1; i&lt;=$1; i++ ))<br>do<br>SUM=$[$SUM+$i]<br>done<br>echo $SUM<br></code></pre></td></tr></table></figure><p><strong>while循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">while [ 语句 ]<br>do<br>程序语句<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例(注意此处条件判断时使用的是[]，语句中不能使用 &gt; , &lt; ,= 。若需要使用，则将[]改为 (()) 即可 )</span><br>SUM=0<br>i=0<br>while [ $i -le $1 ]<br>do<br>SUM=$[$SUM+$i]<br>i=$[$i+1]<br>done<br>echo $SUM<br></code></pre></td></tr></table></figure><h3 id="5-read读取控制台"><a href="#5-read读取控制台" class="headerlink" title="5. read读取控制台"></a>5. read读取控制台</h3><ul><li><code>read [选项] 参数</code><ul><li><code>-p</code>：提示符<ul><li><code>read -p &quot;请输入&quot; NUM</code></li></ul></li><li><code>-t</code>：读取时的等待时间，超时自动往后执行<ul><li><code>read -t 10 -p &quot;请输入&quot; NUM</code></li></ul></li></ul></li></ul><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h3><p><strong>简单系统函数</strong></p><ul><li><code>basename 路径 [后缀]</code>：获取文件名<ul><li>如果加上了后缀 <code>basename /home/jack/aa.txt .txt</code>,则只返回单纯文件名<code>aa</code></li></ul></li><li><code>dirname 路径</code>：获取目录的最后一个  <code>/</code> 之前的所有路径</li></ul><p><strong>自定义函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意返回值，有就写上，没有就不用写</span><br>function 方法名()&#123;<br>方法体<br>[return int;]<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用(有参就写在后面，无参不用写)</span><br>方法名 参数1 参数2 <br></code></pre></td></tr></table></figure><h3 id="7-综合案例-备份数据库"><a href="#7-综合案例-备份数据库" class="headerlink" title="7. 综合案例-备份数据库"></a>7. 综合案例-备份数据库</h3><p><strong>完整代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库备份目录</span><br>BACKUP=/data/backup/db<br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取当前时间</span><br>DATETIME=$(date +%Y-%m-%d_%H%M%S)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库地址</span><br>HOST=localhost<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库用户名</span><br>DB_USER=root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库密码</span><br>DB_PW=12345678<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库名</span><br>DATABASE=&#x27;test&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1. 创建备份目录，如不存在则创建</span><br>[ ! -d &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. 执行备份操作</span><br>mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125; --host=$&#123;HOST&#125; -q -R --databases $&#123;DATABASE&#125; | gzip &gt; $&#123;BACKUP&#125;/$&#123;DATETIME&#125;/$DATETIME.sql.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3. 将文件打包为tar.gz</span><br>cd $&#123;BACKUP&#125;<br>tar -zcvf $DATETIME.tar.gz $&#123;DATETIME&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4. 将对应文件夹删除</span><br>rm -rf $&#123;BACKUP&#125;/$&#123;DATETIME&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5. 检查目录中是否存在超过十天的文件，有则删除</span><br>find $&#123;BACKUP&#125; -atime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;<br><br>echo &quot;备份数据库 $DATABASE 成功！&quot;<br></code></pre></td></tr></table></figure><p><strong>创建定时任务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">crontab -e<br><br><span class="hljs-comment">#写入</span><br><br>30 2 * * * /usr/sbin/mysql_db_backup.sh<br></code></pre></td></tr></table></figure><h2 id="十二、日志"><a href="#十二、日志" class="headerlink" title="十二、日志"></a>十二、日志</h2><p>日志记录着许多重要系统事件，对于主机安全很重要，可以通过日志来检查错误的原因或攻击者的痕迹</p><p><img src="https://s2.loli.net/2023/11/02/zmteW6vZ1pD9iuP.jpg" alt="log"></p><h3 id="1-日志管理服务rsyslogd"><a href="#1-日志管理服务rsyslogd" class="headerlink" title="1. 日志管理服务rsyslogd"></a>1. 日志管理服务rsyslogd</h3><p><strong>检查Linux中的rsyslogd服务是否启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps aux | grep <span class="hljs-string">&quot;rsyslog&quot;</span> <br></code></pre></td></tr></table></figure><p><strong>查询rsyslogd的自启动自启动状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl list-unit-files | grep <span class="hljs-string">&quot;rsyslog&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>配置文件：&#x2F;etc&#x2F;rsyslog.conf</p><ul><li><p>编辑文件时的格式为 *.*  存放日志文件</p><ul><li><p>第一个* 代表日志类型</p><ul><li><code>auth</code>：pam产生的日志</li><li><code>authpriv</code>：SSH，FTP等登录信息的验证信息</li><li><code>cron</code>：时间任务相关</li><li><code>kern</code>：内核</li><li><code>lpr</code>：打印</li><li><code>mail</code>：邮件</li><li><code>mark(syslog)-rsyslog</code>：服务内部信息，时间标识</li><li><code>news</code>：新闻组</li><li><code>user</code>：用户程序产生的相关信息</li><li><code>uucp</code>：UNIX to UNIX copy 主机之间的相互通信 </li><li><code>local 1-7</code>：自定义的日志设备</li></ul></li><li><p>第二个*代表日志级别</p><ul><li><code>debug</code>：有调试信息的，日志通信最多</li><li><code>info</code>：一般信息日志，最常用</li><li><code>notice</code>：最具有重要性的普通条件的信息</li><li><code>warning</code>：警告级别</li><li><code>err</code>：错误级别，阻止整个功能或模块不能正常工作的信息</li><li><code>crit</code>：严重级别，组织整个系统或软件不能正常工作的信息</li><li><code>alert</code>：需要立刻修改的信息</li><li><code>emerg</code>：内核崩溃等重要信息</li><li><code>none</code>：什么都不记录</li></ul><blockquote><p>从上到下，级别从低到高，记录信息越来越少</p></blockquote></li></ul></li></ul></li></ul><p><strong>自定义日志</strong></p><ol><li>进入 <code>rsyslog.conf</code> 配置文件</li><li>添加配置，并指定输出文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/rsyslog.conf<br><br><span class="hljs-comment">#添加配置</span><br><br>*.*                                      /var/log/diylog.log<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/TqUJrE3pbLQHxSY.jpg" alt="diylog"></p><h3 id="2-日志轮替"><a href="#2-日志轮替" class="headerlink" title="2. 日志轮替"></a>2. 日志轮替</h3><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存范围后就会进行删除</p><p><strong>轮替规则管理</strong></p><ul><li><p>编辑 <code>/etc/logrolate.conf</code> 配置文件中 <code>dateext</code> 参数</p><blockquote><p>默认为全局日志轮替规则，也可单独为某个文件配置(如下图最后几行)</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/jPMW5c7xUoFOXgC.png" alt="logrolate"></p></li><li><p>也可将某个日志轮替规则写到<code>/etc/logrolate.d/</code>中</p><blockquote><p>就是上图最后几行</p></blockquote></li><li><p>参数说明</p><ul><li><code>daily</code>：轮替周期为天</li><li><code>weekly</code>：轮替周期为周</li><li><code>monthly</code>：轮替周期为月</li><li><code>rotate 数字</code>：保留日志文件的个数，0指不备份</li><li><code>compress</code>：日志轮替时，旧日志进行压缩</li><li><code>create mode owner group</code>：建立新日志时，同时指定新日志的权限和所有者与所有组</li><li><code>mail address</code>：当日志轮替时，输出内容通过邮件发送至指定邮箱</li><li><code>missingok</code>：如果日志不存在，则忽略该日志的警告信息</li><li><code>notifempty</code>：如果日志为空文件则不进行日志轮替</li><li><code>minsize 大小</code>：日志轮替的最小值，只有当日志达到最小值才会轮替，否则时间到了也不会轮替</li><li><code>size 大小</code>：日志只有大于指定大小才会轮替，而不是按照时间轮替</li><li><code>dateext</code>：使用日期作为日志轮替文件的后缀</li><li><code>sharedscripts</code>：在此关键字之后的脚本只执行一次</li><li><code>prerotate/endscript</code>：在日志轮替之前，执行脚本命令</li><li><code>postrotate/endscript</code>：在日志轮替之后，执行脚本命令</li></ul></li></ul><h3 id="3-查看内存日志"><a href="#3-查看内存日志" class="headerlink" title="3. 查看内存日志"></a>3. 查看内存日志</h3><p>注意内存日志，<strong>重启清空</strong></p><ul><li><code>journalctl</code>：查看全部内存日志<ul><li><code>-n 数字</code>：查看最新n条</li><li><code>--since 19:00 --until 19:10:10 </code>：查看从开始时间到结束时间内的日志</li><li><code>-p err</code>：查看报错日志</li><li><code>-o verbose</code>：日志详细内容</li><li><code>_PID=1234 _COMM=sshd</code>：查看包含这些函数的日志</li></ul></li></ul><h2 id="十三、备份与恢复"><a href="#十三、备份与恢复" class="headerlink" title="十三、备份与恢复"></a>十三、备份与恢复</h2><h3 id="1-dump"><a href="#1-dump" class="headerlink" title="1. dump"></a>1. dump</h3><p>dump支持分卷和增量备份（差异备份）</p><blockquote><p>增量备份支持分区，不支持文件或目录</p></blockquote><ul><li><code>dump [-cu] [数字] [-f 备份后的文件名] [-T 日期] [目录或文件系统]</code><ul><li><code>-c</code>：创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头</li><li><code>-数字</code>：备份的层级 0-9 ，0为完整备份，指定其他层级则为增量备份，到 9 后则再次从 0 开始</li><li><code>-f 备份后的文件名</code>：指定备份后的文件名</li><li><code>-j</code>：调用bzlib库压缩备份文件，压缩后为bz2格式，让文件更小</li><li><code>-T 日期</code> ：开始备份的时间和日期</li><li><code>-u</code>：备份完成之后在 &#x2F;etc&#x2F;dumpdates 中记录备份的文件系统，层级，日期，时间</li><li><code>-t</code>：指定文件名，若该文件已存在备份文件中，则列出姓名</li><li><code>-W</code>：显示需要备份的文件及最后一次备份的层级，时间日期</li><li><code>-w</code>：与-W类似，但仅显示需要备份的文件</li></ul></li></ul><p>例如，将&#x2F;boot分区的所有内容备份到 &#x2F;opt&#x2F;boot.bak0.bz2 文件中，备份层级为 0</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xfsdump -0uj -f /opt/book.bak0.bz2 /boot<br></code></pre></td></tr></table></figure><p><strong>注</strong>：需要用 <code>df -TH</code> 查看分区的类型，并在dump前加上对应的类型</p><h3 id="2-restore"><a href="#2-restore" class="headerlink" title="2. restore"></a>2. restore</h3><p>restore用来回复已备份的文件，可以从dump生成的备份文件中回复原文件</p><ul><li><p><code>restore [模式选项] [选项]</code>：四个选项每次只能指定一种</p><ul><li><p><code>-C</code>：对比模式，将备份文件与已存在文件相互对比</p></li><li><p><code>-i</code>：交互模式，在进行还原操作时，restore指令将依序询问用户</p></li><li><p><code>-r</code>：还原模式</p></li><li><p><code>-t</code>：查看模式，查看备份文件中由哪些文件</p></li><li><p><code>-f 备份文件</code>：从指定文件中读取备份数据，进行还原操作</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo</title>
    <link href="/2023/12/11/Dubbo/"/>
    <url>/2023/12/11/Dubbo/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><blockquote><p>轻量级 Java RPC框架</p></blockquote><p><strong>RPC简单原理</strong></p><p><img src="https://s2.loli.net/2023/11/02/wqmc4uvfhapKYJj.png" alt="rpc"></p><p><strong>Dubbo简单架构</strong></p><p><img src="https://s2.loli.net/2023/11/02/2pSwDBltfOQPXI7.png" alt="dubbo"></p><h2 id="一、安装与启动"><a href="#一、安装与启动" class="headerlink" title="一、安装与启动"></a>一、安装与启动</h2><h3 id="1-安装注册中心"><a href="#1-安装注册中心" class="headerlink" title="1. 安装注册中心"></a>1. 安装注册中心</h3><p><strong>zookeeper</strong></p><blockquote><p>一个树形目录服务，支持变更推送，适合作为Dubbo的注册中心</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/nCAO1FgZP86EWwa.png" alt="zookeeper"></p><h3 id="2-安装Dubbo管理控制台"><a href="#2-安装Dubbo管理控制台" class="headerlink" title="2. 安装Dubbo管理控制台"></a>2. 安装Dubbo管理控制台</h3><p><strong>进入GitHub下载压缩包</strong></p><p><a href="https://github.com/apache/dubbo-admin">apache&#x2F;dubbo-admin</a></p><p><strong>使用maven打包并运行</strong></p><p><img src="https://s2.loli.net/2023/11/02/slpoiUdnGkVqKIj.png" alt="mvn"></p><ul><li><p>找到 <code>pom</code>文件所在目录</p><ul><li><p>打开终端输入</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">rem</span> 跳过测试打包<br>mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>找到 <code>jar</code>包所在目录</p><ul><li><p>打开终端输入</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">rem</span> 启动jar包<br>java -jar xxx.jar<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>ui</code>    则使用  <code> npm</code>打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install dependencies</span><br>npm install<br><br><span class="hljs-comment"># serve with hot reload at localhost:8080</span><br>npm run dev<br><br><span class="hljs-comment"># build for production with minification</span><br>npm run build<br><br><span class="hljs-comment"># build for production and view the bundle analyzer report</span><br>npm run build --report<br></code></pre></td></tr></table></figure></li><li><p>启动完成</p><blockquote><p>默认进入localhost:38082端口访问</p><p>具体则在 ui 包中的 <code>vue.config.js</code> 文件中查找</p></blockquote></li></ul><h3 id="3-编写示例项目"><a href="#3-编写示例项目" class="headerlink" title="3. 编写示例项目"></a>3. 编写示例项目</h3><p><strong>使用XML</strong></p><p>目录结构</p><p>├─<strong>customer</strong><br>│  ├─src<br>│  │  ├─main<br>│  │  │  ├─java<br>│  │  │  │  │  AppC.java<br>│  │  │  │  │<br>│  │  │  │  └─service<br>│  │  │  │          OrderServiceImpl.java<br>│  │  │  │<br>│  │  │  └─resources<br>│  │  │          consumer.xml<br>├─<strong>interface</strong><br>│  ├─src<br>│  │  ├─main<br>│  │  │  ├─java<br>│  │  │  │  ├─bean<br>│  │  │  │  │      User.java<br>│  │  │  │  │<br>│  │  │  │  └─service<br>│  │  │  │          OrderService.java<br>│  │  │  │          UserService.java<br>├─<strong>provider</strong><br>│  ├─src<br>│  │  ├─main<br>│  │  │  ├─java<br>│  │  │  │  │  App.java<br>│  │  │  │  │<br>│  │  │  │  └─service<br>│  │  │  │          UserServiceImpl.java<br>│  │  │  │<br>│  │  │  └─resources<br>│  │  │          provider.xml</p><blockquote><ul><li>接口放在 interface 中单独管理</li><li>实现类各写在 消费者 与 提供者 中</li><li>消费者通过 Dubbo 远程调用提供者的接口实现</li></ul></blockquote><ul><li><p><code>provider.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    指定当前服务的名字--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user-service-provider&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    指定注册中心的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;zookeeper&quot;</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    指定通信规则 (通信协议 ， 通信端口)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    暴露服务 ref指向实现对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    服务的实现对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    配置监控中心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:monitor</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;registry&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>consumer.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    设置包扫描       --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;service&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order-service-consumer&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    声明需要的接口服务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    配置监控中心   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:monitor</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;registry&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>两者都在  <code>pom</code>  文件中导入接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dutest<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>提供者向注册中心 注册（暴露）提供的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">12</span>);<br><br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(aa);<br>        list.add(bb);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;provider.xml&quot;</span>);<br>        ioc.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者向注册中心订阅（调用）提供者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">initOrder</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getUsers(<span class="hljs-string">&quot;AA&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;consumer.xml&quot;</span>);<br>        <span class="hljs-type">OrderService</span> <span class="hljs-variable">orderService</span> <span class="hljs-operator">=</span> ioc.getBean(OrderService.class);<br>        orderService.initOrder(<span class="hljs-string">&quot;AA&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>使用Springboot</strong></p><blockquote><p>Springboot则使用注解与yml配置文件，配置注册中心 与暴露和需要的服务</p></blockquote><ul><li><p><code>yml</code>  </p><ul><li>provider</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-service-provider</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:2181</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20880</span><br>  <span class="hljs-attr">monitor:</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-service-consumer</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">zookeeper://127.0.0.1:2181</span><br>  <span class="hljs-attr">monitor:</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">registry</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure></li><li><p>同样在pom文件中导入接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dutest<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>提供者向注册中心 注册（暴露）提供的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-comment">// 暴露服务</span><br><span class="hljs-meta">@DubboService</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">12</span>);<br><br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(aa);<br>        list.add(bb);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableDubbo</span> <span class="hljs-comment">// 启用Dubbo</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderssApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProviderssApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者向注册中心订阅（调用）提供者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-comment">// 从注册中心远程引用</span><br>    <span class="hljs-meta">@DubboReference</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">initOrder</span><span class="hljs-params">(String name)</span> &#123;<br>        List&lt;User&gt; list = userService.getUsers(<span class="hljs-string">&quot;AA&quot;</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderService orderService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/init&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">initOrder</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> orderService.initOrder(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableDubbo</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsumerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p><strong>配置关系</strong></p><p><img src="https://s2.loli.net/2023/11/02/ewDPxYU2JlNOy84.jpg" alt="conf"></p><h3 id="1-启动检测"><a href="#1-启动检测" class="headerlink" title="1. 启动检测"></a>1. 启动检测</h3><blockquote><p>spring 启动后会根据配置文件默认检查注册中心是否存在需要的服务，没有则报错</p></blockquote><ul><li><p>通过xml设置启动不检查</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> </span><br><span class="hljs-tag">                 <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>全局配置所有消费者</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:consumer</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置注册中心启动不检查</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-超时与重试"><a href="#2-超时与重试" class="headerlink" title="2. 超时与重试"></a>2. 超时与重试</h3><blockquote><p>防止，由于网络或其他原因，使消费者请求长时间没有回应，造成线程阻塞</p><ul><li>默认值为 <code>1000ms</code></li></ul><p>优先级</p><ul><li>精确优先</li><li>消费者优先</li></ul></blockquote><p><img src="https://s2.loli.net/2023/11/02/1HziMgd3Rk6nFw7.png" alt="timeout"></p><p><strong>重试</strong></p><blockquote><p>超时失败后重试次数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> </span><br><span class="hljs-tag">                 <span class="hljs-attr">retries</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注：</strong>&#x3D;&#x3D;</p><ul><li><strong>幂等</strong>操作<strong>能</strong>设置重试次数<ul><li>多次操作产生的结果一致<ul><li>查询</li><li>删除</li><li>修改</li></ul></li></ul></li><li><strong>非幂等</strong>操作<strong>不能</strong>设置重试次数<ul><li>多次操作产生的结果不一致<ul><li>新增</li></ul></li></ul></li></ul><h3 id="3-多版本"><a href="#3-多版本" class="headerlink" title="3. 多版本"></a>3. 多版本</h3><blockquote><p>一个接口的实现的不同版本</p></blockquote><ul><li><p>provider</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  v1--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    服务的实现对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--   v2  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0.0&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--    服务的实现对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.UserServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>consumer</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    指定需要的版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>随机版本（灰度发布）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    指定需要的版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;*&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-本地存根"><a href="#4-本地存根" class="headerlink" title="4. 本地存根"></a>4. 本地存根</h3><blockquote><p>消费者在调用远程接口前</p><p>存根可以先进行一些校验</p></blockquote><ul><li><p>在接口模块中新建存根类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceStub</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br><span class="hljs-comment">//    构造器输入UserService</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserService userService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传入的的是userService远程代理对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userService 用户服务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceStub</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasLength(name)) &#123;<br>            <span class="hljs-keyword">return</span> userService.getUsers(name);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在  <code>consumer.xml</code>中配置指定使用的存根</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;service.UserService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">stub</span>=<span class="hljs-string">&quot;service.UserServiceStub&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="三、高可用"><a href="#三、高可用" class="headerlink" title="三、高可用"></a>三、高可用</h2><h3 id="1-Zookeeper宕机与Dubbo直连"><a href="#1-Zookeeper宕机与Dubbo直连" class="headerlink" title="1. Zookeeper宕机与Dubbo直连"></a>1. Zookeeper宕机与Dubbo直连</h3><p><strong>Zookeeper宕机</strong></p><p><img src="https://s2.loli.net/2023/11/02/IhZDl37r6mG4t29.png" alt="dj"></p><p><strong>Dubbo直连</strong></p><ul><li><p>绕过注册中心，直接连接远程服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br><span class="hljs-comment">// 从注册中心远程引用</span><br><span class="hljs-comment">//    @DubboReference</span><br>  <span class="hljs-comment">// Dubbo 直连  </span><br>    <span class="hljs-meta">@DubboReference(url = &quot;127.0.0.1:20880&quot;)</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">initOrder</span><span class="hljs-params">(String name)</span> &#123;<br>        List&lt;User&gt; list = userService.getUsers(<span class="hljs-string">&quot;AA&quot;</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-集群模式下的负载均衡"><a href="#2-集群模式下的负载均衡" class="headerlink" title="2. 集群模式下的负载均衡"></a>2. 集群模式下的负载均衡</h3><p><strong>Random LoadBalance</strong></p><p><img src="https://s2.loli.net/2023/11/02/NSLYuIabrPJyMiW.png" alt="rlb"></p><p><strong>RandomRobin LoadBalance</strong></p><p><img src="https://s2.loli.net/2023/11/02/GSQRj5bovgN9JPA.png" alt="rrlb"></p><p><strong>LeastActive LoadBalance</strong></p><p><img src="https://s2.loli.net/2023/11/02/SiZAmBdcnQarPbJ.png" alt="lalb"></p><p><strong>ConsistentHash LoadBalance</strong></p><p><img src="https://s2.loli.net/2023/11/02/aQI5pidTjOlwSHy.png" alt="chlb"></p><p><strong>服务端服务级别</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;roundrobin&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>客户端服务级别</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;roundrobin&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>服务端方法级别</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;roundrobin&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>客户端方法级别</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;roundrobin&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:reference</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-服务降级"><a href="#3-服务降级" class="headerlink" title="3. 服务降级"></a>3. 服务降级</h3><blockquote><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，</p><p>从而释放服务器资源以保证核心交易正常运作或高效运作。</p></blockquote><p><strong>配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">mock=&quot;[fail|force]return|throw xxx&quot;<br></code></pre></td></tr></table></figure><ul><li>fail 或 force 关键字可选，表示调用失败或不调用强制执行 mock 方法，如果不指定关键字默认为 fail</li><li>return 表示指定返回结果，throw 表示抛出指定异常</li><li>xxx 根据接口的返回类型解析，可以指定返回值或抛出自定义的异常</li></ul><p><strong>例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;return&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;return null&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;fail:return aaa&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;force:return true&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;fail:throw&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.xxx.service.DemoService&quot;</span> </span><br><span class="hljs-tag">                 <span class="hljs-attr">mock</span>=<span class="hljs-string">&quot;force:throw java.lang.NullPointException&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配合 dubbo-admin 使用</strong></p><ul><li>应用消费端引入 <a href="https://github.com/apache/dubbo-spi-extensions/tree/master/dubbo-mock-extensions"><code>dubbo-mock-admin</code></a>依赖</li><li>应用消费端启动时设置 JVM 参数，<code>-Denable.dubbo.admin.mock=true</code></li><li>启动 dubbo-admin，在服务 Mock-&gt; 规则配置菜单下设置 Mock 规则</li></ul><blockquote><p>以服务方法的维度设置规则，设置返回模拟数据，动态启用&#x2F;禁用规则</p></blockquote><p><strong>注意事项</strong></p><blockquote><p> Dubbo 启动时会<strong>检查配置</strong>，当 mock 属性值配置有误时会启动失败，可根据错误提示信息进行排查</p></blockquote><ul><li><strong>配置格式错误</strong>，如 <code>return+null</code> 会报错，被当做 mock 类型处理，<code>return</code> 后面可省略不写或者跟空格后再跟返回值</li><li><strong>类型找不到错误</strong>，如自定义 mock 类、throw 自定义异常，请检查类型是否存在或是否有拼写错误</li></ul><h3 id="4-集群容错"><a href="#4-集群容错" class="headerlink" title="4. 集群容错"></a>4. 集群容错</h3><p><strong>整合Hystrix</strong></p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在启动类激活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableDubbo(scanBasePackages = &quot;com.example.providerss&quot;)</span> <span class="hljs-comment">// 启用Dubbo</span><br><span class="hljs-meta">@EnableHystrix</span> <span class="hljs-comment">// 启用容错</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderssApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProviderssApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableDubbo</span><br><span class="hljs-meta">@EnableHystrix</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsumerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在指定方法上加入Hystrix管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-comment">// 暴露服务</span><br><span class="hljs-meta">@DubboService</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;hello&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">12</span>);<br><br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(aa);<br>        list.add(bb);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出错时调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-number">12</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-number">12</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="四、原理"><a href="#四、原理" class="headerlink" title="四、原理"></a>四、原理</h2><h3 id="1-RPC与Netty原理"><a href="#1-RPC与Netty原理" class="headerlink" title="1. RPC与Netty原理"></a>1. RPC与Netty原理</h3><p><strong>RPC</strong></p><p><img src="https://s2.loli.net/2023/11/02/wqmc4uvfhapKYJj.png" alt="rpc"></p><p><strong>Netty</strong></p><blockquote><p>Netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p><p>它极大地简化并简化了TCP和 UDP套接字服务器等网络编程。</p></blockquote><ul><li><p><strong>NIO</strong></p><p><img src="https://s2.loli.net/2023/11/02/Bj5vWaTx4KQze6g.png" alt="nio"></p></li><li><p>netty则是基于nio框架</p><p><img src="https://s2.loli.net/2023/11/02/m5U3ZBSQCqYdzAs.png" alt="netty"></p></li></ul><h3 id="2-Dubbo框架"><a href="#2-Dubbo框架" class="headerlink" title="2. Dubbo框架"></a>2. Dubbo框架</h3><p><img src="https://s2.loli.net/2023/11/02/cCtzSHhNbUIsy7d.png" alt="kj"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2023/12/10/Docker/"/>
    <url>/2023/12/10/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><u>Docker</u></h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h3><p><strong>进入官方文档</strong>：<a href="https://docs.docker.com/engine/install/centos/">Docker Install</a></p><ul><li>安装之前卸载已有文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure><ul><li>设置存储库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y yum-utils<br><br><span class="hljs-comment">#注意这里使用国内源</span><br>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><ul><li><p>安装最新版docker引擎</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>启动并验证</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl start docker<br><br>docker version<br><br><span class="hljs-comment">#测试运行hello-world镜像</span><br>sudo docker run hello-world<br><br><span class="hljs-comment">#查看已有镜像</span><br>docker images<br></code></pre></td></tr></table></figure><h3 id="2-配置阿里云镜像加速器"><a href="#2-配置阿里云镜像加速器" class="headerlink" title="2. 配置阿里云镜像加速器"></a>2. 配置阿里云镜像加速器</h3><p>首先登录阿里云，找到镜像服务 -&gt; 镜像加速器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /etc/docker<br><br><span class="hljs-comment">#注意此处镜像地址用自己阿里云当中的</span><br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://zwx0tf4k.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br><br>systemctl daemon-reload<br><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h2><p><strong>详细信息参阅官方文档</strong>：<a href="https://docs.docker.com/reference/">Reference documentation | Docker Docs</a></p><h3 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1. 帮助命令"></a>1. 帮助命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看版本信息</span><br>docker version<br><br><span class="hljs-comment">#显示系统信息</span><br>docker info<br><br><span class="hljs-comment">#帮助命令</span><br>docker --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2. 镜像命令"></a>2. 镜像命令</h3><ul><li><p><code>docker images [选项]</code>：查看本机镜像</p><ul><li><code>-a</code>：列出所有镜像</li><li><code>-q</code>：只显示镜像id</li></ul></li><li><p><code>docker search [选项] 镜像名</code>：搜索镜像</p><ul><li><code>--filter=[条件]</code>：过滤查询</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#搜索收藏量大于300的mysql镜像</span><br>docker search mysql --filter=STARS=300<br></code></pre></td></tr></table></figure><ul><li><code>docker pull 镜像名:标签</code>：下载镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载mysql镜像</span><br><span class="hljs-comment">#默认下载最新版</span><br>docker pull mysql<br><br><span class="hljs-comment">#下载5.7版本（注：这里的版本需要在镜像仓库中存在）</span><br>docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p>镜像仓库：<a href="https://hub.docker.com/search?q=mysql">Docker Hub | MySQL</a></p><ul><li><code>docker rmi -f [镜像id][][]...</code>：删除指定镜像<ul><li><code>-f $&#123;docker images -q&#125;</code>：删除所有镜像</li></ul></li></ul><h3 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3. 容器命令"></a>3. 容器命令</h3><p>有了镜像才能创建容器</p><p>&#x3D;&#x3D;容器相当于在现有镜像上在加一层可写层在镜像顶部&#x3D;&#x3D;</p><ul><li><p><code>docker run [选项] 镜像名</code>：新建容器并启动</p><ul><li><p><code>--name=&quot;名称&quot;</code>：设置容器名称</p></li><li><p><code>-d</code>：后台方式运行</p></li><li><p><code>-it</code>：使用交互方式运行</p></li><li><p><code>-p </code>：指定容器端口</p><ul><li><code>-p ip:主机端口:容器端口</code></li><li><code>-p 主机端口:容器端口</code>：常用</li><li><code>-p 容器端口</code></li><li><code>容器端口</code></li></ul></li><li><p><code>-P</code>：随机指定端口</p></li><li><p><code>-v </code>：容器数据卷挂载目录，数据同步</p><ul><li><p><code>-v 容器内路径</code>：匿名挂载</p></li><li><p><code>-v 卷名:容器内路径</code>：具名挂载</p><blockquote><p>docker中卷都在 <strong><code>/var/lib/docker/volumes</code></strong> 目录中</p><p>可以通过 <strong><code>docker volumes inspect 卷名</code></strong> 查看卷的详细信息</p></blockquote></li><li><p><code>-v 宿主机目录:容器内目录</code>：指定路径挂载</p></li></ul><blockquote><p>容器的持久化和同步操作，将容器内的目录挂载到容器外，使数据同步，容器之间也可以数据共享</p></blockquote></li><li><p><code>--volumes-from 容器id</code>：实现数据同步，链式结构头容器为父容器与宿主机挂载，保证数据不丢失</p></li></ul></li><li><p>限制容器内存</p><p><img src="https://s2.loli.net/2023/12/01/35ZaMPcA1gKDtm7.png" alt="memory"></p><ul><li><p>未启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -m 4g --memory-swap -1  <br></code></pre></td></tr></table></figure></li><li><p>已启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker stop containerId<br>docker update containerId -m 4g  --memory-swap -1<br>docker start containerId<br></code></pre></td></tr></table></figure></li></ul><p><strong>注意事项</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">--memory  或  -m  限制容器的内存使用量（如10m,200m等）<br>--memory-swap <span class="hljs-comment"># 限制内存和 Swap 的总和，不设置的话默认为--memory的两倍</span><br><br>如果只指定了 --memory 则 --memory-swap 默认为 --memory 的两倍<br>如果 --memory-swap 和 --memory 设置了相同值，则表示不使用 Swap<br>如果 --memory-swap 设置为 -1 则表示不对容器使用的 Swap 进行限制<br>如果设置了 --memory-swap 参数，则必须设置 --memory 参数<br><br>后期 update --memory 时数值不能超过 --memory-swap 的值，<br>否则会报错 Memory <span class="hljs-built_in">limit</span> should be smaller than already <span class="hljs-built_in">set</span> memoryswap <span class="hljs-built_in">limit</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 终端交互模式</span><br>docker run -it centos<br><br><span class="hljs-comment"># 后台运行模式</span><br>docker run -d centos <br><br><span class="hljs-comment"># 在挂载卷后加  ro 或 rw 表示指定容器内的目录的权限，ro为只读则容器内该目录只读，默认为rw读写</span><br>docker run -d -v /home/dkh:/home:ro centos<br><br><span class="hljs-comment">#退出容器</span><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment">#退出并后台运行</span><br>Ctrl + P + Q<br></code></pre></td></tr></table></figure><ul><li><p><code>docker ps [选项]</code>：查看当前运行的容器</p><ul><li><code>-a</code>：列出所有运行过的容器</li><li><code>-q</code>：只显示容器id</li></ul></li><li><p><code>docker rm [选项] 容器id</code>：删除容器</p><ul><li><code>-f</code>：强制删除</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#删除所有容器</span><br>docker <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;docker ps -aq&#125;</span><br><br>docker ps -aq | xargs docker <span class="hljs-built_in">rm</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker start 容器id</code>：启动容器</p></li><li><p><code>docker restart 容器id</code>：重启容器</p></li><li><p><code>docker stop 容器id</code>：停止容器</p></li><li><p><code>docker kill 容器id</code>：强制停止容器</p></li><li><p><code>docker commit [选项] 容器id 新镜像名:TAG</code></p><ul><li><code>-a=&quot;作者&quot;</code></li><li><code>-m=&quot;提交信息&quot;</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker commit -a=<span class="hljs-string">&quot;kongke&quot;</span> -m=<span class="hljs-string">&quot;设置tomcat主页&quot;</span> tomcat01 tomcat02:1.0<br></code></pre></td></tr></table></figure><blockquote><p>commit指令可以保存当前容器的状态，类似于虚拟机快照，提交变成新的镜像</p></blockquote></li></ul><h3 id="4-其他常用命令"><a href="#4-其他常用命令" class="headerlink" title="4. 其他常用命令"></a>4. 其他常用命令</h3><ul><li><p><code>docker logs [选项] 容器id</code>：查看日志</p><ul><li><code>-tf</code>：显示日志并带上时间戳</li><li><code>--tail 数字</code>：显示日志条数</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看该容器的最后5条日志，并监控最新日志</span><br>docker logs -tf --<span class="hljs-built_in">tail</span> 5 aas12sdas<br></code></pre></td></tr></table></figure></li><li><p><code>docker top</code>：查看容器内进程</p></li><li><p><code>docker inspect 容器id</code>：查看容器所有信息(元数据)</p></li><li><p><code>docker exec -it 容器id bashShell</code>：进入正在运行的容器(在容器中开启一个新的终端)</p></li><li><p><code>docker attach 容器id</code>：进入容器正在执行的终端</p></li><li><p><code>docker cp 容器id:容器内路径 目的主机路径</code>：从容器中复制文件到主机上</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span> 8150473976e6:/home/test.txt /home<br></code></pre></td></tr></table></figure><h2 id="三、常用镜像安装"><a href="#三、常用镜像安装" class="headerlink" title="三、常用镜像安装"></a>三、常用镜像安装</h2><h3 id="1-Nginx安装"><a href="#1-Nginx安装" class="headerlink" title="1. Nginx安装"></a>1. Nginx安装</h3><ul><li><p>搜索nginx镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search nginx<br></code></pre></td></tr></table></figure></li><li><p>下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx<br></code></pre></td></tr></table></figure></li><li><p>启动nginx容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 给镜像命名为nginx01 ，设置端口映射</span><br>docker run -d --name nginx01 -p 3344:80 nginx<br></code></pre></td></tr></table></figure><blockquote><p>注意此处需要打开防火墙3344端口</p></blockquote></li><li><p>查看启动情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps<br></code></pre></td></tr></table></figure></li><li><p>访问nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl localhost:3344<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it nginx01 /bin/bash<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-Tomcat安装"><a href="#2-Tomcat安装" class="headerlink" title="2. Tomcat安装"></a>2. Tomcat安装</h3><ul><li><p>查找并下载tomcat镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull tomcat:9.0<br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name tomcat01 -p 3355:8080 tomcat:9.0<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#因为镜像为精简版，运行成功后没有主页，但主页相关文件在webapps.dist中，将其复制到webapps中则可访问</span><br>docker <span class="hljs-built_in">exec</span> tomcat01 /bin/bash<br><br><span class="hljs-built_in">cp</span> -r webapps.dist/* webapps/<br></code></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> localhost:<span class="hljs-number">3355</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-ElasticSearch安装"><a href="#3-ElasticSearch安装" class="headerlink" title="3. ElasticSearch安装"></a>3. ElasticSearch安装</h3><ul><li><p>查找并下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull elasticsearch:7.6.2<br></code></pre></td></tr></table></figure></li><li><p>配置容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name es01 -p 9200:9200 -p 9300:9300 \<br><span class="hljs-comment"># 设置集群模式</span><br>-e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br><span class="hljs-comment"># 限制内存</span><br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64 -Xmx512m&quot;</span> \<br>elasticsearch:7.6.2<br></code></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl localhost:9200<br></code></pre></td></tr></table></figure></li><li><p>查看内存占用情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker stats<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-Mysql安装"><a href="#4-Mysql安装" class="headerlink" title="4. Mysql安装"></a>4. Mysql安装</h3><blockquote><p>mysql安装需要保证数据同步</p></blockquote><ul><li><p>查找并下载镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mysql:5.7<br></code></pre></td></tr></table></figure></li><li><p>启动并配置镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>-p 3307:3306 \<br><span class="hljs-comment"># 此处为数据卷挂载</span><br>-v /home/dkmysql/conf:/etc/mysql/conf.d \<br>-v /home/dkmysql/data:/var/lib/mysql \<br><span class="hljs-comment"># 设置mysql的密码</span><br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name mysql01 \<br>mysql:5.7<br></code></pre></td></tr></table></figure></li><li><p>利用三方软件登录测试</p></li></ul><h2 id="四、DockerFile"><a href="#四、DockerFile" class="headerlink" title="四、DockerFile"></a>四、DockerFile</h2><blockquote><p>DockerFile 就是用来构建 docker 镜像的<strong>命令脚本</strong></p></blockquote><h3 id="1-DockerFile指令"><a href="#1-DockerFile指令" class="headerlink" title="1. DockerFile指令"></a>1. DockerFile指令</h3><p><strong>常用指令</strong>：</p><ul><li><code>FROM</code>：指定基础镜像</li><li><code>MAINTAINER</code>：备注镜像作者 姓名+邮箱</li><li><code>RUN</code>：构建是需要执行的命令</li><li><code>ADD</code>：添加文件到镜像内，例如：压缩包</li><li><code>WORKDIR</code>：镜像的工作目录</li><li><code>VOLUME</code>：挂载的目录</li><li><code>EXPOSE</code>：暴露的端口</li><li><code>CMD</code>：容器启动时需要运行的命令，只有最后一个会生效，会被覆盖</li><li><code>ENTRYPOINT</code>：容器启动时需要运行的命令，命令可以追加</li><li><code>ONBUILD</code>：当构建一个被继承 DockerFile 时 会触发onbuild的指令</li><li><code>COPY</code>：类似ADD 将文件复制到镜像中</li><li><code>ENV</code>：构建时配置环境变量</li></ul><blockquote><p>CMD 与 ENTRYPOINT 的区别对比</p></blockquote><p><strong>测试CMD</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在cmd中，执行构建好的镜像时，不能追加命令，只能覆盖命令</span><br>] vim dkfile-cmd<br><br>FROM centos:7<br>CMD [<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>]<br><br>] docker build -f dkfile-cmd -t cmdtest .<br><span class="hljs-comment"># 此时如果在指令后追加指令例如入下想达到 ls -al的功能则会报错</span><br>] docker run cmdtest -l<br><span class="hljs-comment">#此处报错称 -l 不是命令，因为此处 -l 会覆盖掉dkfile-cmd中最后一个cmd的命令 【ls -a】</span><br><br><span class="hljs-comment">#但如果将命令写为</span><br>] docker run cmdtest <span class="hljs-built_in">ls</span> -al<br><span class="hljs-comment">#则会正确执行ls -al，因为ls -al 覆盖掉了dkfile-cmd中的【ls -a】</span><br></code></pre></td></tr></table></figure><p><strong>测试ENTRYPOINT</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 与上述环境相同</span><br><span class="hljs-comment"># 在ent中，执行构建好的镜像时,能追加命令</span><br>] vim dkfile-ent<br><br>FROM centos:7<br>ENTRYPOINT [<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>]<br><br>] docker build -f dkfile-ent -t enttest .<br><span class="hljs-comment"># 此时如果在指令后追加指令 【-l】</span><br>] docker run enttest -l<br><span class="hljs-comment">#此处会正确运行 【ls -al】指令，【-l】成功追加到 【ls -a】后</span><br></code></pre></td></tr></table></figure><h3 id="2-编写简单文件"><a href="#2-编写简单文件" class="headerlink" title="2. 编写简单文件"></a>2. 编写简单文件</h3><ul><li><p>构建自定义centos</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 注意此处需要指定版本，因为默认centos8  不再维护，官方镜像源中已移除</span><br><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><span class="hljs-keyword">MAINTAINER</span> kongke&lt;<span class="hljs-number">2843732083</span>@qq.com&gt;<br><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install vim</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----end----&quot;</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /bin/bash</span><br><br></code></pre></td></tr></table></figure></li><li><p>构建文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 注意最后的点表示在当前目录的上下文关系</span><br>docker build -f mydkfile-ct -t mycentos:0.1 .<br></code></pre></td></tr></table></figure></li><li><p>查看构建过程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">history</span> mycentos:0.1<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-编写Tomcat镜像"><a href="#3-编写Tomcat镜像" class="headerlink" title="3. 编写Tomcat镜像"></a>3. 编写Tomcat镜像</h3><p>创建镜像目录，结构为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--dkbuild</span><br><span class="hljs-attr">--dktomcat</span><br><span class="hljs-attr">--Dockerfile</span><br><span class="hljs-attr">--readme</span><span class="hljs-selector-class">.txt</span><br><span class="hljs-attr">--test</span><br><span class="hljs-attr">--dklogs</span><br></code></pre></td></tr></table></figure><ul><li><p>编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><span class="hljs-keyword">MAINTAINER</span> kongke&lt;<span class="hljs-number">2843732083</span>@qq.com&gt;<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> readme.txt /usr/local/readme.txt</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> jdk-8u202-linux-x64.tar.gz /usr/local</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.80.tar.gz /usr/local</span><br><br><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><br><span class="hljs-keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="hljs-number">8.0</span>_202<br><span class="hljs-keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">80</span><br><span class="hljs-keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">80</span><br><span class="hljs-keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$CATALINA_HOME/lib<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.80/bin/startup.sh</span><br><br></code></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 此处因为文件名为Dockerfile且在当前目录，所以不用指定文件</span><br>] docker build -t mytomcat .<br></code></pre></td></tr></table></figure></li><li><p>运行镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker run -it -p 9090:8080 --name mytomcat01 \<br><span class="hljs-comment"># 此处将项目目录挂载</span><br>-v /home/dkbuild/dktomcat/test:/usr/local/apache-tomcat-9.0.80/webapps/test \<br><span class="hljs-comment"># 将日志目录挂载</span><br>-v /home/dkbuild/dktomcat/dklogs:/usr/local/apache-tomcat-9.0.80/logs \<br>mytomcat /bin/bash<br></code></pre></td></tr></table></figure></li></ul><h2 id="五、发布镜像到远程仓库"><a href="#五、发布镜像到远程仓库" class="headerlink" title="五、发布镜像到远程仓库"></a>五、发布镜像到远程仓库</h2><h3 id="1-发布到DockerHub"><a href="#1-发布到DockerHub" class="headerlink" title="1. 发布到DockerHub"></a>1. 发布到DockerHub</h3><ul><li><p>登录DockerHub账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker login -u kongke7<br>password: <span class="hljs-comment">#输入密码</span><br>登录成功！<br></code></pre></td></tr></table></figure></li><li><p>更改镜像命名</p><blockquote><p>因为发布镜像的规范为 用户名&#x2F;镜像名:版本号 例如 -&gt; kongke7&#x2F;mytomcat:1.0</p><p>否则无法推送</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker tag 42c1543f639b kongke7/mytomcat:1.0 <br></code></pre></td></tr></table></figure></li><li><p>推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker push kongke7/mytomcat:1.0<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-发布到阿里云镜像仓库"><a href="#2-发布到阿里云镜像仓库" class="headerlink" title="2. 发布到阿里云镜像仓库"></a>2. 发布到阿里云镜像仓库</h3><ul><li>登录阿里云Docker Registry</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker login --username=kongke registry.cn-hangzhou.aliyuncs.com<br></code></pre></td></tr></table></figure><blockquote><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p></blockquote><ul><li>从Registry中拉取镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker pull registry.cn-hangzhou.aliyuncs.com/kongke7/kongke7-<span class="hljs-built_in">test</span>:[镜像版本号]<br></code></pre></td></tr></table></figure><ul><li>将镜像推送到Registry</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker login --username=kongke registry.cn-hangzhou.aliyuncs.com<br>$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/kongke7/kongke7-<span class="hljs-built_in">test</span>:[镜像版本号]<br>$ docker push registry.cn-hangzhou.aliyuncs.com/kongke7/kongke7-<span class="hljs-built_in">test</span>:[镜像版本号]<br></code></pre></td></tr></table></figure><blockquote><p>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p></blockquote><ul><li>选择合适的镜像仓库地址</li></ul><blockquote><p>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p>如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为Registry的域名登录。</p></blockquote><ul><li>示例</li></ul><blockquote><p>使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/kongke7/kongke7-<span class="hljs-built_in">test</span>:[镜像版本号]<br></code></pre></td></tr></table></figure><blockquote><p>使用 “docker push” 命令将该镜像推送至远程。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker push registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816<br></code></pre></td></tr></table></figure><h2 id="六、Docker网络"><a href="#六、Docker网络" class="headerlink" title="六、Docker网络"></a>六、Docker网络</h2><blockquote><p>当我们安装了Docker，就会多一个<strong>Docker0</strong>网卡，使用<strong>桥接模式</strong>连接网络</p><p>Docker每启动一个容器，都会为容器分配一个ip地址</p></blockquote><h3 id="1-Docker0"><a href="#1-Docker0" class="headerlink" title="1. Docker0"></a>1. Docker0</h3><blockquote><p>Docker0使用的<strong>veth-pair</strong>技术为容器间通信</p></blockquote><ul><li>使用  <code>ip addr</code>  命令查看地址，当启动了一个容器则会出现下图的网卡（75: veth2f50f93@if74）</li></ul><p><img src="https://s2.loli.net/2023/11/02/rMhz57yaNFJSgCe.png" alt="ipaddr"></p><ul><li>每当增加一个容器，则会对应多一对网卡（77: veth407b0c8@if76）</li></ul><p><img src="https://s2.loli.net/2023/11/02/8UsuB9qpiIKc7gC.png" alt="ipaddr2"></p><blockquote><p>则一对一对的网卡，就是veth-pair技术</p><p>veth-pair就是一对虚拟设备接口，一端连接协议，一端彼此相连</p><p>正因如此，veth-pair 充当一座桥梁，连接各种虚拟设备</p></blockquote><ul><li>如图所示，veth-pair连接的原理</li></ul><p><img src="https://s2.loli.net/2023/11/02/1tjQLpTMIv29rXH.png" alt="vethpair"></p><h3 id="2-自定义网路"><a href="#2-自定义网路" class="headerlink" title="2.自定义网路"></a>2.自定义网路</h3><ul><li><p><strong>网络模式</strong></p><table><thead><tr><th>模式</th><th>介绍</th></tr></thead><tbody><tr><td>bridge</td><td>桥接模式，docker默认</td></tr><tr><td>host</td><td>主机模式，与宿主机共享网路</td></tr><tr><td>none</td><td>不配置网络</td></tr><tr><td>container</td><td>容器网络连通（不常用，局限性大）</td></tr></tbody></table></li><li><p><strong>查看docker网络信息</strong></p><ul><li><p><code>docker network ls</code>：查看网络信息 （其中bridge为Docker0）</p><p><img src="https://s2.loli.net/2023/11/02/rJ3XF8b1EHfz94p.png" alt="network"></p></li><li><p><code>docker network inspect 网络id </code>：查看某个网络的具体信息</p></li></ul></li><li><p><strong>创建自定义网络</strong></p><ul><li><code>--driver</code>：网络模式，默认bridge</li><li><code>--subnet</code>：子网（划分网段）</li><li><code>--gateway</code>：网关（通常为当前网段的第一个ip）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~]  docker network create \<br>--driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet<br><br>4a17ecbfac448947ed9c0711ed291b3a63049832f8d23c3722e238bae15accc9<br>[root@localhost ~]  docker network <span class="hljs-built_in">ls</span><br>NETWORK ID     NAME      DRIVER    SCOPE<br>f26af714313b   bridge    bridge    <span class="hljs-built_in">local</span><br>50828ab4f805   host      host      <span class="hljs-built_in">local</span><br>4a17ecbfac44   mynet     bridge    <span class="hljs-built_in">local</span><br>e412b2fb7593   none      null      <span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure></li><li><p><strong>将容器运行到指定网络</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~] docker run -d -name tomcat-net-01 --net mynet tomcat<br></code></pre></td></tr></table></figure></li><li><p>此时自定义网络内的容器可以通过容器名相互访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~] docker <span class="hljs-built_in">exec</span> -it tomcat-net-01 ping tomcat-net-02<br></code></pre></td></tr></table></figure></li><li><p><strong>网络连通</strong></p><blockquote><p>因为网络之间相互隔离，正常情况下一个网络中的容器无法连通另一网络中的容器，</p><p>但是，通过将容器与另一网络相连则可实现网络连通</p><p>即，一个容器两个ip</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker network connect mynet tomcat01<br></code></pre></td></tr></table></figure></li></ul><h2 id="七、实战部署"><a href="#七、实战部署" class="headerlink" title="七、实战部署"></a>七、实战部署</h2><h3 id="1-Redis集群部署"><a href="#1-Redis集群部署" class="headerlink" title="1. Redis集群部署"></a>1. Redis集群部署</h3><ul><li><p>创建redis节点并启动各节点容器</p><p><strong>编写shell脚本执行任务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for port in $(seq 1 6);<br>do<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建节点</span><br><br>        mkdir -p /mydata/dkredis/node-$&#123;port&#125;/conf<br>        touch /mydata/dkredis/node-$&#123;port&#125;/conf/redis.conf<br>        cat &lt;&lt; EOF &gt;/mydata/dkredis/node-$&#123;port&#125;/conf/redis.conf<br>port 6379<br>bind 0.0.0.0<br>cluster-enabled yes<br>cluster-config-file nodes.conf<br>cluster-node-timeout 5000<br>cluster-announce-ip 172.38.0.1$&#123;port&#125;<br>cluster-announce-port 6379<br>cluster-announce-bus-port 16379<br>appendonly yes<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动节点容器</span><br>docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \<br>-v /mydata/dkredis/node-$&#123;port&#125;/data:/data \<br>-v /mydata/dkredis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis-net --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf;<br><br>done<br><br></code></pre></td></tr></table></figure></li><li><p>创建redis集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis-1节点容器</span><br><span class="hljs-comment"># 创建redis集群</span><br>] redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 \<br>172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/TWvGdbUDK3C6OYk.png" alt="redis-jq"></p></li><li><p>进入redis-1节点查看集群信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入节点</span><br>/data ] redis-cli -c<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看集群信息</span><br>127.0.0.1:6379&gt; cluster info<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/11/02/KDZoRQU4PInavCW.png" alt="info" style="zoom:67%;" /><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看节点信息</span><br>127.0.0.1:6379&gt; cluster nodes<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/SxQhXfvFdaiwN24.png" alt="nodes"></p></li><li><p><strong>部署成功</strong></p></li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">       _ _                /\/|<span class="hljs-string"></span><br><span class="hljs-string">      (_) </span>|<span class="hljs-string">              </span>|<span class="hljs-string">/\/ </span><br><span class="hljs-string"> _ __  _</span>|<span class="hljs-string"> </span>|<span class="hljs-string">__   __ _  ___     </span><br><span class="hljs-string"></span>|<span class="hljs-string"> &#x27;_ \</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> &#x27;_ \ / _` </span>|<span class="hljs-string">/ _ \    </span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (_) </span>|<span class="hljs-string">   </span><br><span class="hljs-string"></span>|<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>|<span class="hljs-string">\__,_</span>|<span class="hljs-string">\___/    </span><br><span class="hljs-string">                              </span><br><span class="hljs-string">                              </span><br></code></pre></td></tr></table></figure><h3 id="2-部署Springboot项目"><a href="#2-部署Springboot项目" class="headerlink" title="2. 部署Springboot项目"></a>2. 部署Springboot项目</h3><ul><li><p>编写简单springboot项目，并打成  <code>jar包</code> </p></li><li><p>编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><br><br><span class="hljs-keyword">MAINTAINER</span> kongke&lt;<span class="hljs-number">2843732083</span>@qq.com&gt;<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> *.jar /app.jar</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;--server.port=8080&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>将<code>jar包</code>和<code>Dockerfile</code>上传至虚拟机</p></li><li><p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker build -t javawebtest:1.0 .<br></code></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] docker run -d -p 8080:8080 --name javaweb javawebtest:1.0<br></code></pre></td></tr></table></figure></li><li><p>测试接口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">] curl localhost:8080/hello<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/02/VuQXjskAnGywmE4.png" alt="res"></p></li><li><p><strong>部署成功！</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8-新特性</title>
    <link href="/2023/12/10/Java8/"/>
    <url>/2023/12/10/Java8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h1><blockquote><p>Java 8   的新特性</p></blockquote><h2 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><ul><li><code>(参数) -&gt; &#123;方法体&#125;</code></li><li><code>参数 -&gt; &#123;方法体&#125;</code>：当只有一个参数时，可以省略小括号</li><li><code>(参数) -&gt; 方法体</code>：当方法体只有一条语句时，可以省略大括号</li></ul><blockquote><ol><li>无参无返回值</li></ol></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法          </span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">run1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                  System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          <span class="hljs-type">Runnable</span> <span class="hljs-variable">run2</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>一个参数 ， 无返回值</li></ol></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法             </span><br>Consumer&lt;String&gt; con1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                  System.out.println(s);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          Consumer&lt;String&gt; con2 = (String s) -&gt; &#123;<br>              System.out.println(s);<br>          &#125;;<br>          <span class="hljs-comment">// 当方法体只有一条语句时，大括号可以省略，（有无返回值都一样）</span><br>          Consumer&lt;String&gt; con3 = (String s) -&gt; System.out.println(s);<br>          <span class="hljs-comment">// 参数类型可以省略   (类型推断)</span><br>          Consumer&lt;String&gt; con4 = (s) -&gt; System.out.println(s);<br>          <span class="hljs-comment">// 一个参数可以省略括号</span><br>          Consumer&lt;String&gt; con5 = s -&gt; System.out.println(s);<br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>有两个以上接口，并且有返回值，有多条语句</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常写法        </span><br>Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                  System.out.println(<span class="hljs-string">&quot;两数比较&quot;</span>);<br>                  <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>              &#125;<br>          &#125;;<br>          <span class="hljs-comment">// lambda</span><br>          <span class="hljs-comment">// 单条语句</span><br>          Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; o1.compareTo(o2);<br>          <span class="hljs-comment">// 多条语句</span><br>          Comparator&lt;Integer&gt; com3 = (o1, o2) -&gt; &#123;<br>              System.out.println(<span class="hljs-string">&quot;HHH&quot;</span>);<br>              <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>          &#125;;<br></code></pre></td></tr></table></figure><h3 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h3><ul><li><p><strong>Java四个基本函数式接口</strong></p><table><thead><tr><th>名称</th><th>抽象方法</th></tr></thead><tbody><tr><td>Consumer<T>  消费型</td><td>void accept(T t)</td></tr><tr><td>Predicate<T>    判定型</td><td>boolean test(T t)</td></tr><tr><td>Supplier<T>      供给型</td><td>T get()</td></tr><tr><td>Function&lt;T,R&gt;   函数型</td><td>R apply(T t)</td></tr></tbody></table></li><li><p>示例</p><ul><li><p><code>Consumer&lt;T&gt;</code> 消费型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterCons</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 正常写法</span><br>        cons(<span class="hljs-number">500.0</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Double&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;消费%.2f元\n&quot;</span>, aDouble);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//lambda</span><br>        cons(<span class="hljs-number">500.0</span>, money -&gt; System.out.printf(<span class="hljs-string">&quot;消费%.2f元\n&quot;</span>, money));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cons</span><span class="hljs-params">(Double money, Consumer&lt;Double&gt; con)</span> &#123;<br>        con.accept(money);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt;</code> 判定型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterPre</span><span class="hljs-params">()</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;AB&quot;</span>, <span class="hljs-string">&quot;AC&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>);<br>        <span class="hljs-comment">// 正常写法</span><br>    List&lt;String&gt; res = pres(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;String&gt;() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 判定条件</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> s.contains(<span class="hljs-string">&quot;A&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        System.out.println(pres(list, s -&gt; s.contains(<span class="hljs-string">&quot;A&quot;</span>)));<br><br>        System.out.println(res);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">pres</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-comment">// pre中只有一个方法</span><br>            <span class="hljs-keyword">if</span> (pre.test(s)) &#123;<br>                res.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Supplier&lt;T&gt;</code> 供给型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterSup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 正常写法</span><br>    supp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;str&quot;</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        supp(() -&gt; <span class="hljs-string">&quot;str&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">supp</span><span class="hljs-params">(Supplier&lt;String&gt; sup)</span> &#123;<br>        System.out.println(sup.get());<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Function&lt;T,R&gt;</code> 函数型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionInterFunc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 正常写法</span><br>    func((<span class="hljs-type">byte</span>) <span class="hljs-number">127</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Byte, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Byte aByte)</span> &#123;<br>                <span class="hljs-keyword">return</span> aByte + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// lambda</span><br>        func((<span class="hljs-type">byte</span>) -<span class="hljs-number">128</span>, b -&gt; b - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(Byte bytes, Function&lt;Byte, Integer&gt; func)</span> &#123;<br>        System.out.println(func.apply(bytes));<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3. 方法引用"></a>3. 方法引用</h3><blockquote><p>实现的方法需要与抽象方法参数类型及返回值类型一致</p></blockquote><ul><li><p>使用格式：<code>类(或对象) :: 方法名</code></p><ul><li><p><code>类 :: 静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Supplier&lt;Long&gt; sup2 = System::currentTimeMillis;<br>      System.out.println(sup2.get());<br>      <span class="hljs-comment">// Comparator&lt;T&gt; int compare(T t1 , T t2)</span><br>      Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; Integer.compare(o1, o2);<br>      Comparator&lt;Integer&gt; com2 = Integer::compare;<br>com1.compare(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>类 :: 非静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// BiPredicate&lt;T,T&gt; boolean test(T t1, T t2)</span><br>      BiPredicate&lt;String, String&gt; bip = (s1, s2) -&gt; s1.equals(s2);<br>      <span class="hljs-comment">// String boolean s1.equals(s2)</span><br>      BiPredicate&lt;String, String&gt; bip2 = String::equals;<br>bip.test(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>对象 :: 非静态方法名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Consumer&lt;String&gt; cons = s -&gt; System.out.println(s);<br>      <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>      cons = ps::println;<br>cons.accept(<span class="hljs-string">&quot;str&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-构造器引用"><a href="#4-构造器引用" class="headerlink" title="4. 构造器引用"></a>4. 构造器引用</h3><blockquote><p>需要与抽象方法参数类型及返回值类型一致<br>需要实体类中存在对应的有参构造器</p></blockquote><ul><li><p><strong>无参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Supplier&lt;Book&gt; sup = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>Supplier&lt;Book&gt; sup2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sup.get();<br></code></pre></td></tr></table></figure></li><li><p><strong>有参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">Function&lt;String, Book&gt; func1 = s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(s);<br>Function&lt;String, Book&gt; func2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> func1.apply(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-type">Book</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> func2.apply(<span class="hljs-string">&quot;B&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>多参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">BiFunction&lt;String, Integer, Book&gt; bf1 = (s, i) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(s, i);<br>BiFunction&lt;String, Integer, Book&gt; bf2 = Book::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> bf1.apply(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">10</span>);<br><span class="hljs-type">Book</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> bf2.apply(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-数组引用"><a href="#5-数组引用" class="headerlink" title="5. 数组引用"></a>5. 数组引用</h3><blockquote><p>将数组看成一个对象 ， 与构造器引用类似</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">Function&lt;Integer, String[]&gt; fun1 = len -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[len];<br>Function&lt;Integer, String[]&gt; fun2 = String[]::<span class="hljs-keyword">new</span>;<br><br>String[] arr = fun1.apply(<span class="hljs-number">5</span>);<br>String[] arr1 = fun2.apply(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h2 id="二、Stream-API"><a href="#二、Stream-API" class="headerlink" title="二、Stream API"></a>二、Stream API</h2><blockquote><p>Stream流获取操作对象，不改变原对象的值</p></blockquote><table><thead><tr><th>类型</th><th>定义</th></tr></thead><tbody><tr><td>顺序流</td><td>Stream<T>  stream()</td></tr><tr><td>并行流</td><td>Stream<T>  parallelStream()</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//        default Stream&lt;T&gt; stream() 顺序流</span><br>        Stream&lt;Book&gt; stream = books.stream();<br><span class="hljs-comment">//        default Stream&lt;T&gt; parallelStream() 并行流</span><br>        Stream&lt;Book&gt; praStream = books.parallelStream();<br></code></pre></td></tr></table></figure><h3 id="1-获取流"><a href="#1-获取流" class="headerlink" title="1. 获取流"></a>1. 获取流</h3><ul><li><p>集合获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">        List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//        default Stream&lt;T&gt; stream() 顺序流</span><br>        Stream&lt;Book&gt; stream = books.stream();<br></code></pre></td></tr></table></figure></li><li><p>数组获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"> <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">intStream</span> <span class="hljs-operator">=</span> Arrays.stream(arr);<br><span class="hljs-comment">//      支持泛型</span><br>        Book[] bookArr = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;a&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;b&quot;</span>)&#125;;<br>        Stream&lt;Book&gt; bookStream = Arrays.stream(bookArr);<br></code></pre></td></tr></table></figure></li><li><p>Stream.of() 创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>Stream&lt;Book&gt; bookStream1 = Stream.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>());<br></code></pre></td></tr></table></figure></li><li><p>无限流</p><ul><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//  public static&lt;T&gt; Stream&lt;T&gt; </span><br><span class="hljs-comment">//iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span><br>Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>)<br>    .limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p>生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; S)     </span><br>Stream.generate(Math::random)<br>    .limit(<span class="hljs-number">5</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-中间操作"><a href="#2-中间操作" class="headerlink" title="2. 中间操作"></a>2. 中间操作</h3><ul><li><p><strong>过滤</strong>   <code>filter&lt;P&gt;</code></p><blockquote><p>根据过滤器中的 Predicate 过滤</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span><br>Stream&lt;Book&gt; bookStream = books.stream();<br><span class="hljs-comment">// filter 过滤价格大于50的书📕</span><br>bookStream.filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><strong>截断</strong>   <code>limit(n)</code></p><blockquote><p>截取流中前 n 个数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().limit(<span class="hljs-number">5</span>).forEach(books1::add);<br></code></pre></td></tr></table></figure></li><li><p><strong>跳过</strong>   <code>skip(n)</code></p><blockquote><p>跳过前 n 个数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().skip(<span class="hljs-number">5</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><strong>筛选</strong>   <code>distinct()</code></p><blockquote><p>通过流产生的 hashCode 和 equals 去除重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream().distinct().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul><p><strong>Map映射操作</strong></p><ul><li><p><code>map(Function f)</code></p><blockquote><p>接收一个函数作为参数，这个函数会作用到每一个元素上，并映射成为一个新的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将小写字母映射为大写返回</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br>String[] arr = &#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>&#125;;<br><span class="hljs-comment">// 列表</span><br>list.stream().map(String::toUpperCase).forEach(System.out::println);<br><span class="hljs-comment">// 数组</span><br>Arrays.stream(arr).map(String::toUpperCase).forEach(System.out::println);<br></code></pre></td></tr></table></figure><ul><li><p>获取Books中价格大于30的书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">books.stream()<br>    .map(Book::getPrice)<br>    .filter(s -&gt; s &gt; <span class="hljs-number">30</span>)<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>flatMap(Function f)</code></p><blockquote><p>接收一个函数作为参数，将流中的每一个值都转换成一个流，最后将所有的流合成一个流</p></blockquote><ul><li><p>将 <code>[[a,a],[b,b],[c,c]] </code>  变成  <code> [a,a,b,b,c,c]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 本类为 StreamA</span><br><span class="hljs-comment">// list = Arrays.asList(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;);</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串转化为流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title function_">strToStream</span><span class="hljs-params">(String str)</span> &#123;<br>   List&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   <span class="hljs-keyword">for</span> (Character c : str.toCharArray()) &#123;<br>       list.add(c);<br>   &#125;<br>   <span class="hljs-keyword">return</span> list.stream();<br>&#125;<br><br><span class="hljs-comment">// 使用普通map 返回值类型为流的集合</span><br>Stream&lt;Stream&lt;Character&gt;&gt; streamStream = <br>    list.stream().map(StreamA::strToStream);<br>    <span class="hljs-comment">// 遍历每个流中的每一个元素</span><br>streamStream.forEach(s -&gt; &#123;<br>   s.forEach(System.out::println);<br>&#125;);<br><br><span class="hljs-comment">//使用flatMap 返回的类型为一个流</span><br>Stream&lt;Character&gt; characterStream = <br>    list.stream().flatMap(StreamA::strToStream);<br><br>characterStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>Sorted排序操作</strong></p><ul><li><p><code>sorted()</code>  自然排序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">65</span>, <span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">99</span>, <span class="hljs-number">23</span>, <span class="hljs-number">11</span>);<br><span class="hljs-comment">// (默认从小到大)</span><br>list.stream().sorted().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><code>sorted(Comparator com)</code>   自定义排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = Book.getBooks(<span class="hljs-number">10</span>);<br>books.stream()<br>    .sorted(Comparator.comparingInt(Book::getPrice))<br>    .forEach(System.out::println);<br><span class="hljs-comment">// 加上 - 号 表示改变顺序</span><br>books.stream()<br>    .sorted((b1,b2) -&gt; - Integer.compare(b1.getPrice(), b2.getPrice()))<br>    .forEach(System.out::println);<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-终止操作"><a href="#3-终止操作" class="headerlink" title="3. 终止操作"></a>3. 终止操作</h3><blockquote><p>操作结束后会关闭流</p></blockquote><p><strong>基本常见操作</strong></p><ul><li><p><code>forEach(Consumer con)</code>  将元素遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p><code>allMatch(Predicate p)</code>   检查是否匹配所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().allMatch(b -&gt; b.getPrice() &lt; <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>anyMatch(Predicate p)</code>   检查是否至少匹配一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().anyMatch(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>noneMatch(Predicate p)</code> 检查是否 没有匹配的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">books.stream().noneMatch(b -&gt; b.getName().startsWith(<span class="hljs-string">&quot;a&quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p><code>findFirst()</code>  取流中的第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Book&gt; first = books.stream().findFirst();<br></code></pre></td></tr></table></figure></li><li><p><code>findAny()</code>   取流中的任意一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Book&gt; any = books.parallelStream().findAny();<br></code></pre></td></tr></table></figure></li></ul><p><strong>计数操作</strong></p><ul><li><p><code>count()</code>    返回流中集合个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> books.stream().filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>).count();<br></code></pre></td></tr></table></figure></li><li><p><code>max(Comparator c)</code>   返回流中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Stream&lt;Integer&gt; priceStream = books.stream().map(Book::getPrice);<br>Optional&lt;Integer&gt; max = priceStream.max(Integer::compare);<br></code></pre></td></tr></table></figure></li><li><p><code>min(Comparator c)</code>   返回流中的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Integer&gt; min = books.stream()<br>    .map(Book::getPrice).min(Integer::compareTo);<br></code></pre></td></tr></table></figure></li></ul><p><strong>归约操作</strong></p><blockquote><p>将流中的集合反复结合起来，得到一个值</p></blockquote><ul><li><p><code>reduce(T identity , BinaryOperator bo)</code>  得到一个值，返回 <code>T</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, (i, j) -&gt; i + j);<br><span class="hljs-comment">// 或</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br></code></pre></td></tr></table></figure></li><li><p><code>reduce(BinaryOperator bo)</code>  得到一个值，返回 <code>Optional&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">Optional&lt;Integer&gt; sumPrice = books.stream()<br>    .map(Book::getPrice).reduce(Integer::sum);<br></code></pre></td></tr></table></figure></li></ul><p><strong>收集操作</strong></p><blockquote><p>将流中的元素转化为其他形式，接收一个Collector接口的实现，用于对流中的对象进行汇总</p></blockquote><ul><li><p><code>collect(Collector c)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; collect = <br>    books.stream()<br>    .filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br>    .collect(Collectors.toList());<br><span class="hljs-comment">// 或</span><br>List&lt;Book&gt; collect2 = <br>    books.stream()<br>    .filter(b -&gt; b.getPrice() &gt; <span class="hljs-number">50</span>)<br>    .collect(Collectors.toCollection(ArrayList&lt;Book&gt;::<span class="hljs-keyword">new</span>));<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 常见：</span><br>Collectors.toList() <br>Collectors.toSet() <br>Collectors.toCollection(Supplier s)<br></code></pre></td></tr></table></figure><h2 id="三、Optional-类"><a href="#三、Optional-类" class="headerlink" title="三、Optional 类"></a>三、Optional 类</h2><blockquote><p>用来预防空指针</p><p>就能不用显示进行空指针检测</p></blockquote><h3 id="1-创建实例"><a href="#1-创建实例" class="headerlink" title="1. 创建实例"></a>1. 创建实例</h3><ul><li><p><code>Optional.of(T t)</code>   创建一个 Optional实例 ， t  必须非空</p></li><li><p><code>Optional.empty()</code>  创建一个空的Optional 实例</p></li><li><p><code>Optional.ofNullable(T t)</code>  创建一个 Optional实例 ， t 可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOptional</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-type">Library</span> <span class="hljs-variable">lib</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Library</span>();<br><span class="hljs-comment">// lib = null;</span><br><span class="hljs-comment">// 如 lib = null 会报错 空指针 因为of中的示例不能为空</span><br>   Optional&lt;Library&gt; olib = Optional.of(lib);<br><br><span class="hljs-comment">// empty() 创建一个空的Optional 实例</span><br>   Optional&lt;Object&gt; empty = Optional.empty();<br>   System.out.println(empty);<br><br><span class="hljs-comment">//  ofNullable(T t) 创建一个 Optional实例 ， t可以为空</span><br>    Optional&lt;Library&gt; olib1 = Optional.ofNullable(lib);<br><br>    System.out.println(olib1);<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-获取容器中的对象"><a href="#2-获取容器中的对象" class="headerlink" title="2. 获取容器中的对象"></a>2. 获取容器中的对象</h3><ul><li><code>T get()</code> 调用的容器中有对象，不能为空</li><li><code>T orElse(T other)</code> 如果容器中有对象则返回 ， 没有则返回指定的 other对象</li><li><code>boolean isPresent()</code> 是否包含对象</li></ul><h3 id="3-预防空指针"><a href="#3-预防空指针" class="headerlink" title="3. 预防空指针"></a>3. 预防空指针</h3><p><strong>例 ：获取书名预防空指针异常</strong></p><ul><li><p>在 <code>Optional </code>以前防止空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取书籍名称</span><br><span class="hljs-comment"> * 在Optional以前防止空指针</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">(Library lib)</span>&#123;<br>    <span class="hljs-keyword">if</span> (lib != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">if</span> (lib.getBook() != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">return</span> lib.getBook().getName();<br>    &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Optional </code>防止空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookNameOp</span><span class="hljs-params">(Library lib)</span>&#123;<br><br>    Optional&lt;Library&gt; libo = Optional.ofNullable(lib);<br>    <span class="hljs-comment">// 这里解决 lib == null</span><br>    <span class="hljs-comment">// 如果 lib == null 则返回书名为 AA</span><br>    <span class="hljs-type">Library</span> <span class="hljs-variable">lib1</span> <span class="hljs-operator">=</span> libo.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Library</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;AA&quot;</span>)));<br><br><span class="hljs-comment">//  此时lib1不为空</span><br><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> lib1.getBook();<br><br>    Optional&lt;Book&gt; booko = Optional.ofNullable(book1);<br>    <span class="hljs-comment">// 这里解决 lib.getBook() == null</span><br>    <span class="hljs-comment">// 如果 lib != null 且 lib.book == null 则返回书名为 BB</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> booko.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;BB&quot;</span>));<br><br><span class="hljs-comment">//  此时book不为空</span><br>    <span class="hljs-keyword">return</span> book.getName();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="一、语法与元字符"><a href="#一、语法与元字符" class="headerlink" title="一、语法与元字符"></a>一、语法与元字符</h2><h3 id="1-基本语法与元字符"><a href="#1-基本语法与元字符" class="headerlink" title="1. 基本语法与元字符"></a>1. 基本语法与元字符</h3><ul><li><p>基本语法与元字符</p><p><img src="https://s2.loli.net/2023/11/02/fopEa5KnHdjAe9D.png" alt="yufa1"></p><p><img src="https://s2.loli.net/2023/11/02/3UCb2DxnqPF4hsN.png" alt="yufa2"></p></li><li><p><code>\\s</code>：匹配空白字符</p></li><li><p><code>\\S</code>：与<code>\\s</code>取反，匹配任意非空白字符</p></li><li><p><code>.</code>：匹配除换行符外的所有字符（Java中换行符为 <code>\n</code>）</p></li><li><p><code>(?i)</code> 忽略大小写</p><ul><li><code>a(?i)bc</code> 对bc忽略大小写</li><li><code>a((?i)b)c</code> 对b忽略大小写</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 在Java中 加上Pattern.CASE_INSENSITIVE 也表示忽略大小写</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex , Pattern.CASE_INSENSITIVE);<br></code></pre></td></tr></table></figure><ul><li><p><code>|</code> ：选择匹配符</p><ul><li><code>ab|cd</code>：匹配 <code>ab</code> 或者 <code>cd</code></li></ul></li></ul><h3 id="2-限定符"><a href="#2-限定符" class="headerlink" title="2. 限定符"></a>2. 限定符</h3><blockquote><p>用于指定其之前的字符或组合连续出现的次数</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/AucSWZJjmPVqUI4.png" alt="yufa3"></p><p><img src="https://s2.loli.net/2023/11/02/Oxi9W41HkvMhwCq.png" alt="yufa4"></p><h3 id="3-定位符"><a href="#3-定位符" class="headerlink" title="3. 定位符"></a>3. 定位符</h3><blockquote><p>规定字符在字符串中的位置</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/oB5vE4R7wOiLhaK.png" alt="dw"></p><ul><li><code>\\b</code>：这里边界指一个单词的结尾 若字符串中有空格，则空格作为分隔符分隔单词</li><li><code>\\B</code>：指每个单词的开头或中间</li></ul><h3 id="4-捕获分组"><a href="#4-捕获分组" class="headerlink" title="4. 捕获分组"></a>4. 捕获分组</h3><p><img src="https://s2.loli.net/2023/11/02/vTNwWRPfGpgxFCd.png" alt="fz"></p><ul><li><p><code>(pattern)</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;([0-9]&#123;2&#125;)(\\d)(\\d)&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>(?&lt;name&gt;pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?&lt;g1&gt;[0-9]&#123;2&#125;)(?&lt;g2&gt;\\d)(?&lt;g3&gt;\\d)&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-非捕获分组"><a href="#5-非捕获分组" class="headerlink" title="5.非捕获分组"></a>5.非捕获分组</h3><p><img src="https://s2.loli.net/2023/11/02/c7vGm5Nj9oOACwM.png" alt="fz2"></p><ul><li><p><code>(?:pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack=10 bob=19 tom=10&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?:10)&quot;</span>;<br><span class="hljs-comment">//得到 jack=10 tom=10</span><br></code></pre></td></tr></table></figure></li><li><p><code>(?=pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?=10)&quot;</span>;<br><span class="hljs-comment">//得到 jack= tom=</span><br></code></pre></td></tr></table></figure></li><li><p><code>(?!pattern)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w*=(?!10)&quot;</span>;<br><span class="hljs-comment">//得到 bob=</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-反向引用"><a href="#6-反向引用" class="headerlink" title="6.反向引用"></a>6.反向引用</h3><blockquote><p>内部：在正则表达式中引用</p><p>外部：在其他方法中引用</p></blockquote><ul><li><code>\\n</code> 内部反向引用<ul><li>表示正则式中第n组匹配的值</li><li>**n **  表示一个捕获分组，在group中的组序号</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12312-111222333&quot;</span>;<br><span class="hljs-comment">// 匹配如 15237-333444555 的编号</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>$n</code> 外部反向引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern1</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher1</span> <span class="hljs-operator">=</span> pattern1.matcher(s);<br><span class="hljs-comment">// 使用外部反向引用，$1 表示正则式中的第一个分组捕获的值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> matcher1.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-贪婪匹配与懒惰匹配"><a href="#7-贪婪匹配与懒惰匹配" class="headerlink" title="7. 贪婪匹配与懒惰匹配"></a>7. 贪婪匹配与懒惰匹配</h3><blockquote><p>正则表达式中默认为贪婪匹配</p><p>懒惰匹配  -&gt; 尽可能少的匹配</p><p>默认为贪婪匹配  -&gt; 尽可能多的匹配</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/qkhG4mK7vg1B5oC.png" alt="lazzy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;asd123123ds&quot;</span>;<br><span class="hljs-comment">// 默认贪婪匹配</span><br><span class="hljs-comment">// String regex = &quot;\\d+&quot;;</span><br><span class="hljs-comment">// 得到123123</span><br><br><span class="hljs-comment">// 懒惰匹配</span><br><span class="hljs-comment">// tring regex = &quot;\\d+?&quot;;</span><br><span class="hljs-comment">// 得到 1 2 3 1 2 3</span><br><br><span class="hljs-comment">// String regex = &quot;&lt;\\w.+&gt;&quot;;</span><br><span class="hljs-comment">// 得到 &lt;b name=123/&gt;&lt;b name=321/&gt;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;b name=123/&gt;&lt;b name=321/&gt;&quot;</span>;<br><span class="hljs-comment">// 懒惰匹配</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;\\w.+?&gt;&quot;</span>;<br><span class="hljs-comment">// 得到 &lt;b name=123/&gt;和&lt;b name=321/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、Java中常用的三个类"><a href="#三、Java中常用的三个类" class="headerlink" title="三、Java中常用的三个类"></a>三、Java中常用的三个类</h2><h3 id="1-Pattern"><a href="#1-Pattern" class="headerlink" title="1. Pattern"></a>1. Pattern</h3><ul><li><p><code>matches(regex , url)</code> 整体匹配，只能返回Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(regex, url);<br></code></pre></td></tr></table></figure></li><li><p><code>compile(regex)</code> 返回正则表达式对象 能用于生成匹配器对象 传入匹配器的字符串中只要有符合的就能匹配，能输出结果值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<br><br><span class="hljs-keyword">while</span> (matcher.find())&#123;<br>    System.out.println(matcher.group(<span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-Matcher"><a href="#2-Matcher" class="headerlink" title="2. Matcher"></a>2. Matcher</h3><blockquote><p>matcher 是一个匹配对象</p></blockquote><p><img src="https://s2.loli.net/2023/11/02/7H1lKGa4LRvJIiu.png" alt="matcher"></p><p><img src="https://s2.loli.net/2023/11/02/vxWUclC8OnhNA2D.png" alt="matcher2"></p><h3 id="3-String"><a href="#3-String" class="headerlink" title="3. String"></a>3. String</h3><ul><li><p><code>replaceAll(regex , s)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdk1.3dadasdasdjdk1.4asdas3423dfsjdk1.5&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;jdk\\d+\\.\\d+&quot;</span>, <span class="hljs-string">&quot;JDK&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>matches(regex)</code> 整体匹配</p></li><li><p><code>split(regex)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AAA#CCC&amp;AAA~CCC12GGG&quot;</span>;<br><span class="hljs-comment">//用#~&amp;数字分割字符串</span><br>str2.split(<span class="hljs-string">&quot;[#&amp;~]|\\d+&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、实际应用"><a href="#二、实际应用" class="headerlink" title="二、实际应用"></a>二、实际应用</h2><h3 id="1-判断汉字"><a href="#1-判断汉字" class="headerlink" title="1. 判断汉字"></a>1. 判断汉字</h3><blockquote><p>注意汉字的编码范围在    <strong><code>\u0391-\uffe5</code></strong> ，**<code>\u4e00-\u9fa5</code>**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好你好你好&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\u4e00-\u9fa5]+$&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-判断邮编"><a href="#2-判断邮编" class="headerlink" title="2. 判断邮编"></a>2. 判断邮编</h3><blockquote><p>以1开头的六位数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;110203&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="3-判断URL"><a href="#3-判断URL" class="headerlink" title="3. 判断URL"></a>3. 判断URL</h3><p><code>^((http)s?://)?([\\w-]+\\.)+[a-zA-Z0-9]+((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$</code></p><ul><li><p>&#96;&#96;^((http)s?:&#x2F;&#x2F;)?&#96;</p><ul><li>s 可有可无</li><li>https:&#x2F;&#x2F; 可有可无</li></ul></li><li><p><code>([\\w-]+\\.)+</code> </p><ul><li>可能存在多级域名<ul><li>abc.dc.aaa.com.cn</li></ul></li></ul></li><li><p><code>[a-zA-Z0-9]+</code> </p><ul><li>域名结尾</li></ul></li><li><p><code>((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$</code></p><ul><li><p><code>(/[\\w-#]+)+</code></p><ul><li>可能存在所层路径<ul><li>&#x2F;video&#x2F;aa&#x2F;bb</li></ul></li></ul></li><li><p><code>\\?</code> </p><ul><li>路径结尾带有参数</li></ul></li><li><p><code>([\\w-]+=[\\w-]+&amp;?)*</code></p><ul><li><code>[\\w-]+</code> 参数名由这些字符组成</li><li><code>=</code> 名与值之间用 &#x3D; 相连</li><li><code>[\\w-]+</code> 参数值由这些字符组成</li><li><code>&amp;?</code> 每对参数之间用 &amp; 相连，若只有一对参数则无需&amp;</li><li><code>*</code> 参数可能有一对或多对</li></ul></li><li><p><code>?$</code> 整个域名后的路径或值都可有可无 并都已存在的元素作为整个URL结尾</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断URL是否合法</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isUrl</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.bilibili.com&quot;</span> +<br>            <span class="hljs-string">&quot;/video/BV1Eq4y1E79W?p=17&amp;spm_id_from=pageDriver&quot;</span> +<br>            <span class="hljs-string">&quot;&amp;vd_source=1515d4ece87146a640eebb6175354668&quot;</span>;<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^((http)s?://)?([\\w-]+\\.)+[a-zA-Z0-9]+((/[\\w-#]+)+\\?([\\w-]+=[\\w-]+&amp;?)*)?$&quot;</span>;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(regex, url);<br>    <span class="hljs-keyword">if</span> (isMatch) &#123;<br>        System.out.println(<span class="hljs-string">&quot;符合！&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不符合！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-结巴问题"><a href="#4-结巴问题" class="headerlink" title="4. 结巴问题"></a>4. 结巴问题</h3><blockquote><p>将 ‘’我我我….要要….吃吃吃吃..饭‘’ 变成 ”我要吃饭“</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spla</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我我....要要....吃吃吃吃..饭&quot;</span>;<br>    <br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;\\.&quot;</span>);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<br><span class="hljs-comment">//    将所有 . 替换成 空白</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> matcher.replaceAll(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern1</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher1</span> <span class="hljs-operator">=</span> pattern1.matcher(s);<br><span class="hljs-comment">//    使用外部反向引用，$1 表示正则式中的第一个分组捕获的值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> matcher1.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br>    System.out.println(res);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-验证数字规范性"><a href="#5-验证数字规范性" class="headerlink" title="5. 验证数字规范性"></a>5. 验证数字规范性</h3><blockquote><p>识别整数 ， 小数，负数等</p></blockquote><ul><li><code>^[-+]?([1-9]\\d*|0)(\\.\\d+)?$</code><ul><li><code>[-+]?</code><ul><li>数字符号不一定存在</li></ul></li><li><code>([1-9\\d*|0])</code><ul><li>数字以 1 开头 </li><li>或以 0 开头的小数且只能由一个 0</li></ul></li><li><code>(\\.\\d+)?</code><ul><li>数字的小数部分不一定存在</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
